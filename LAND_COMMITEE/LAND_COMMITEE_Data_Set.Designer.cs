//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LAND_COMMITEE {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("LAND_COMMITEE_Data_Set")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LAND_COMMITEE_Data_Set : System.Data.DataSet {
        
        private BOUNDARY_DETAILSDataTable tableBOUNDARY_DETAILS;
        
        private CATEG_SUPERVISORDataTable tableCATEG_SUPERVISOR;
        
        private DISTRICTDataTable tableDISTRICT;
        
        private LAND_INFODataTable tableLAND_INFO;
        
        private PROVINCEDataTable tablePROVINCE;
        
        private SECTEURDataTable tableSECTEUR;
        
        private SUPERVISORDataTable tableSUPERVISOR;
        
        private Select_PasswordDataTable tableSelect_Password;
        
        private UserTablesDataTable tableUserTables;
        
        private BENEFICIARY_BY_LOCATIONDataTable tableBENEFICIARY_BY_LOCATION;
        
        private FORMER_OWNERSDataTable tableFORMER_OWNERS;
        
        private Select_Max_NumRefDataTable tableSelect_Max_NumRef;
        
        private LAND_OWNERDataTable tableLAND_OWNER;
        
        private SelectAllInfoDataTable tableSelectAllInfo;
        
        private FindByNameDataTable tableFindByName;
        
        private UnCheckedLandDataTable tableUnCheckedLand;
        
        private SelectUserInfoDataTable tableSelectUserInfo;
        
        private DistinctDistrictDataTable tableDistinctDistrict;
        
        private DistinctSectorDataTable tableDistinctSector;
        
        private SelectFormerOwnerDistributionDataTable tableSelectFormerOwnerDistribution;
        
        private SelectFormerOwnerDataTable tableSelectFormerOwner;
        
        private SelectSuperVisorDataTable tableSelectSuperVisor;
        
        private CellsDataTable tableCells;
        
        private DISTRICT_LandDataTable tableDISTRICT_Land;
        
        private SECTEUR_LandDataTable tableSECTEUR_Land;
        
        private Cells_LandDataTable tableCells_Land;
        
        private SelectOneFORMEROWNERDataTable tableSelectOneFORMEROWNER;
        
        private DistinctCellsDataTable tableDistinctCells;
        
        private BeneficiaryCategoryDataTable tableBeneficiaryCategory;
        
        private FormerOwnerCategoryDataTable tableFormerOwnerCategory;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAND_COMMITEE_Data_Set() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LAND_COMMITEE_Data_Set(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BOUNDARY_DETAILS"] != null)) {
                    base.Tables.Add(new BOUNDARY_DETAILSDataTable(ds.Tables["BOUNDARY_DETAILS"]));
                }
                if ((ds.Tables["CATEG_SUPERVISOR"] != null)) {
                    base.Tables.Add(new CATEG_SUPERVISORDataTable(ds.Tables["CATEG_SUPERVISOR"]));
                }
                if ((ds.Tables["DISTRICT"] != null)) {
                    base.Tables.Add(new DISTRICTDataTable(ds.Tables["DISTRICT"]));
                }
                if ((ds.Tables["LAND_INFO"] != null)) {
                    base.Tables.Add(new LAND_INFODataTable(ds.Tables["LAND_INFO"]));
                }
                if ((ds.Tables["PROVINCE"] != null)) {
                    base.Tables.Add(new PROVINCEDataTable(ds.Tables["PROVINCE"]));
                }
                if ((ds.Tables["SECTEUR"] != null)) {
                    base.Tables.Add(new SECTEURDataTable(ds.Tables["SECTEUR"]));
                }
                if ((ds.Tables["SUPERVISOR"] != null)) {
                    base.Tables.Add(new SUPERVISORDataTable(ds.Tables["SUPERVISOR"]));
                }
                if ((ds.Tables["Select_Password"] != null)) {
                    base.Tables.Add(new Select_PasswordDataTable(ds.Tables["Select_Password"]));
                }
                if ((ds.Tables["UserTables"] != null)) {
                    base.Tables.Add(new UserTablesDataTable(ds.Tables["UserTables"]));
                }
                if ((ds.Tables["BENEFICIARY_BY_LOCATION"] != null)) {
                    base.Tables.Add(new BENEFICIARY_BY_LOCATIONDataTable(ds.Tables["BENEFICIARY_BY_LOCATION"]));
                }
                if ((ds.Tables["FORMER_OWNERS"] != null)) {
                    base.Tables.Add(new FORMER_OWNERSDataTable(ds.Tables["FORMER_OWNERS"]));
                }
                if ((ds.Tables["Select_Max_NumRef"] != null)) {
                    base.Tables.Add(new Select_Max_NumRefDataTable(ds.Tables["Select_Max_NumRef"]));
                }
                if ((ds.Tables["LAND_OWNER"] != null)) {
                    base.Tables.Add(new LAND_OWNERDataTable(ds.Tables["LAND_OWNER"]));
                }
                if ((ds.Tables["SelectAllInfo"] != null)) {
                    base.Tables.Add(new SelectAllInfoDataTable(ds.Tables["SelectAllInfo"]));
                }
                if ((ds.Tables["FindByName"] != null)) {
                    base.Tables.Add(new FindByNameDataTable(ds.Tables["FindByName"]));
                }
                if ((ds.Tables["UnCheckedLand"] != null)) {
                    base.Tables.Add(new UnCheckedLandDataTable(ds.Tables["UnCheckedLand"]));
                }
                if ((ds.Tables["SelectUserInfo"] != null)) {
                    base.Tables.Add(new SelectUserInfoDataTable(ds.Tables["SelectUserInfo"]));
                }
                if ((ds.Tables["DistinctDistrict"] != null)) {
                    base.Tables.Add(new DistinctDistrictDataTable(ds.Tables["DistinctDistrict"]));
                }
                if ((ds.Tables["DistinctSector"] != null)) {
                    base.Tables.Add(new DistinctSectorDataTable(ds.Tables["DistinctSector"]));
                }
                if ((ds.Tables["SelectFormerOwnerDistribution"] != null)) {
                    base.Tables.Add(new SelectFormerOwnerDistributionDataTable(ds.Tables["SelectFormerOwnerDistribution"]));
                }
                if ((ds.Tables["SelectFormerOwner"] != null)) {
                    base.Tables.Add(new SelectFormerOwnerDataTable(ds.Tables["SelectFormerOwner"]));
                }
                if ((ds.Tables["SelectSuperVisor"] != null)) {
                    base.Tables.Add(new SelectSuperVisorDataTable(ds.Tables["SelectSuperVisor"]));
                }
                if ((ds.Tables["Cells"] != null)) {
                    base.Tables.Add(new CellsDataTable(ds.Tables["Cells"]));
                }
                if ((ds.Tables["DISTRICT_Land"] != null)) {
                    base.Tables.Add(new DISTRICT_LandDataTable(ds.Tables["DISTRICT_Land"]));
                }
                if ((ds.Tables["SECTEUR_Land"] != null)) {
                    base.Tables.Add(new SECTEUR_LandDataTable(ds.Tables["SECTEUR_Land"]));
                }
                if ((ds.Tables["Cells_Land"] != null)) {
                    base.Tables.Add(new Cells_LandDataTable(ds.Tables["Cells_Land"]));
                }
                if ((ds.Tables["SelectOneFORMEROWNER"] != null)) {
                    base.Tables.Add(new SelectOneFORMEROWNERDataTable(ds.Tables["SelectOneFORMEROWNER"]));
                }
                if ((ds.Tables["DistinctCells"] != null)) {
                    base.Tables.Add(new DistinctCellsDataTable(ds.Tables["DistinctCells"]));
                }
                if ((ds.Tables["BeneficiaryCategory"] != null)) {
                    base.Tables.Add(new BeneficiaryCategoryDataTable(ds.Tables["BeneficiaryCategory"]));
                }
                if ((ds.Tables["FormerOwnerCategory"] != null)) {
                    base.Tables.Add(new FormerOwnerCategoryDataTable(ds.Tables["FormerOwnerCategory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BOUNDARY_DETAILSDataTable BOUNDARY_DETAILS {
            get {
                return this.tableBOUNDARY_DETAILS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CATEG_SUPERVISORDataTable CATEG_SUPERVISOR {
            get {
                return this.tableCATEG_SUPERVISOR;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DISTRICTDataTable DISTRICT {
            get {
                return this.tableDISTRICT;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LAND_INFODataTable LAND_INFO {
            get {
                return this.tableLAND_INFO;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROVINCEDataTable PROVINCE {
            get {
                return this.tablePROVINCE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SECTEURDataTable SECTEUR {
            get {
                return this.tableSECTEUR;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SUPERVISORDataTable SUPERVISOR {
            get {
                return this.tableSUPERVISOR;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Select_PasswordDataTable Select_Password {
            get {
                return this.tableSelect_Password;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserTablesDataTable UserTables {
            get {
                return this.tableUserTables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BENEFICIARY_BY_LOCATIONDataTable BENEFICIARY_BY_LOCATION {
            get {
                return this.tableBENEFICIARY_BY_LOCATION;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FORMER_OWNERSDataTable FORMER_OWNERS {
            get {
                return this.tableFORMER_OWNERS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Select_Max_NumRefDataTable Select_Max_NumRef {
            get {
                return this.tableSelect_Max_NumRef;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LAND_OWNERDataTable LAND_OWNER {
            get {
                return this.tableLAND_OWNER;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectAllInfoDataTable SelectAllInfo {
            get {
                return this.tableSelectAllInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FindByNameDataTable FindByName {
            get {
                return this.tableFindByName;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnCheckedLandDataTable UnCheckedLand {
            get {
                return this.tableUnCheckedLand;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectUserInfoDataTable SelectUserInfo {
            get {
                return this.tableSelectUserInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistinctDistrictDataTable DistinctDistrict {
            get {
                return this.tableDistinctDistrict;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistinctSectorDataTable DistinctSector {
            get {
                return this.tableDistinctSector;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectFormerOwnerDistributionDataTable SelectFormerOwnerDistribution {
            get {
                return this.tableSelectFormerOwnerDistribution;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectFormerOwnerDataTable SelectFormerOwner {
            get {
                return this.tableSelectFormerOwner;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectSuperVisorDataTable SelectSuperVisor {
            get {
                return this.tableSelectSuperVisor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CellsDataTable Cells {
            get {
                return this.tableCells;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DISTRICT_LandDataTable DISTRICT_Land {
            get {
                return this.tableDISTRICT_Land;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SECTEUR_LandDataTable SECTEUR_Land {
            get {
                return this.tableSECTEUR_Land;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Cells_LandDataTable Cells_Land {
            get {
                return this.tableCells_Land;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectOneFORMEROWNERDataTable SelectOneFORMEROWNER {
            get {
                return this.tableSelectOneFORMEROWNER;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistinctCellsDataTable DistinctCells {
            get {
                return this.tableDistinctCells;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BeneficiaryCategoryDataTable BeneficiaryCategory {
            get {
                return this.tableBeneficiaryCategory;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormerOwnerCategoryDataTable FormerOwnerCategory {
            get {
                return this.tableFormerOwnerCategory;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            LAND_COMMITEE_Data_Set cln = ((LAND_COMMITEE_Data_Set)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BOUNDARY_DETAILS"] != null)) {
                    base.Tables.Add(new BOUNDARY_DETAILSDataTable(ds.Tables["BOUNDARY_DETAILS"]));
                }
                if ((ds.Tables["CATEG_SUPERVISOR"] != null)) {
                    base.Tables.Add(new CATEG_SUPERVISORDataTable(ds.Tables["CATEG_SUPERVISOR"]));
                }
                if ((ds.Tables["DISTRICT"] != null)) {
                    base.Tables.Add(new DISTRICTDataTable(ds.Tables["DISTRICT"]));
                }
                if ((ds.Tables["LAND_INFO"] != null)) {
                    base.Tables.Add(new LAND_INFODataTable(ds.Tables["LAND_INFO"]));
                }
                if ((ds.Tables["PROVINCE"] != null)) {
                    base.Tables.Add(new PROVINCEDataTable(ds.Tables["PROVINCE"]));
                }
                if ((ds.Tables["SECTEUR"] != null)) {
                    base.Tables.Add(new SECTEURDataTable(ds.Tables["SECTEUR"]));
                }
                if ((ds.Tables["SUPERVISOR"] != null)) {
                    base.Tables.Add(new SUPERVISORDataTable(ds.Tables["SUPERVISOR"]));
                }
                if ((ds.Tables["Select_Password"] != null)) {
                    base.Tables.Add(new Select_PasswordDataTable(ds.Tables["Select_Password"]));
                }
                if ((ds.Tables["UserTables"] != null)) {
                    base.Tables.Add(new UserTablesDataTable(ds.Tables["UserTables"]));
                }
                if ((ds.Tables["BENEFICIARY_BY_LOCATION"] != null)) {
                    base.Tables.Add(new BENEFICIARY_BY_LOCATIONDataTable(ds.Tables["BENEFICIARY_BY_LOCATION"]));
                }
                if ((ds.Tables["FORMER_OWNERS"] != null)) {
                    base.Tables.Add(new FORMER_OWNERSDataTable(ds.Tables["FORMER_OWNERS"]));
                }
                if ((ds.Tables["Select_Max_NumRef"] != null)) {
                    base.Tables.Add(new Select_Max_NumRefDataTable(ds.Tables["Select_Max_NumRef"]));
                }
                if ((ds.Tables["LAND_OWNER"] != null)) {
                    base.Tables.Add(new LAND_OWNERDataTable(ds.Tables["LAND_OWNER"]));
                }
                if ((ds.Tables["SelectAllInfo"] != null)) {
                    base.Tables.Add(new SelectAllInfoDataTable(ds.Tables["SelectAllInfo"]));
                }
                if ((ds.Tables["FindByName"] != null)) {
                    base.Tables.Add(new FindByNameDataTable(ds.Tables["FindByName"]));
                }
                if ((ds.Tables["UnCheckedLand"] != null)) {
                    base.Tables.Add(new UnCheckedLandDataTable(ds.Tables["UnCheckedLand"]));
                }
                if ((ds.Tables["SelectUserInfo"] != null)) {
                    base.Tables.Add(new SelectUserInfoDataTable(ds.Tables["SelectUserInfo"]));
                }
                if ((ds.Tables["DistinctDistrict"] != null)) {
                    base.Tables.Add(new DistinctDistrictDataTable(ds.Tables["DistinctDistrict"]));
                }
                if ((ds.Tables["DistinctSector"] != null)) {
                    base.Tables.Add(new DistinctSectorDataTable(ds.Tables["DistinctSector"]));
                }
                if ((ds.Tables["SelectFormerOwnerDistribution"] != null)) {
                    base.Tables.Add(new SelectFormerOwnerDistributionDataTable(ds.Tables["SelectFormerOwnerDistribution"]));
                }
                if ((ds.Tables["SelectFormerOwner"] != null)) {
                    base.Tables.Add(new SelectFormerOwnerDataTable(ds.Tables["SelectFormerOwner"]));
                }
                if ((ds.Tables["SelectSuperVisor"] != null)) {
                    base.Tables.Add(new SelectSuperVisorDataTable(ds.Tables["SelectSuperVisor"]));
                }
                if ((ds.Tables["Cells"] != null)) {
                    base.Tables.Add(new CellsDataTable(ds.Tables["Cells"]));
                }
                if ((ds.Tables["DISTRICT_Land"] != null)) {
                    base.Tables.Add(new DISTRICT_LandDataTable(ds.Tables["DISTRICT_Land"]));
                }
                if ((ds.Tables["SECTEUR_Land"] != null)) {
                    base.Tables.Add(new SECTEUR_LandDataTable(ds.Tables["SECTEUR_Land"]));
                }
                if ((ds.Tables["Cells_Land"] != null)) {
                    base.Tables.Add(new Cells_LandDataTable(ds.Tables["Cells_Land"]));
                }
                if ((ds.Tables["SelectOneFORMEROWNER"] != null)) {
                    base.Tables.Add(new SelectOneFORMEROWNERDataTable(ds.Tables["SelectOneFORMEROWNER"]));
                }
                if ((ds.Tables["DistinctCells"] != null)) {
                    base.Tables.Add(new DistinctCellsDataTable(ds.Tables["DistinctCells"]));
                }
                if ((ds.Tables["BeneficiaryCategory"] != null)) {
                    base.Tables.Add(new BeneficiaryCategoryDataTable(ds.Tables["BeneficiaryCategory"]));
                }
                if ((ds.Tables["FormerOwnerCategory"] != null)) {
                    base.Tables.Add(new FormerOwnerCategoryDataTable(ds.Tables["FormerOwnerCategory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBOUNDARY_DETAILS = ((BOUNDARY_DETAILSDataTable)(base.Tables["BOUNDARY_DETAILS"]));
            if ((initTable == true)) {
                if ((this.tableBOUNDARY_DETAILS != null)) {
                    this.tableBOUNDARY_DETAILS.InitVars();
                }
            }
            this.tableCATEG_SUPERVISOR = ((CATEG_SUPERVISORDataTable)(base.Tables["CATEG_SUPERVISOR"]));
            if ((initTable == true)) {
                if ((this.tableCATEG_SUPERVISOR != null)) {
                    this.tableCATEG_SUPERVISOR.InitVars();
                }
            }
            this.tableDISTRICT = ((DISTRICTDataTable)(base.Tables["DISTRICT"]));
            if ((initTable == true)) {
                if ((this.tableDISTRICT != null)) {
                    this.tableDISTRICT.InitVars();
                }
            }
            this.tableLAND_INFO = ((LAND_INFODataTable)(base.Tables["LAND_INFO"]));
            if ((initTable == true)) {
                if ((this.tableLAND_INFO != null)) {
                    this.tableLAND_INFO.InitVars();
                }
            }
            this.tablePROVINCE = ((PROVINCEDataTable)(base.Tables["PROVINCE"]));
            if ((initTable == true)) {
                if ((this.tablePROVINCE != null)) {
                    this.tablePROVINCE.InitVars();
                }
            }
            this.tableSECTEUR = ((SECTEURDataTable)(base.Tables["SECTEUR"]));
            if ((initTable == true)) {
                if ((this.tableSECTEUR != null)) {
                    this.tableSECTEUR.InitVars();
                }
            }
            this.tableSUPERVISOR = ((SUPERVISORDataTable)(base.Tables["SUPERVISOR"]));
            if ((initTable == true)) {
                if ((this.tableSUPERVISOR != null)) {
                    this.tableSUPERVISOR.InitVars();
                }
            }
            this.tableSelect_Password = ((Select_PasswordDataTable)(base.Tables["Select_Password"]));
            if ((initTable == true)) {
                if ((this.tableSelect_Password != null)) {
                    this.tableSelect_Password.InitVars();
                }
            }
            this.tableUserTables = ((UserTablesDataTable)(base.Tables["UserTables"]));
            if ((initTable == true)) {
                if ((this.tableUserTables != null)) {
                    this.tableUserTables.InitVars();
                }
            }
            this.tableBENEFICIARY_BY_LOCATION = ((BENEFICIARY_BY_LOCATIONDataTable)(base.Tables["BENEFICIARY_BY_LOCATION"]));
            if ((initTable == true)) {
                if ((this.tableBENEFICIARY_BY_LOCATION != null)) {
                    this.tableBENEFICIARY_BY_LOCATION.InitVars();
                }
            }
            this.tableFORMER_OWNERS = ((FORMER_OWNERSDataTable)(base.Tables["FORMER_OWNERS"]));
            if ((initTable == true)) {
                if ((this.tableFORMER_OWNERS != null)) {
                    this.tableFORMER_OWNERS.InitVars();
                }
            }
            this.tableSelect_Max_NumRef = ((Select_Max_NumRefDataTable)(base.Tables["Select_Max_NumRef"]));
            if ((initTable == true)) {
                if ((this.tableSelect_Max_NumRef != null)) {
                    this.tableSelect_Max_NumRef.InitVars();
                }
            }
            this.tableLAND_OWNER = ((LAND_OWNERDataTable)(base.Tables["LAND_OWNER"]));
            if ((initTable == true)) {
                if ((this.tableLAND_OWNER != null)) {
                    this.tableLAND_OWNER.InitVars();
                }
            }
            this.tableSelectAllInfo = ((SelectAllInfoDataTable)(base.Tables["SelectAllInfo"]));
            if ((initTable == true)) {
                if ((this.tableSelectAllInfo != null)) {
                    this.tableSelectAllInfo.InitVars();
                }
            }
            this.tableFindByName = ((FindByNameDataTable)(base.Tables["FindByName"]));
            if ((initTable == true)) {
                if ((this.tableFindByName != null)) {
                    this.tableFindByName.InitVars();
                }
            }
            this.tableUnCheckedLand = ((UnCheckedLandDataTable)(base.Tables["UnCheckedLand"]));
            if ((initTable == true)) {
                if ((this.tableUnCheckedLand != null)) {
                    this.tableUnCheckedLand.InitVars();
                }
            }
            this.tableSelectUserInfo = ((SelectUserInfoDataTable)(base.Tables["SelectUserInfo"]));
            if ((initTable == true)) {
                if ((this.tableSelectUserInfo != null)) {
                    this.tableSelectUserInfo.InitVars();
                }
            }
            this.tableDistinctDistrict = ((DistinctDistrictDataTable)(base.Tables["DistinctDistrict"]));
            if ((initTable == true)) {
                if ((this.tableDistinctDistrict != null)) {
                    this.tableDistinctDistrict.InitVars();
                }
            }
            this.tableDistinctSector = ((DistinctSectorDataTable)(base.Tables["DistinctSector"]));
            if ((initTable == true)) {
                if ((this.tableDistinctSector != null)) {
                    this.tableDistinctSector.InitVars();
                }
            }
            this.tableSelectFormerOwnerDistribution = ((SelectFormerOwnerDistributionDataTable)(base.Tables["SelectFormerOwnerDistribution"]));
            if ((initTable == true)) {
                if ((this.tableSelectFormerOwnerDistribution != null)) {
                    this.tableSelectFormerOwnerDistribution.InitVars();
                }
            }
            this.tableSelectFormerOwner = ((SelectFormerOwnerDataTable)(base.Tables["SelectFormerOwner"]));
            if ((initTable == true)) {
                if ((this.tableSelectFormerOwner != null)) {
                    this.tableSelectFormerOwner.InitVars();
                }
            }
            this.tableSelectSuperVisor = ((SelectSuperVisorDataTable)(base.Tables["SelectSuperVisor"]));
            if ((initTable == true)) {
                if ((this.tableSelectSuperVisor != null)) {
                    this.tableSelectSuperVisor.InitVars();
                }
            }
            this.tableCells = ((CellsDataTable)(base.Tables["Cells"]));
            if ((initTable == true)) {
                if ((this.tableCells != null)) {
                    this.tableCells.InitVars();
                }
            }
            this.tableDISTRICT_Land = ((DISTRICT_LandDataTable)(base.Tables["DISTRICT_Land"]));
            if ((initTable == true)) {
                if ((this.tableDISTRICT_Land != null)) {
                    this.tableDISTRICT_Land.InitVars();
                }
            }
            this.tableSECTEUR_Land = ((SECTEUR_LandDataTable)(base.Tables["SECTEUR_Land"]));
            if ((initTable == true)) {
                if ((this.tableSECTEUR_Land != null)) {
                    this.tableSECTEUR_Land.InitVars();
                }
            }
            this.tableCells_Land = ((Cells_LandDataTable)(base.Tables["Cells_Land"]));
            if ((initTable == true)) {
                if ((this.tableCells_Land != null)) {
                    this.tableCells_Land.InitVars();
                }
            }
            this.tableSelectOneFORMEROWNER = ((SelectOneFORMEROWNERDataTable)(base.Tables["SelectOneFORMEROWNER"]));
            if ((initTable == true)) {
                if ((this.tableSelectOneFORMEROWNER != null)) {
                    this.tableSelectOneFORMEROWNER.InitVars();
                }
            }
            this.tableDistinctCells = ((DistinctCellsDataTable)(base.Tables["DistinctCells"]));
            if ((initTable == true)) {
                if ((this.tableDistinctCells != null)) {
                    this.tableDistinctCells.InitVars();
                }
            }
            this.tableBeneficiaryCategory = ((BeneficiaryCategoryDataTable)(base.Tables["BeneficiaryCategory"]));
            if ((initTable == true)) {
                if ((this.tableBeneficiaryCategory != null)) {
                    this.tableBeneficiaryCategory.InitVars();
                }
            }
            this.tableFormerOwnerCategory = ((FormerOwnerCategoryDataTable)(base.Tables["FormerOwnerCategory"]));
            if ((initTable == true)) {
                if ((this.tableFormerOwnerCategory != null)) {
                    this.tableFormerOwnerCategory.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LAND_COMMITEE_Data_Set";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/LAND_COMMITEE_Data_Set.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBOUNDARY_DETAILS = new BOUNDARY_DETAILSDataTable();
            base.Tables.Add(this.tableBOUNDARY_DETAILS);
            this.tableCATEG_SUPERVISOR = new CATEG_SUPERVISORDataTable();
            base.Tables.Add(this.tableCATEG_SUPERVISOR);
            this.tableDISTRICT = new DISTRICTDataTable();
            base.Tables.Add(this.tableDISTRICT);
            this.tableLAND_INFO = new LAND_INFODataTable();
            base.Tables.Add(this.tableLAND_INFO);
            this.tablePROVINCE = new PROVINCEDataTable();
            base.Tables.Add(this.tablePROVINCE);
            this.tableSECTEUR = new SECTEURDataTable();
            base.Tables.Add(this.tableSECTEUR);
            this.tableSUPERVISOR = new SUPERVISORDataTable();
            base.Tables.Add(this.tableSUPERVISOR);
            this.tableSelect_Password = new Select_PasswordDataTable();
            base.Tables.Add(this.tableSelect_Password);
            this.tableUserTables = new UserTablesDataTable();
            base.Tables.Add(this.tableUserTables);
            this.tableBENEFICIARY_BY_LOCATION = new BENEFICIARY_BY_LOCATIONDataTable();
            base.Tables.Add(this.tableBENEFICIARY_BY_LOCATION);
            this.tableFORMER_OWNERS = new FORMER_OWNERSDataTable();
            base.Tables.Add(this.tableFORMER_OWNERS);
            this.tableSelect_Max_NumRef = new Select_Max_NumRefDataTable();
            base.Tables.Add(this.tableSelect_Max_NumRef);
            this.tableLAND_OWNER = new LAND_OWNERDataTable();
            base.Tables.Add(this.tableLAND_OWNER);
            this.tableSelectAllInfo = new SelectAllInfoDataTable();
            base.Tables.Add(this.tableSelectAllInfo);
            this.tableFindByName = new FindByNameDataTable();
            base.Tables.Add(this.tableFindByName);
            this.tableUnCheckedLand = new UnCheckedLandDataTable();
            base.Tables.Add(this.tableUnCheckedLand);
            this.tableSelectUserInfo = new SelectUserInfoDataTable();
            base.Tables.Add(this.tableSelectUserInfo);
            this.tableDistinctDistrict = new DistinctDistrictDataTable();
            base.Tables.Add(this.tableDistinctDistrict);
            this.tableDistinctSector = new DistinctSectorDataTable();
            base.Tables.Add(this.tableDistinctSector);
            this.tableSelectFormerOwnerDistribution = new SelectFormerOwnerDistributionDataTable();
            base.Tables.Add(this.tableSelectFormerOwnerDistribution);
            this.tableSelectFormerOwner = new SelectFormerOwnerDataTable();
            base.Tables.Add(this.tableSelectFormerOwner);
            this.tableSelectSuperVisor = new SelectSuperVisorDataTable();
            base.Tables.Add(this.tableSelectSuperVisor);
            this.tableCells = new CellsDataTable();
            base.Tables.Add(this.tableCells);
            this.tableDISTRICT_Land = new DISTRICT_LandDataTable();
            base.Tables.Add(this.tableDISTRICT_Land);
            this.tableSECTEUR_Land = new SECTEUR_LandDataTable();
            base.Tables.Add(this.tableSECTEUR_Land);
            this.tableCells_Land = new Cells_LandDataTable();
            base.Tables.Add(this.tableCells_Land);
            this.tableSelectOneFORMEROWNER = new SelectOneFORMEROWNERDataTable();
            base.Tables.Add(this.tableSelectOneFORMEROWNER);
            this.tableDistinctCells = new DistinctCellsDataTable();
            base.Tables.Add(this.tableDistinctCells);
            this.tableBeneficiaryCategory = new BeneficiaryCategoryDataTable();
            base.Tables.Add(this.tableBeneficiaryCategory);
            this.tableFormerOwnerCategory = new FormerOwnerCategoryDataTable();
            base.Tables.Add(this.tableFormerOwnerCategory);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBOUNDARY_DETAILS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCATEG_SUPERVISOR() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDISTRICT() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLAND_INFO() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROVINCE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSECTEUR() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSUPERVISOR() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelect_Password() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBENEFICIARY_BY_LOCATION() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFORMER_OWNERS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelect_Max_NumRef() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLAND_OWNER() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelectAllInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFindByName() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnCheckedLand() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelectUserInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistinctDistrict() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistinctSector() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelectFormerOwnerDistribution() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelectFormerOwner() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelectSuperVisor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCells() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDISTRICT_Land() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSECTEUR_Land() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCells_Land() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelectOneFORMEROWNER() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistinctCells() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBeneficiaryCategory() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormerOwnerCategory() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void BOUNDARY_DETAILSRowChangeEventHandler(object sender, BOUNDARY_DETAILSRowChangeEvent e);
        
        public delegate void CATEG_SUPERVISORRowChangeEventHandler(object sender, CATEG_SUPERVISORRowChangeEvent e);
        
        public delegate void DISTRICTRowChangeEventHandler(object sender, DISTRICTRowChangeEvent e);
        
        public delegate void LAND_INFORowChangeEventHandler(object sender, LAND_INFORowChangeEvent e);
        
        public delegate void PROVINCERowChangeEventHandler(object sender, PROVINCERowChangeEvent e);
        
        public delegate void SECTEURRowChangeEventHandler(object sender, SECTEURRowChangeEvent e);
        
        public delegate void SUPERVISORRowChangeEventHandler(object sender, SUPERVISORRowChangeEvent e);
        
        public delegate void Select_PasswordRowChangeEventHandler(object sender, Select_PasswordRowChangeEvent e);
        
        public delegate void UserTablesRowChangeEventHandler(object sender, UserTablesRowChangeEvent e);
        
        public delegate void BENEFICIARY_BY_LOCATIONRowChangeEventHandler(object sender, BENEFICIARY_BY_LOCATIONRowChangeEvent e);
        
        public delegate void FORMER_OWNERSRowChangeEventHandler(object sender, FORMER_OWNERSRowChangeEvent e);
        
        public delegate void Select_Max_NumRefRowChangeEventHandler(object sender, Select_Max_NumRefRowChangeEvent e);
        
        public delegate void LAND_OWNERRowChangeEventHandler(object sender, LAND_OWNERRowChangeEvent e);
        
        public delegate void SelectAllInfoRowChangeEventHandler(object sender, SelectAllInfoRowChangeEvent e);
        
        public delegate void FindByNameRowChangeEventHandler(object sender, FindByNameRowChangeEvent e);
        
        public delegate void UnCheckedLandRowChangeEventHandler(object sender, UnCheckedLandRowChangeEvent e);
        
        public delegate void SelectUserInfoRowChangeEventHandler(object sender, SelectUserInfoRowChangeEvent e);
        
        public delegate void DistinctDistrictRowChangeEventHandler(object sender, DistinctDistrictRowChangeEvent e);
        
        public delegate void DistinctSectorRowChangeEventHandler(object sender, DistinctSectorRowChangeEvent e);
        
        public delegate void SelectFormerOwnerDistributionRowChangeEventHandler(object sender, SelectFormerOwnerDistributionRowChangeEvent e);
        
        public delegate void SelectFormerOwnerRowChangeEventHandler(object sender, SelectFormerOwnerRowChangeEvent e);
        
        public delegate void SelectSuperVisorRowChangeEventHandler(object sender, SelectSuperVisorRowChangeEvent e);
        
        public delegate void CellsRowChangeEventHandler(object sender, CellsRowChangeEvent e);
        
        public delegate void DISTRICT_LandRowChangeEventHandler(object sender, DISTRICT_LandRowChangeEvent e);
        
        public delegate void SECTEUR_LandRowChangeEventHandler(object sender, SECTEUR_LandRowChangeEvent e);
        
        public delegate void Cells_LandRowChangeEventHandler(object sender, Cells_LandRowChangeEvent e);
        
        public delegate void SelectOneFORMEROWNERRowChangeEventHandler(object sender, SelectOneFORMEROWNERRowChangeEvent e);
        
        public delegate void DistinctCellsRowChangeEventHandler(object sender, DistinctCellsRowChangeEvent e);
        
        public delegate void BeneficiaryCategoryRowChangeEventHandler(object sender, BeneficiaryCategoryRowChangeEvent e);
        
        public delegate void FormerOwnerCategoryRowChangeEventHandler(object sender, FormerOwnerCategoryRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BOUNDARY_DETAILSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNo_REFERENCE;
            
            private System.Data.DataColumn columnLAND_No;
            
            private System.Data.DataColumn columnWAY_POINTS;
            
            private System.Data.DataColumn columnNORTHING_Y;
            
            private System.Data.DataColumn columnEASTING_X;
            
            private System.Data.DataColumn columnFROM_WAYPOINT;
            
            private System.Data.DataColumn columnTO_WAYPOINT;
            
            private System.Data.DataColumn columnDISTANCE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOUNDARY_DETAILSDataTable() {
                this.TableName = "BOUNDARY_DETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BOUNDARY_DETAILSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BOUNDARY_DETAILSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn No_REFERENCEColumn {
                get {
                    return this.columnNo_REFERENCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_NoColumn {
                get {
                    return this.columnLAND_No;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WAY_POINTSColumn {
                get {
                    return this.columnWAY_POINTS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NORTHING_YColumn {
                get {
                    return this.columnNORTHING_Y;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EASTING_XColumn {
                get {
                    return this.columnEASTING_X;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FROM_WAYPOINTColumn {
                get {
                    return this.columnFROM_WAYPOINT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TO_WAYPOINTColumn {
                get {
                    return this.columnTO_WAYPOINT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DISTANCEColumn {
                get {
                    return this.columnDISTANCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOUNDARY_DETAILSRow this[int index] {
                get {
                    return ((BOUNDARY_DETAILSRow)(this.Rows[index]));
                }
            }
            
            public event BOUNDARY_DETAILSRowChangeEventHandler BOUNDARY_DETAILSRowChanging;
            
            public event BOUNDARY_DETAILSRowChangeEventHandler BOUNDARY_DETAILSRowChanged;
            
            public event BOUNDARY_DETAILSRowChangeEventHandler BOUNDARY_DETAILSRowDeleting;
            
            public event BOUNDARY_DETAILSRowChangeEventHandler BOUNDARY_DETAILSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBOUNDARY_DETAILSRow(BOUNDARY_DETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOUNDARY_DETAILSRow AddBOUNDARY_DETAILSRow(string LAND_No, int WAY_POINTS, string NORTHING_Y, string EASTING_X, int FROM_WAYPOINT, int TO_WAYPOINT, double DISTANCE) {
                BOUNDARY_DETAILSRow rowBOUNDARY_DETAILSRow = ((BOUNDARY_DETAILSRow)(this.NewRow()));
                rowBOUNDARY_DETAILSRow.ItemArray = new object[] {
                        null,
                        LAND_No,
                        WAY_POINTS,
                        NORTHING_Y,
                        EASTING_X,
                        FROM_WAYPOINT,
                        TO_WAYPOINT,
                        DISTANCE};
                this.Rows.Add(rowBOUNDARY_DETAILSRow);
                return rowBOUNDARY_DETAILSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOUNDARY_DETAILSRow FindByNo_REFERENCE(int No_REFERENCE) {
                return ((BOUNDARY_DETAILSRow)(this.Rows.Find(new object[] {
                            No_REFERENCE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BOUNDARY_DETAILSDataTable cln = ((BOUNDARY_DETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BOUNDARY_DETAILSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNo_REFERENCE = base.Columns["No_REFERENCE"];
                this.columnLAND_No = base.Columns["LAND_No"];
                this.columnWAY_POINTS = base.Columns["WAY_POINTS"];
                this.columnNORTHING_Y = base.Columns["NORTHING_Y"];
                this.columnEASTING_X = base.Columns["EASTING_X"];
                this.columnFROM_WAYPOINT = base.Columns["FROM_WAYPOINT"];
                this.columnTO_WAYPOINT = base.Columns["TO_WAYPOINT"];
                this.columnDISTANCE = base.Columns["DISTANCE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNo_REFERENCE = new System.Data.DataColumn("No_REFERENCE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_REFERENCE);
                this.columnLAND_No = new System.Data.DataColumn("LAND_No", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_No);
                this.columnWAY_POINTS = new System.Data.DataColumn("WAY_POINTS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAY_POINTS);
                this.columnNORTHING_Y = new System.Data.DataColumn("NORTHING_Y", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNORTHING_Y);
                this.columnEASTING_X = new System.Data.DataColumn("EASTING_X", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEASTING_X);
                this.columnFROM_WAYPOINT = new System.Data.DataColumn("FROM_WAYPOINT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFROM_WAYPOINT);
                this.columnTO_WAYPOINT = new System.Data.DataColumn("TO_WAYPOINT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTO_WAYPOINT);
                this.columnDISTANCE = new System.Data.DataColumn("DISTANCE", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTANCE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnNo_REFERENCE}, true));
                this.columnNo_REFERENCE.AutoIncrement = true;
                this.columnNo_REFERENCE.AllowDBNull = false;
                this.columnNo_REFERENCE.ReadOnly = true;
                this.columnNo_REFERENCE.Unique = true;
                this.columnLAND_No.AllowDBNull = false;
                this.columnLAND_No.MaxLength = 50;
                this.columnWAY_POINTS.AllowDBNull = false;
                this.columnNORTHING_Y.MaxLength = 50;
                this.columnEASTING_X.MaxLength = 50;
                this.columnFROM_WAYPOINT.AllowDBNull = false;
                this.columnTO_WAYPOINT.AllowDBNull = false;
                this.columnDISTANCE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOUNDARY_DETAILSRow NewBOUNDARY_DETAILSRow() {
                return ((BOUNDARY_DETAILSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BOUNDARY_DETAILSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BOUNDARY_DETAILSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BOUNDARY_DETAILSRowChanged != null)) {
                    this.BOUNDARY_DETAILSRowChanged(this, new BOUNDARY_DETAILSRowChangeEvent(((BOUNDARY_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BOUNDARY_DETAILSRowChanging != null)) {
                    this.BOUNDARY_DETAILSRowChanging(this, new BOUNDARY_DETAILSRowChangeEvent(((BOUNDARY_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BOUNDARY_DETAILSRowDeleted != null)) {
                    this.BOUNDARY_DETAILSRowDeleted(this, new BOUNDARY_DETAILSRowChangeEvent(((BOUNDARY_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BOUNDARY_DETAILSRowDeleting != null)) {
                    this.BOUNDARY_DETAILSRowDeleting(this, new BOUNDARY_DETAILSRowChangeEvent(((BOUNDARY_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBOUNDARY_DETAILSRow(BOUNDARY_DETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BOUNDARY_DETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CATEG_SUPERVISORDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNo_RANK_PROFESSIONAL;
            
            private System.Data.DataColumn columnRANK_PROFESSIONAL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEG_SUPERVISORDataTable() {
                this.TableName = "CATEG_SUPERVISOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CATEG_SUPERVISORDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CATEG_SUPERVISORDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn No_RANK_PROFESSIONALColumn {
                get {
                    return this.columnNo_RANK_PROFESSIONAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RANK_PROFESSIONALColumn {
                get {
                    return this.columnRANK_PROFESSIONAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEG_SUPERVISORRow this[int index] {
                get {
                    return ((CATEG_SUPERVISORRow)(this.Rows[index]));
                }
            }
            
            public event CATEG_SUPERVISORRowChangeEventHandler CATEG_SUPERVISORRowChanging;
            
            public event CATEG_SUPERVISORRowChangeEventHandler CATEG_SUPERVISORRowChanged;
            
            public event CATEG_SUPERVISORRowChangeEventHandler CATEG_SUPERVISORRowDeleting;
            
            public event CATEG_SUPERVISORRowChangeEventHandler CATEG_SUPERVISORRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCATEG_SUPERVISORRow(CATEG_SUPERVISORRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEG_SUPERVISORRow AddCATEG_SUPERVISORRow(string RANK_PROFESSIONAL) {
                CATEG_SUPERVISORRow rowCATEG_SUPERVISORRow = ((CATEG_SUPERVISORRow)(this.NewRow()));
                rowCATEG_SUPERVISORRow.ItemArray = new object[] {
                        null,
                        RANK_PROFESSIONAL};
                this.Rows.Add(rowCATEG_SUPERVISORRow);
                return rowCATEG_SUPERVISORRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEG_SUPERVISORRow FindByNo_RANK_PROFESSIONAL(int No_RANK_PROFESSIONAL) {
                return ((CATEG_SUPERVISORRow)(this.Rows.Find(new object[] {
                            No_RANK_PROFESSIONAL})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CATEG_SUPERVISORDataTable cln = ((CATEG_SUPERVISORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CATEG_SUPERVISORDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNo_RANK_PROFESSIONAL = base.Columns["No_RANK_PROFESSIONAL"];
                this.columnRANK_PROFESSIONAL = base.Columns["RANK_PROFESSIONAL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNo_RANK_PROFESSIONAL = new System.Data.DataColumn("No_RANK_PROFESSIONAL", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_RANK_PROFESSIONAL);
                this.columnRANK_PROFESSIONAL = new System.Data.DataColumn("RANK_PROFESSIONAL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRANK_PROFESSIONAL);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnNo_RANK_PROFESSIONAL}, true));
                this.columnNo_RANK_PROFESSIONAL.AutoIncrement = true;
                this.columnNo_RANK_PROFESSIONAL.AllowDBNull = false;
                this.columnNo_RANK_PROFESSIONAL.ReadOnly = true;
                this.columnNo_RANK_PROFESSIONAL.Unique = true;
                this.columnRANK_PROFESSIONAL.AllowDBNull = false;
                this.columnRANK_PROFESSIONAL.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEG_SUPERVISORRow NewCATEG_SUPERVISORRow() {
                return ((CATEG_SUPERVISORRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CATEG_SUPERVISORRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CATEG_SUPERVISORRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CATEG_SUPERVISORRowChanged != null)) {
                    this.CATEG_SUPERVISORRowChanged(this, new CATEG_SUPERVISORRowChangeEvent(((CATEG_SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CATEG_SUPERVISORRowChanging != null)) {
                    this.CATEG_SUPERVISORRowChanging(this, new CATEG_SUPERVISORRowChangeEvent(((CATEG_SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CATEG_SUPERVISORRowDeleted != null)) {
                    this.CATEG_SUPERVISORRowDeleted(this, new CATEG_SUPERVISORRowChangeEvent(((CATEG_SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CATEG_SUPERVISORRowDeleting != null)) {
                    this.CATEG_SUPERVISORRowDeleting(this, new CATEG_SUPERVISORRowChangeEvent(((CATEG_SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCATEG_SUPERVISORRow(CATEG_SUPERVISORRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CATEG_SUPERVISORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DISTRICTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_DISTRICT;
            
            private System.Data.DataColumn columnID_PROVINCE;
            
            private System.Data.DataColumn columnDESCRIPTION_DISTRICT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICTDataTable() {
                this.TableName = "DISTRICT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DISTRICTDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DISTRICTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_DISTRICTColumn {
                get {
                    return this.columnID_DISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_PROVINCEColumn {
                get {
                    return this.columnID_PROVINCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_DISTRICTColumn {
                get {
                    return this.columnDESCRIPTION_DISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICTRow this[int index] {
                get {
                    return ((DISTRICTRow)(this.Rows[index]));
                }
            }
            
            public event DISTRICTRowChangeEventHandler DISTRICTRowChanging;
            
            public event DISTRICTRowChangeEventHandler DISTRICTRowChanged;
            
            public event DISTRICTRowChangeEventHandler DISTRICTRowDeleting;
            
            public event DISTRICTRowChangeEventHandler DISTRICTRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDISTRICTRow(DISTRICTRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICTRow AddDISTRICTRow(int ID_DISTRICT, int ID_PROVINCE, string DESCRIPTION_DISTRICT) {
                DISTRICTRow rowDISTRICTRow = ((DISTRICTRow)(this.NewRow()));
                rowDISTRICTRow.ItemArray = new object[] {
                        ID_DISTRICT,
                        ID_PROVINCE,
                        DESCRIPTION_DISTRICT};
                this.Rows.Add(rowDISTRICTRow);
                return rowDISTRICTRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICTRow FindByID_DISTRICT(int ID_DISTRICT) {
                return ((DISTRICTRow)(this.Rows.Find(new object[] {
                            ID_DISTRICT})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DISTRICTDataTable cln = ((DISTRICTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DISTRICTDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_DISTRICT = base.Columns["ID_DISTRICT"];
                this.columnID_PROVINCE = base.Columns["ID_PROVINCE"];
                this.columnDESCRIPTION_DISTRICT = base.Columns["DESCRIPTION_DISTRICT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_DISTRICT = new System.Data.DataColumn("ID_DISTRICT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DISTRICT);
                this.columnID_PROVINCE = new System.Data.DataColumn("ID_PROVINCE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PROVINCE);
                this.columnDESCRIPTION_DISTRICT = new System.Data.DataColumn("DESCRIPTION_DISTRICT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_DISTRICT);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_DISTRICT}, true));
                this.columnID_DISTRICT.AllowDBNull = false;
                this.columnID_DISTRICT.Unique = true;
                this.columnID_PROVINCE.AllowDBNull = false;
                this.columnDESCRIPTION_DISTRICT.AllowDBNull = false;
                this.columnDESCRIPTION_DISTRICT.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICTRow NewDISTRICTRow() {
                return ((DISTRICTRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DISTRICTRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DISTRICTRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DISTRICTRowChanged != null)) {
                    this.DISTRICTRowChanged(this, new DISTRICTRowChangeEvent(((DISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DISTRICTRowChanging != null)) {
                    this.DISTRICTRowChanging(this, new DISTRICTRowChangeEvent(((DISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DISTRICTRowDeleted != null)) {
                    this.DISTRICTRowDeleted(this, new DISTRICTRowChangeEvent(((DISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DISTRICTRowDeleting != null)) {
                    this.DISTRICTRowDeleting(this, new DISTRICTRowChangeEvent(((DISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDISTRICTRow(DISTRICTRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DISTRICTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LAND_INFODataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLAND_No;
            
            private System.Data.DataColumn columnPROVINCE;
            
            private System.Data.DataColumn columnDISTRICT;
            
            private System.Data.DataColumn columnSECTOR;
            
            private System.Data.DataColumn columnCELLULE;
            
            private System.Data.DataColumn columnUSAGE;
            
            private System.Data.DataColumn columnLAND_SIZE;
            
            private System.Data.DataColumn columnNo_SUPERVISOR;
            
            private System.Data.DataColumn columnFORMER_OWNER;
            
            private System.Data.DataColumn columnNumReference;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_INFODataTable() {
                this.TableName = "LAND_INFO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LAND_INFODataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LAND_INFODataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_NoColumn {
                get {
                    return this.columnLAND_No;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PROVINCEColumn {
                get {
                    return this.columnPROVINCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DISTRICTColumn {
                get {
                    return this.columnDISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SECTORColumn {
                get {
                    return this.columnSECTOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CELLULEColumn {
                get {
                    return this.columnCELLULE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn USAGEColumn {
                get {
                    return this.columnUSAGE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_SIZEColumn {
                get {
                    return this.columnLAND_SIZE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn No_SUPERVISORColumn {
                get {
                    return this.columnNo_SUPERVISOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FORMER_OWNERColumn {
                get {
                    return this.columnFORMER_OWNER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumReferenceColumn {
                get {
                    return this.columnNumReference;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_INFORow this[int index] {
                get {
                    return ((LAND_INFORow)(this.Rows[index]));
                }
            }
            
            public event LAND_INFORowChangeEventHandler LAND_INFORowChanging;
            
            public event LAND_INFORowChangeEventHandler LAND_INFORowChanged;
            
            public event LAND_INFORowChangeEventHandler LAND_INFORowDeleting;
            
            public event LAND_INFORowChangeEventHandler LAND_INFORowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLAND_INFORow(LAND_INFORow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_INFORow AddLAND_INFORow(string LAND_No, string PROVINCE, int DISTRICT, int SECTOR, int CELLULE, string USAGE, double LAND_SIZE, int No_SUPERVISOR, int FORMER_OWNER, int NumReference) {
                LAND_INFORow rowLAND_INFORow = ((LAND_INFORow)(this.NewRow()));
                rowLAND_INFORow.ItemArray = new object[] {
                        LAND_No,
                        PROVINCE,
                        DISTRICT,
                        SECTOR,
                        CELLULE,
                        USAGE,
                        LAND_SIZE,
                        No_SUPERVISOR,
                        FORMER_OWNER,
                        NumReference};
                this.Rows.Add(rowLAND_INFORow);
                return rowLAND_INFORow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_INFORow FindByLAND_No(string LAND_No) {
                return ((LAND_INFORow)(this.Rows.Find(new object[] {
                            LAND_No})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LAND_INFODataTable cln = ((LAND_INFODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LAND_INFODataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLAND_No = base.Columns["LAND_No"];
                this.columnPROVINCE = base.Columns["PROVINCE"];
                this.columnDISTRICT = base.Columns["DISTRICT"];
                this.columnSECTOR = base.Columns["SECTOR"];
                this.columnCELLULE = base.Columns["CELLULE"];
                this.columnUSAGE = base.Columns["USAGE"];
                this.columnLAND_SIZE = base.Columns["LAND_SIZE"];
                this.columnNo_SUPERVISOR = base.Columns["No_SUPERVISOR"];
                this.columnFORMER_OWNER = base.Columns["FORMER_OWNER"];
                this.columnNumReference = base.Columns["NumReference"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLAND_No = new System.Data.DataColumn("LAND_No", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_No);
                this.columnPROVINCE = new System.Data.DataColumn("PROVINCE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROVINCE);
                this.columnDISTRICT = new System.Data.DataColumn("DISTRICT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTRICT);
                this.columnSECTOR = new System.Data.DataColumn("SECTOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSECTOR);
                this.columnCELLULE = new System.Data.DataColumn("CELLULE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCELLULE);
                this.columnUSAGE = new System.Data.DataColumn("USAGE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSAGE);
                this.columnLAND_SIZE = new System.Data.DataColumn("LAND_SIZE", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_SIZE);
                this.columnNo_SUPERVISOR = new System.Data.DataColumn("No_SUPERVISOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_SUPERVISOR);
                this.columnFORMER_OWNER = new System.Data.DataColumn("FORMER_OWNER", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORMER_OWNER);
                this.columnNumReference = new System.Data.DataColumn("NumReference", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumReference);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLAND_No}, true));
                this.columnLAND_No.AllowDBNull = false;
                this.columnLAND_No.Unique = true;
                this.columnLAND_No.MaxLength = 50;
                this.columnPROVINCE.AllowDBNull = false;
                this.columnPROVINCE.MaxLength = 20;
                this.columnDISTRICT.AllowDBNull = false;
                this.columnSECTOR.AllowDBNull = false;
                this.columnCELLULE.AllowDBNull = false;
                this.columnUSAGE.AllowDBNull = false;
                this.columnUSAGE.MaxLength = 50;
                this.columnLAND_SIZE.AllowDBNull = false;
                this.columnNo_SUPERVISOR.AllowDBNull = false;
                this.columnFORMER_OWNER.AllowDBNull = false;
                this.columnNumReference.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_INFORow NewLAND_INFORow() {
                return ((LAND_INFORow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LAND_INFORow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LAND_INFORow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LAND_INFORowChanged != null)) {
                    this.LAND_INFORowChanged(this, new LAND_INFORowChangeEvent(((LAND_INFORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LAND_INFORowChanging != null)) {
                    this.LAND_INFORowChanging(this, new LAND_INFORowChangeEvent(((LAND_INFORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LAND_INFORowDeleted != null)) {
                    this.LAND_INFORowDeleted(this, new LAND_INFORowChangeEvent(((LAND_INFORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LAND_INFORowDeleting != null)) {
                    this.LAND_INFORowDeleting(this, new LAND_INFORowChangeEvent(((LAND_INFORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLAND_INFORow(LAND_INFORow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LAND_INFODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROVINCEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_PROVINCE;
            
            private System.Data.DataColumn columnDESCRIPTION_PROVINCE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVINCEDataTable() {
                this.TableName = "PROVINCE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROVINCEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROVINCEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_PROVINCEColumn {
                get {
                    return this.columnID_PROVINCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_PROVINCEColumn {
                get {
                    return this.columnDESCRIPTION_PROVINCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVINCERow this[int index] {
                get {
                    return ((PROVINCERow)(this.Rows[index]));
                }
            }
            
            public event PROVINCERowChangeEventHandler PROVINCERowChanging;
            
            public event PROVINCERowChangeEventHandler PROVINCERowChanged;
            
            public event PROVINCERowChangeEventHandler PROVINCERowDeleting;
            
            public event PROVINCERowChangeEventHandler PROVINCERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROVINCERow(PROVINCERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVINCERow AddPROVINCERow(int ID_PROVINCE, string DESCRIPTION_PROVINCE) {
                PROVINCERow rowPROVINCERow = ((PROVINCERow)(this.NewRow()));
                rowPROVINCERow.ItemArray = new object[] {
                        ID_PROVINCE,
                        DESCRIPTION_PROVINCE};
                this.Rows.Add(rowPROVINCERow);
                return rowPROVINCERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVINCERow FindByID_PROVINCE(int ID_PROVINCE) {
                return ((PROVINCERow)(this.Rows.Find(new object[] {
                            ID_PROVINCE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PROVINCEDataTable cln = ((PROVINCEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PROVINCEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_PROVINCE = base.Columns["ID_PROVINCE"];
                this.columnDESCRIPTION_PROVINCE = base.Columns["DESCRIPTION_PROVINCE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_PROVINCE = new System.Data.DataColumn("ID_PROVINCE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PROVINCE);
                this.columnDESCRIPTION_PROVINCE = new System.Data.DataColumn("DESCRIPTION_PROVINCE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_PROVINCE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_PROVINCE}, true));
                this.columnID_PROVINCE.AllowDBNull = false;
                this.columnID_PROVINCE.Unique = true;
                this.columnDESCRIPTION_PROVINCE.AllowDBNull = false;
                this.columnDESCRIPTION_PROVINCE.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVINCERow NewPROVINCERow() {
                return ((PROVINCERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PROVINCERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PROVINCERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROVINCERowChanged != null)) {
                    this.PROVINCERowChanged(this, new PROVINCERowChangeEvent(((PROVINCERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROVINCERowChanging != null)) {
                    this.PROVINCERowChanging(this, new PROVINCERowChangeEvent(((PROVINCERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROVINCERowDeleted != null)) {
                    this.PROVINCERowDeleted(this, new PROVINCERowChangeEvent(((PROVINCERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROVINCERowDeleting != null)) {
                    this.PROVINCERowDeleting(this, new PROVINCERowChangeEvent(((PROVINCERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROVINCERow(PROVINCERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROVINCEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SECTEURDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_SECTEUR;
            
            private System.Data.DataColumn columnID_DISTRICT;
            
            private System.Data.DataColumn columnDESCRIPTION_SECTEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEURDataTable() {
                this.TableName = "SECTEUR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SECTEURDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SECTEURDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_SECTEURColumn {
                get {
                    return this.columnID_SECTEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_DISTRICTColumn {
                get {
                    return this.columnID_DISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_SECTEURColumn {
                get {
                    return this.columnDESCRIPTION_SECTEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEURRow this[int index] {
                get {
                    return ((SECTEURRow)(this.Rows[index]));
                }
            }
            
            public event SECTEURRowChangeEventHandler SECTEURRowChanging;
            
            public event SECTEURRowChangeEventHandler SECTEURRowChanged;
            
            public event SECTEURRowChangeEventHandler SECTEURRowDeleting;
            
            public event SECTEURRowChangeEventHandler SECTEURRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSECTEURRow(SECTEURRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEURRow AddSECTEURRow(int ID_SECTEUR, int ID_DISTRICT, string DESCRIPTION_SECTEUR) {
                SECTEURRow rowSECTEURRow = ((SECTEURRow)(this.NewRow()));
                rowSECTEURRow.ItemArray = new object[] {
                        ID_SECTEUR,
                        ID_DISTRICT,
                        DESCRIPTION_SECTEUR};
                this.Rows.Add(rowSECTEURRow);
                return rowSECTEURRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEURRow FindByID_SECTEUR(int ID_SECTEUR) {
                return ((SECTEURRow)(this.Rows.Find(new object[] {
                            ID_SECTEUR})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SECTEURDataTable cln = ((SECTEURDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SECTEURDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_SECTEUR = base.Columns["ID_SECTEUR"];
                this.columnID_DISTRICT = base.Columns["ID_DISTRICT"];
                this.columnDESCRIPTION_SECTEUR = base.Columns["DESCRIPTION_SECTEUR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_SECTEUR = new System.Data.DataColumn("ID_SECTEUR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_SECTEUR);
                this.columnID_DISTRICT = new System.Data.DataColumn("ID_DISTRICT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DISTRICT);
                this.columnDESCRIPTION_SECTEUR = new System.Data.DataColumn("DESCRIPTION_SECTEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_SECTEUR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_SECTEUR}, true));
                this.columnID_SECTEUR.AllowDBNull = false;
                this.columnID_SECTEUR.Unique = true;
                this.columnID_DISTRICT.AllowDBNull = false;
                this.columnDESCRIPTION_SECTEUR.AllowDBNull = false;
                this.columnDESCRIPTION_SECTEUR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEURRow NewSECTEURRow() {
                return ((SECTEURRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SECTEURRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SECTEURRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SECTEURRowChanged != null)) {
                    this.SECTEURRowChanged(this, new SECTEURRowChangeEvent(((SECTEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SECTEURRowChanging != null)) {
                    this.SECTEURRowChanging(this, new SECTEURRowChangeEvent(((SECTEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SECTEURRowDeleted != null)) {
                    this.SECTEURRowDeleted(this, new SECTEURRowChangeEvent(((SECTEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SECTEURRowDeleting != null)) {
                    this.SECTEURRowDeleting(this, new SECTEURRowChangeEvent(((SECTEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSECTEURRow(SECTEURRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SECTEURDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SUPERVISORDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNo_SUPERVISOR;
            
            private System.Data.DataColumn columnNOM;
            
            private System.Data.DataColumn columnPRENOM;
            
            private System.Data.DataColumn columnAUTRE_NOM;
            
            private System.Data.DataColumn columnNo_RANK_PROFESSIONAL;
            
            private System.Data.DataColumn columnFullName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPERVISORDataTable() {
                this.TableName = "SUPERVISOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUPERVISORDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SUPERVISORDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn No_SUPERVISORColumn {
                get {
                    return this.columnNo_SUPERVISOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOMColumn {
                get {
                    return this.columnNOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRENOMColumn {
                get {
                    return this.columnPRENOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AUTRE_NOMColumn {
                get {
                    return this.columnAUTRE_NOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn No_RANK_PROFESSIONALColumn {
                get {
                    return this.columnNo_RANK_PROFESSIONAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPERVISORRow this[int index] {
                get {
                    return ((SUPERVISORRow)(this.Rows[index]));
                }
            }
            
            public event SUPERVISORRowChangeEventHandler SUPERVISORRowChanging;
            
            public event SUPERVISORRowChangeEventHandler SUPERVISORRowChanged;
            
            public event SUPERVISORRowChangeEventHandler SUPERVISORRowDeleting;
            
            public event SUPERVISORRowChangeEventHandler SUPERVISORRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSUPERVISORRow(SUPERVISORRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPERVISORRow AddSUPERVISORRow(string NOM, string PRENOM, string AUTRE_NOM, int No_RANK_PROFESSIONAL, string FullName) {
                SUPERVISORRow rowSUPERVISORRow = ((SUPERVISORRow)(this.NewRow()));
                rowSUPERVISORRow.ItemArray = new object[] {
                        null,
                        NOM,
                        PRENOM,
                        AUTRE_NOM,
                        No_RANK_PROFESSIONAL,
                        FullName};
                this.Rows.Add(rowSUPERVISORRow);
                return rowSUPERVISORRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPERVISORRow FindByNo_SUPERVISOR(int No_SUPERVISOR) {
                return ((SUPERVISORRow)(this.Rows.Find(new object[] {
                            No_SUPERVISOR})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SUPERVISORDataTable cln = ((SUPERVISORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SUPERVISORDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNo_SUPERVISOR = base.Columns["No_SUPERVISOR"];
                this.columnNOM = base.Columns["NOM"];
                this.columnPRENOM = base.Columns["PRENOM"];
                this.columnAUTRE_NOM = base.Columns["AUTRE_NOM"];
                this.columnNo_RANK_PROFESSIONAL = base.Columns["No_RANK_PROFESSIONAL"];
                this.columnFullName = base.Columns["FullName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNo_SUPERVISOR = new System.Data.DataColumn("No_SUPERVISOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_SUPERVISOR);
                this.columnNOM = new System.Data.DataColumn("NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM);
                this.columnPRENOM = new System.Data.DataColumn("PRENOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRENOM);
                this.columnAUTRE_NOM = new System.Data.DataColumn("AUTRE_NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTRE_NOM);
                this.columnNo_RANK_PROFESSIONAL = new System.Data.DataColumn("No_RANK_PROFESSIONAL", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_RANK_PROFESSIONAL);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnNo_SUPERVISOR}, true));
                this.columnNo_SUPERVISOR.AutoIncrement = true;
                this.columnNo_SUPERVISOR.AllowDBNull = false;
                this.columnNo_SUPERVISOR.ReadOnly = true;
                this.columnNo_SUPERVISOR.Unique = true;
                this.columnNOM.AllowDBNull = false;
                this.columnNOM.MaxLength = 50;
                this.columnPRENOM.MaxLength = 50;
                this.columnAUTRE_NOM.MaxLength = 50;
                this.columnNo_RANK_PROFESSIONAL.AllowDBNull = false;
                this.columnFullName.ReadOnly = true;
                this.columnFullName.MaxLength = 152;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPERVISORRow NewSUPERVISORRow() {
                return ((SUPERVISORRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SUPERVISORRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SUPERVISORRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SUPERVISORRowChanged != null)) {
                    this.SUPERVISORRowChanged(this, new SUPERVISORRowChangeEvent(((SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SUPERVISORRowChanging != null)) {
                    this.SUPERVISORRowChanging(this, new SUPERVISORRowChangeEvent(((SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SUPERVISORRowDeleted != null)) {
                    this.SUPERVISORRowDeleted(this, new SUPERVISORRowChangeEvent(((SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SUPERVISORRowDeleting != null)) {
                    this.SUPERVISORRowDeleting(this, new SUPERVISORRowChangeEvent(((SUPERVISORRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSUPERVISORRow(SUPERVISORRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SUPERVISORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Select_PasswordDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_PasswordDataTable() {
                this.TableName = "Select_Password";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Select_PasswordDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Select_PasswordDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_PasswordRow this[int index] {
                get {
                    return ((Select_PasswordRow)(this.Rows[index]));
                }
            }
            
            public event Select_PasswordRowChangeEventHandler Select_PasswordRowChanging;
            
            public event Select_PasswordRowChangeEventHandler Select_PasswordRowChanged;
            
            public event Select_PasswordRowChangeEventHandler Select_PasswordRowDeleting;
            
            public event Select_PasswordRowChangeEventHandler Select_PasswordRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelect_PasswordRow(Select_PasswordRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_PasswordRow AddSelect_PasswordRow() {
                Select_PasswordRow rowSelect_PasswordRow = ((Select_PasswordRow)(this.NewRow()));
                rowSelect_PasswordRow.ItemArray = new object[0];
                this.Rows.Add(rowSelect_PasswordRow);
                return rowSelect_PasswordRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Select_PasswordDataTable cln = ((Select_PasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Select_PasswordDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_PasswordRow NewSelect_PasswordRow() {
                return ((Select_PasswordRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Select_PasswordRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Select_PasswordRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Select_PasswordRowChanged != null)) {
                    this.Select_PasswordRowChanged(this, new Select_PasswordRowChangeEvent(((Select_PasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Select_PasswordRowChanging != null)) {
                    this.Select_PasswordRowChanging(this, new Select_PasswordRowChangeEvent(((Select_PasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Select_PasswordRowDeleted != null)) {
                    this.Select_PasswordRowDeleted(this, new Select_PasswordRowChangeEvent(((Select_PasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Select_PasswordRowDeleting != null)) {
                    this.Select_PasswordRowDeleting(this, new Select_PasswordRowChangeEvent(((Select_PasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelect_PasswordRow(Select_PasswordRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Select_PasswordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserTablesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnusername;
            
            private System.Data.DataColumn columnpassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserTablesDataTable() {
                this.TableName = "UserTables";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserTablesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserTablesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn usernameColumn {
                get {
                    return this.columnusername;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserTablesRow this[int index] {
                get {
                    return ((UserTablesRow)(this.Rows[index]));
                }
            }
            
            public event UserTablesRowChangeEventHandler UserTablesRowChanging;
            
            public event UserTablesRowChangeEventHandler UserTablesRowChanged;
            
            public event UserTablesRowChangeEventHandler UserTablesRowDeleting;
            
            public event UserTablesRowChangeEventHandler UserTablesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserTablesRow(UserTablesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserTablesRow AddUserTablesRow(string username, string password) {
                UserTablesRow rowUserTablesRow = ((UserTablesRow)(this.NewRow()));
                rowUserTablesRow.ItemArray = new object[] {
                        username,
                        password};
                this.Rows.Add(rowUserTablesRow);
                return rowUserTablesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserTablesRow FindByusername(string username) {
                return ((UserTablesRow)(this.Rows.Find(new object[] {
                            username})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserTablesDataTable cln = ((UserTablesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserTablesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnusername = base.Columns["username"];
                this.columnpassword = base.Columns["password"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnusername = new System.Data.DataColumn("username", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnusername);
                this.columnpassword = new System.Data.DataColumn("password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpassword);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnusername}, true));
                this.columnusername.AllowDBNull = false;
                this.columnusername.Unique = true;
                this.columnusername.MaxLength = 50;
                this.columnpassword.AllowDBNull = false;
                this.columnpassword.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserTablesRow NewUserTablesRow() {
                return ((UserTablesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserTablesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserTablesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserTablesRowChanged != null)) {
                    this.UserTablesRowChanged(this, new UserTablesRowChangeEvent(((UserTablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserTablesRowChanging != null)) {
                    this.UserTablesRowChanging(this, new UserTablesRowChangeEvent(((UserTablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserTablesRowDeleted != null)) {
                    this.UserTablesRowDeleted(this, new UserTablesRowChangeEvent(((UserTablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserTablesRowDeleting != null)) {
                    this.UserTablesRowDeleting(this, new UserTablesRowChangeEvent(((UserTablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserTablesRow(UserTablesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserTablesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BENEFICIARY_BY_LOCATIONDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLAND_No;
            
            private System.Data.DataColumn columnNOM;
            
            private System.Data.DataColumn columnPRENOM;
            
            private System.Data.DataColumn columnNo_IDENTITE;
            
            private System.Data.DataColumn columnLAND_SIZE;
            
            private System.Data.DataColumn columnDISTRICT;
            
            private System.Data.DataColumn columnSECTOR;
            
            private System.Data.DataColumn columnCELLULE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BENEFICIARY_BY_LOCATIONDataTable() {
                this.TableName = "BENEFICIARY_BY_LOCATION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BENEFICIARY_BY_LOCATIONDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BENEFICIARY_BY_LOCATIONDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_NoColumn {
                get {
                    return this.columnLAND_No;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOMColumn {
                get {
                    return this.columnNOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRENOMColumn {
                get {
                    return this.columnPRENOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn No_IDENTITEColumn {
                get {
                    return this.columnNo_IDENTITE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_SIZEColumn {
                get {
                    return this.columnLAND_SIZE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DISTRICTColumn {
                get {
                    return this.columnDISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SECTORColumn {
                get {
                    return this.columnSECTOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CELLULEColumn {
                get {
                    return this.columnCELLULE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BENEFICIARY_BY_LOCATIONRow this[int index] {
                get {
                    return ((BENEFICIARY_BY_LOCATIONRow)(this.Rows[index]));
                }
            }
            
            public event BENEFICIARY_BY_LOCATIONRowChangeEventHandler BENEFICIARY_BY_LOCATIONRowChanging;
            
            public event BENEFICIARY_BY_LOCATIONRowChangeEventHandler BENEFICIARY_BY_LOCATIONRowChanged;
            
            public event BENEFICIARY_BY_LOCATIONRowChangeEventHandler BENEFICIARY_BY_LOCATIONRowDeleting;
            
            public event BENEFICIARY_BY_LOCATIONRowChangeEventHandler BENEFICIARY_BY_LOCATIONRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBENEFICIARY_BY_LOCATIONRow(BENEFICIARY_BY_LOCATIONRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BENEFICIARY_BY_LOCATIONRow AddBENEFICIARY_BY_LOCATIONRow(string LAND_No, string NOM, string PRENOM, string No_IDENTITE, double LAND_SIZE, string DISTRICT, string SECTOR, string CELLULE) {
                BENEFICIARY_BY_LOCATIONRow rowBENEFICIARY_BY_LOCATIONRow = ((BENEFICIARY_BY_LOCATIONRow)(this.NewRow()));
                rowBENEFICIARY_BY_LOCATIONRow.ItemArray = new object[] {
                        LAND_No,
                        NOM,
                        PRENOM,
                        No_IDENTITE,
                        LAND_SIZE,
                        DISTRICT,
                        SECTOR,
                        CELLULE};
                this.Rows.Add(rowBENEFICIARY_BY_LOCATIONRow);
                return rowBENEFICIARY_BY_LOCATIONRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BENEFICIARY_BY_LOCATIONRow FindByLAND_No(string LAND_No) {
                return ((BENEFICIARY_BY_LOCATIONRow)(this.Rows.Find(new object[] {
                            LAND_No})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BENEFICIARY_BY_LOCATIONDataTable cln = ((BENEFICIARY_BY_LOCATIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BENEFICIARY_BY_LOCATIONDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLAND_No = base.Columns["LAND_No"];
                this.columnNOM = base.Columns["NOM"];
                this.columnPRENOM = base.Columns["PRENOM"];
                this.columnNo_IDENTITE = base.Columns["No_IDENTITE"];
                this.columnLAND_SIZE = base.Columns["LAND_SIZE"];
                this.columnDISTRICT = base.Columns["DISTRICT"];
                this.columnSECTOR = base.Columns["SECTOR"];
                this.columnCELLULE = base.Columns["CELLULE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLAND_No = new System.Data.DataColumn("LAND_No", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_No);
                this.columnNOM = new System.Data.DataColumn("NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM);
                this.columnPRENOM = new System.Data.DataColumn("PRENOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRENOM);
                this.columnNo_IDENTITE = new System.Data.DataColumn("No_IDENTITE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_IDENTITE);
                this.columnLAND_SIZE = new System.Data.DataColumn("LAND_SIZE", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_SIZE);
                this.columnDISTRICT = new System.Data.DataColumn("DISTRICT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTRICT);
                this.columnSECTOR = new System.Data.DataColumn("SECTOR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSECTOR);
                this.columnCELLULE = new System.Data.DataColumn("CELLULE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCELLULE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLAND_No}, true));
                this.columnLAND_No.AllowDBNull = false;
                this.columnLAND_No.Unique = true;
                this.columnLAND_No.MaxLength = 50;
                this.columnNOM.AllowDBNull = false;
                this.columnNOM.MaxLength = 50;
                this.columnPRENOM.MaxLength = 50;
                this.columnNo_IDENTITE.MaxLength = 20;
                this.columnDISTRICT.AllowDBNull = false;
                this.columnDISTRICT.MaxLength = 50;
                this.columnSECTOR.AllowDBNull = false;
                this.columnSECTOR.MaxLength = 50;
                this.columnCELLULE.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BENEFICIARY_BY_LOCATIONRow NewBENEFICIARY_BY_LOCATIONRow() {
                return ((BENEFICIARY_BY_LOCATIONRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BENEFICIARY_BY_LOCATIONRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BENEFICIARY_BY_LOCATIONRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BENEFICIARY_BY_LOCATIONRowChanged != null)) {
                    this.BENEFICIARY_BY_LOCATIONRowChanged(this, new BENEFICIARY_BY_LOCATIONRowChangeEvent(((BENEFICIARY_BY_LOCATIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BENEFICIARY_BY_LOCATIONRowChanging != null)) {
                    this.BENEFICIARY_BY_LOCATIONRowChanging(this, new BENEFICIARY_BY_LOCATIONRowChangeEvent(((BENEFICIARY_BY_LOCATIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BENEFICIARY_BY_LOCATIONRowDeleted != null)) {
                    this.BENEFICIARY_BY_LOCATIONRowDeleted(this, new BENEFICIARY_BY_LOCATIONRowChangeEvent(((BENEFICIARY_BY_LOCATIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BENEFICIARY_BY_LOCATIONRowDeleting != null)) {
                    this.BENEFICIARY_BY_LOCATIONRowDeleting(this, new BENEFICIARY_BY_LOCATIONRowChangeEvent(((BENEFICIARY_BY_LOCATIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBENEFICIARY_BY_LOCATIONRow(BENEFICIARY_BY_LOCATIONRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BENEFICIARY_BY_LOCATIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FORMER_OWNERSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_FORMER_OWNER;
            
            private System.Data.DataColumn columnNOM;
            
            private System.Data.DataColumn columnPRENOM;
            
            private System.Data.DataColumn columnAUTRE_NOM;
            
            private System.Data.DataColumn columnFORMER_LAND_SIZE;
            
            private System.Data.DataColumn columnformer_owner;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORMER_OWNERSDataTable() {
                this.TableName = "FORMER_OWNERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FORMER_OWNERSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FORMER_OWNERSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_FORMER_OWNERColumn {
                get {
                    return this.columnID_FORMER_OWNER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOMColumn {
                get {
                    return this.columnNOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRENOMColumn {
                get {
                    return this.columnPRENOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AUTRE_NOMColumn {
                get {
                    return this.columnAUTRE_NOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FORMER_LAND_SIZEColumn {
                get {
                    return this.columnFORMER_LAND_SIZE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn former_ownerColumn {
                get {
                    return this.columnformer_owner;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORMER_OWNERSRow this[int index] {
                get {
                    return ((FORMER_OWNERSRow)(this.Rows[index]));
                }
            }
            
            public event FORMER_OWNERSRowChangeEventHandler FORMER_OWNERSRowChanging;
            
            public event FORMER_OWNERSRowChangeEventHandler FORMER_OWNERSRowChanged;
            
            public event FORMER_OWNERSRowChangeEventHandler FORMER_OWNERSRowDeleting;
            
            public event FORMER_OWNERSRowChangeEventHandler FORMER_OWNERSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFORMER_OWNERSRow(FORMER_OWNERSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORMER_OWNERSRow AddFORMER_OWNERSRow(string NOM, string PRENOM, string AUTRE_NOM, double FORMER_LAND_SIZE, string former_owner) {
                FORMER_OWNERSRow rowFORMER_OWNERSRow = ((FORMER_OWNERSRow)(this.NewRow()));
                rowFORMER_OWNERSRow.ItemArray = new object[] {
                        null,
                        NOM,
                        PRENOM,
                        AUTRE_NOM,
                        FORMER_LAND_SIZE,
                        former_owner};
                this.Rows.Add(rowFORMER_OWNERSRow);
                return rowFORMER_OWNERSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORMER_OWNERSRow FindByID_FORMER_OWNER(int ID_FORMER_OWNER) {
                return ((FORMER_OWNERSRow)(this.Rows.Find(new object[] {
                            ID_FORMER_OWNER})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FORMER_OWNERSDataTable cln = ((FORMER_OWNERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FORMER_OWNERSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_FORMER_OWNER = base.Columns["ID_FORMER_OWNER"];
                this.columnNOM = base.Columns["NOM"];
                this.columnPRENOM = base.Columns["PRENOM"];
                this.columnAUTRE_NOM = base.Columns["AUTRE_NOM"];
                this.columnFORMER_LAND_SIZE = base.Columns["FORMER_LAND_SIZE"];
                this.columnformer_owner = base.Columns["former_owner"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_FORMER_OWNER = new System.Data.DataColumn("ID_FORMER_OWNER", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_FORMER_OWNER);
                this.columnNOM = new System.Data.DataColumn("NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM);
                this.columnPRENOM = new System.Data.DataColumn("PRENOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRENOM);
                this.columnAUTRE_NOM = new System.Data.DataColumn("AUTRE_NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTRE_NOM);
                this.columnFORMER_LAND_SIZE = new System.Data.DataColumn("FORMER_LAND_SIZE", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORMER_LAND_SIZE);
                this.columnformer_owner = new System.Data.DataColumn("former_owner", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnformer_owner);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_FORMER_OWNER}, true));
                this.columnID_FORMER_OWNER.AutoIncrement = true;
                this.columnID_FORMER_OWNER.AllowDBNull = false;
                this.columnID_FORMER_OWNER.Unique = true;
                this.columnNOM.AllowDBNull = false;
                this.columnNOM.MaxLength = 50;
                this.columnPRENOM.MaxLength = 50;
                this.columnAUTRE_NOM.MaxLength = 50;
                this.columnFORMER_LAND_SIZE.AllowDBNull = false;
                this.columnformer_owner.ReadOnly = true;
                this.columnformer_owner.MaxLength = 154;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORMER_OWNERSRow NewFORMER_OWNERSRow() {
                return ((FORMER_OWNERSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FORMER_OWNERSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FORMER_OWNERSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FORMER_OWNERSRowChanged != null)) {
                    this.FORMER_OWNERSRowChanged(this, new FORMER_OWNERSRowChangeEvent(((FORMER_OWNERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FORMER_OWNERSRowChanging != null)) {
                    this.FORMER_OWNERSRowChanging(this, new FORMER_OWNERSRowChangeEvent(((FORMER_OWNERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FORMER_OWNERSRowDeleted != null)) {
                    this.FORMER_OWNERSRowDeleted(this, new FORMER_OWNERSRowChangeEvent(((FORMER_OWNERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FORMER_OWNERSRowDeleting != null)) {
                    this.FORMER_OWNERSRowDeleting(this, new FORMER_OWNERSRowChangeEvent(((FORMER_OWNERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFORMER_OWNERSRow(FORMER_OWNERSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FORMER_OWNERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Select_Max_NumRefDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmax_NumReference;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_Max_NumRefDataTable() {
                this.TableName = "Select_Max_NumRef";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Select_Max_NumRefDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Select_Max_NumRefDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn max_NumReferenceColumn {
                get {
                    return this.columnmax_NumReference;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_Max_NumRefRow this[int index] {
                get {
                    return ((Select_Max_NumRefRow)(this.Rows[index]));
                }
            }
            
            public event Select_Max_NumRefRowChangeEventHandler Select_Max_NumRefRowChanging;
            
            public event Select_Max_NumRefRowChangeEventHandler Select_Max_NumRefRowChanged;
            
            public event Select_Max_NumRefRowChangeEventHandler Select_Max_NumRefRowDeleting;
            
            public event Select_Max_NumRefRowChangeEventHandler Select_Max_NumRefRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelect_Max_NumRefRow(Select_Max_NumRefRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_Max_NumRefRow AddSelect_Max_NumRefRow(int max_NumReference) {
                Select_Max_NumRefRow rowSelect_Max_NumRefRow = ((Select_Max_NumRefRow)(this.NewRow()));
                rowSelect_Max_NumRefRow.ItemArray = new object[] {
                        max_NumReference};
                this.Rows.Add(rowSelect_Max_NumRefRow);
                return rowSelect_Max_NumRefRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Select_Max_NumRefDataTable cln = ((Select_Max_NumRefDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Select_Max_NumRefDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmax_NumReference = base.Columns["max_NumReference"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmax_NumReference = new System.Data.DataColumn("max_NumReference", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmax_NumReference);
                this.columnmax_NumReference.ReadOnly = true;
                this.columnmax_NumReference.DefaultValue = ((int)(0));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_Max_NumRefRow NewSelect_Max_NumRefRow() {
                return ((Select_Max_NumRefRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Select_Max_NumRefRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Select_Max_NumRefRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Select_Max_NumRefRowChanged != null)) {
                    this.Select_Max_NumRefRowChanged(this, new Select_Max_NumRefRowChangeEvent(((Select_Max_NumRefRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Select_Max_NumRefRowChanging != null)) {
                    this.Select_Max_NumRefRowChanging(this, new Select_Max_NumRefRowChangeEvent(((Select_Max_NumRefRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Select_Max_NumRefRowDeleted != null)) {
                    this.Select_Max_NumRefRowDeleted(this, new Select_Max_NumRefRowChangeEvent(((Select_Max_NumRefRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Select_Max_NumRefRowDeleting != null)) {
                    this.Select_Max_NumRefRowDeleting(this, new Select_Max_NumRefRowChangeEvent(((Select_Max_NumRefRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelect_Max_NumRefRow(Select_Max_NumRefRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Select_Max_NumRefDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LAND_OWNERDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumReference;
            
            private System.Data.DataColumn columnNoIDENTITE;
            
            private System.Data.DataColumn columnNOM;
            
            private System.Data.DataColumn columnPRENOM;
            
            private System.Data.DataColumn columnAUTRE_NOM;
            
            private System.Data.DataColumn columnPROVINCEID;
            
            private System.Data.DataColumn columnDISTRICTID;
            
            private System.Data.DataColumn columnSECTORID;
            
            private System.Data.DataColumn columnCELLULEID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_OWNERDataTable() {
                this.TableName = "LAND_OWNER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LAND_OWNERDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LAND_OWNERDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumReferenceColumn {
                get {
                    return this.columnNumReference;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoIDENTITEColumn {
                get {
                    return this.columnNoIDENTITE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOMColumn {
                get {
                    return this.columnNOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRENOMColumn {
                get {
                    return this.columnPRENOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AUTRE_NOMColumn {
                get {
                    return this.columnAUTRE_NOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PROVINCEIDColumn {
                get {
                    return this.columnPROVINCEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DISTRICTIDColumn {
                get {
                    return this.columnDISTRICTID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SECTORIDColumn {
                get {
                    return this.columnSECTORID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CELLULEIDColumn {
                get {
                    return this.columnCELLULEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_OWNERRow this[int index] {
                get {
                    return ((LAND_OWNERRow)(this.Rows[index]));
                }
            }
            
            public event LAND_OWNERRowChangeEventHandler LAND_OWNERRowChanging;
            
            public event LAND_OWNERRowChangeEventHandler LAND_OWNERRowChanged;
            
            public event LAND_OWNERRowChangeEventHandler LAND_OWNERRowDeleting;
            
            public event LAND_OWNERRowChangeEventHandler LAND_OWNERRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLAND_OWNERRow(LAND_OWNERRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_OWNERRow AddLAND_OWNERRow(string NoIDENTITE, string NOM, string PRENOM, string AUTRE_NOM, int PROVINCEID, int DISTRICTID, int SECTORID, int CELLULEID) {
                LAND_OWNERRow rowLAND_OWNERRow = ((LAND_OWNERRow)(this.NewRow()));
                rowLAND_OWNERRow.ItemArray = new object[] {
                        null,
                        NoIDENTITE,
                        NOM,
                        PRENOM,
                        AUTRE_NOM,
                        PROVINCEID,
                        DISTRICTID,
                        SECTORID,
                        CELLULEID};
                this.Rows.Add(rowLAND_OWNERRow);
                return rowLAND_OWNERRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_OWNERRow FindByNumReference(int NumReference) {
                return ((LAND_OWNERRow)(this.Rows.Find(new object[] {
                            NumReference})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LAND_OWNERDataTable cln = ((LAND_OWNERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LAND_OWNERDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumReference = base.Columns["NumReference"];
                this.columnNoIDENTITE = base.Columns["NoIDENTITE"];
                this.columnNOM = base.Columns["NOM"];
                this.columnPRENOM = base.Columns["PRENOM"];
                this.columnAUTRE_NOM = base.Columns["AUTRE_NOM"];
                this.columnPROVINCEID = base.Columns["PROVINCEID"];
                this.columnDISTRICTID = base.Columns["DISTRICTID"];
                this.columnSECTORID = base.Columns["SECTORID"];
                this.columnCELLULEID = base.Columns["CELLULEID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumReference = new System.Data.DataColumn("NumReference", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumReference);
                this.columnNoIDENTITE = new System.Data.DataColumn("NoIDENTITE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoIDENTITE);
                this.columnNOM = new System.Data.DataColumn("NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM);
                this.columnPRENOM = new System.Data.DataColumn("PRENOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRENOM);
                this.columnAUTRE_NOM = new System.Data.DataColumn("AUTRE_NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTRE_NOM);
                this.columnPROVINCEID = new System.Data.DataColumn("PROVINCEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROVINCEID);
                this.columnDISTRICTID = new System.Data.DataColumn("DISTRICTID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTRICTID);
                this.columnSECTORID = new System.Data.DataColumn("SECTORID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSECTORID);
                this.columnCELLULEID = new System.Data.DataColumn("CELLULEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCELLULEID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnNumReference}, true));
                this.columnNumReference.AutoIncrement = true;
                this.columnNumReference.AllowDBNull = false;
                this.columnNumReference.ReadOnly = true;
                this.columnNumReference.Unique = true;
                this.columnNoIDENTITE.AllowDBNull = false;
                this.columnNoIDENTITE.MaxLength = 20;
                this.columnNOM.AllowDBNull = false;
                this.columnNOM.MaxLength = 50;
                this.columnPRENOM.MaxLength = 50;
                this.columnAUTRE_NOM.MaxLength = 50;
                this.columnPROVINCEID.AllowDBNull = false;
                this.columnDISTRICTID.AllowDBNull = false;
                this.columnSECTORID.AllowDBNull = false;
                this.columnCELLULEID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_OWNERRow NewLAND_OWNERRow() {
                return ((LAND_OWNERRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LAND_OWNERRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LAND_OWNERRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LAND_OWNERRowChanged != null)) {
                    this.LAND_OWNERRowChanged(this, new LAND_OWNERRowChangeEvent(((LAND_OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LAND_OWNERRowChanging != null)) {
                    this.LAND_OWNERRowChanging(this, new LAND_OWNERRowChangeEvent(((LAND_OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LAND_OWNERRowDeleted != null)) {
                    this.LAND_OWNERRowDeleted(this, new LAND_OWNERRowChangeEvent(((LAND_OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LAND_OWNERRowDeleting != null)) {
                    this.LAND_OWNERRowDeleting(this, new LAND_OWNERRowChangeEvent(((LAND_OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLAND_OWNERRow(LAND_OWNERRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LAND_OWNERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SelectAllInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnom;
            
            private System.Data.DataColumn columnprenom;
            
            private System.Data.DataColumn columnautre_nom;
            
            private System.Data.DataColumn columnProvinceOwner;
            
            private System.Data.DataColumn columnDistrictOwner;
            
            private System.Data.DataColumn columnsectorOwner;
            
            private System.Data.DataColumn columncelluleOwner;
            
            private System.Data.DataColumn columnProvinceLand;
            
            private System.Data.DataColumn columnDistrictLand;
            
            private System.Data.DataColumn columnSectorLand;
            
            private System.Data.DataColumn columnCelluleLand;
            
            private System.Data.DataColumn columnUsage;
            
            private System.Data.DataColumn columnLandSize;
            
            private System.Data.DataColumn columnFormerOwnerName;
            
            private System.Data.DataColumn columnSupervisorName;
            
            private System.Data.DataColumn columnnoidentite;
            
            private System.Data.DataColumn columnnumreference;
            
            private System.Data.DataColumn columnColumn1;
            
            private System.Data.DataColumn columnColumn2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectAllInfoDataTable() {
                this.TableName = "SelectAllInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectAllInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SelectAllInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nomColumn {
                get {
                    return this.columnnom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prenomColumn {
                get {
                    return this.columnprenom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn autre_nomColumn {
                get {
                    return this.columnautre_nom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProvinceOwnerColumn {
                get {
                    return this.columnProvinceOwner;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistrictOwnerColumn {
                get {
                    return this.columnDistrictOwner;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sectorOwnerColumn {
                get {
                    return this.columnsectorOwner;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn celluleOwnerColumn {
                get {
                    return this.columncelluleOwner;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProvinceLandColumn {
                get {
                    return this.columnProvinceLand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistrictLandColumn {
                get {
                    return this.columnDistrictLand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SectorLandColumn {
                get {
                    return this.columnSectorLand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CelluleLandColumn {
                get {
                    return this.columnCelluleLand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UsageColumn {
                get {
                    return this.columnUsage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LandSizeColumn {
                get {
                    return this.columnLandSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FormerOwnerNameColumn {
                get {
                    return this.columnFormerOwnerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SupervisorNameColumn {
                get {
                    return this.columnSupervisorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn noidentiteColumn {
                get {
                    return this.columnnoidentite;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numreferenceColumn {
                get {
                    return this.columnnumreference;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Column1Column {
                get {
                    return this.columnColumn1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Column2Column {
                get {
                    return this.columnColumn2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectAllInfoRow this[int index] {
                get {
                    return ((SelectAllInfoRow)(this.Rows[index]));
                }
            }
            
            public event SelectAllInfoRowChangeEventHandler SelectAllInfoRowChanging;
            
            public event SelectAllInfoRowChangeEventHandler SelectAllInfoRowChanged;
            
            public event SelectAllInfoRowChangeEventHandler SelectAllInfoRowDeleting;
            
            public event SelectAllInfoRowChangeEventHandler SelectAllInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelectAllInfoRow(SelectAllInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectAllInfoRow AddSelectAllInfoRow(
                        string nom, 
                        string prenom, 
                        string autre_nom, 
                        string ProvinceOwner, 
                        string DistrictOwner, 
                        string sectorOwner, 
                        string celluleOwner, 
                        string ProvinceLand, 
                        string DistrictLand, 
                        string SectorLand, 
                        string CelluleLand, 
                        string Usage, 
                        double LandSize, 
                        string FormerOwnerName, 
                        string SupervisorName, 
                        string noidentite, 
                        System.DateTime Column1, 
                        string Column2) {
                SelectAllInfoRow rowSelectAllInfoRow = ((SelectAllInfoRow)(this.NewRow()));
                rowSelectAllInfoRow.ItemArray = new object[] {
                        nom,
                        prenom,
                        autre_nom,
                        ProvinceOwner,
                        DistrictOwner,
                        sectorOwner,
                        celluleOwner,
                        ProvinceLand,
                        DistrictLand,
                        SectorLand,
                        CelluleLand,
                        Usage,
                        LandSize,
                        FormerOwnerName,
                        SupervisorName,
                        noidentite,
                        null,
                        Column1,
                        Column2};
                this.Rows.Add(rowSelectAllInfoRow);
                return rowSelectAllInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectAllInfoRow FindBynumreference(int numreference) {
                return ((SelectAllInfoRow)(this.Rows.Find(new object[] {
                            numreference})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SelectAllInfoDataTable cln = ((SelectAllInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SelectAllInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnom = base.Columns["nom"];
                this.columnprenom = base.Columns["prenom"];
                this.columnautre_nom = base.Columns["autre_nom"];
                this.columnProvinceOwner = base.Columns["ProvinceOwner"];
                this.columnDistrictOwner = base.Columns["DistrictOwner"];
                this.columnsectorOwner = base.Columns["sectorOwner"];
                this.columncelluleOwner = base.Columns["celluleOwner"];
                this.columnProvinceLand = base.Columns["ProvinceLand"];
                this.columnDistrictLand = base.Columns["DistrictLand"];
                this.columnSectorLand = base.Columns["SectorLand"];
                this.columnCelluleLand = base.Columns["CelluleLand"];
                this.columnUsage = base.Columns["Usage"];
                this.columnLandSize = base.Columns["LandSize"];
                this.columnFormerOwnerName = base.Columns["FormerOwnerName"];
                this.columnSupervisorName = base.Columns["SupervisorName"];
                this.columnnoidentite = base.Columns["noidentite"];
                this.columnnumreference = base.Columns["numreference"];
                this.columnColumn1 = base.Columns["Column1"];
                this.columnColumn2 = base.Columns["Column2"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnom = new System.Data.DataColumn("nom", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnom);
                this.columnprenom = new System.Data.DataColumn("prenom", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprenom);
                this.columnautre_nom = new System.Data.DataColumn("autre_nom", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnautre_nom);
                this.columnProvinceOwner = new System.Data.DataColumn("ProvinceOwner", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvinceOwner);
                this.columnDistrictOwner = new System.Data.DataColumn("DistrictOwner", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictOwner);
                this.columnsectorOwner = new System.Data.DataColumn("sectorOwner", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsectorOwner);
                this.columncelluleOwner = new System.Data.DataColumn("celluleOwner", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncelluleOwner);
                this.columnProvinceLand = new System.Data.DataColumn("ProvinceLand", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvinceLand);
                this.columnDistrictLand = new System.Data.DataColumn("DistrictLand", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictLand);
                this.columnSectorLand = new System.Data.DataColumn("SectorLand", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectorLand);
                this.columnCelluleLand = new System.Data.DataColumn("CelluleLand", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCelluleLand);
                this.columnUsage = new System.Data.DataColumn("Usage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsage);
                this.columnLandSize = new System.Data.DataColumn("LandSize", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandSize);
                this.columnFormerOwnerName = new System.Data.DataColumn("FormerOwnerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormerOwnerName);
                this.columnSupervisorName = new System.Data.DataColumn("SupervisorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupervisorName);
                this.columnnoidentite = new System.Data.DataColumn("noidentite", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnoidentite);
                this.columnnumreference = new System.Data.DataColumn("numreference", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumreference);
                this.columnColumn1 = new System.Data.DataColumn("Column1", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn1);
                this.columnColumn2 = new System.Data.DataColumn("Column2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn2);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnnumreference}, true));
                this.columnnom.AllowDBNull = false;
                this.columnnom.MaxLength = 50;
                this.columnprenom.MaxLength = 50;
                this.columnautre_nom.MaxLength = 50;
                this.columnProvinceOwner.ReadOnly = true;
                this.columnProvinceOwner.MaxLength = 20;
                this.columnDistrictOwner.ReadOnly = true;
                this.columnDistrictOwner.MaxLength = 20;
                this.columnsectorOwner.ReadOnly = true;
                this.columnsectorOwner.MaxLength = 50;
                this.columncelluleOwner.ReadOnly = true;
                this.columncelluleOwner.MaxLength = 50;
                this.columnProvinceLand.ReadOnly = true;
                this.columnProvinceLand.MaxLength = 20;
                this.columnDistrictLand.ReadOnly = true;
                this.columnDistrictLand.MaxLength = 20;
                this.columnSectorLand.ReadOnly = true;
                this.columnSectorLand.MaxLength = 50;
                this.columnCelluleLand.ReadOnly = true;
                this.columnCelluleLand.MaxLength = 50;
                this.columnUsage.ReadOnly = true;
                this.columnUsage.MaxLength = 50;
                this.columnLandSize.ReadOnly = true;
                this.columnFormerOwnerName.ReadOnly = true;
                this.columnFormerOwnerName.MaxLength = 152;
                this.columnSupervisorName.ReadOnly = true;
                this.columnSupervisorName.MaxLength = 152;
                this.columnnoidentite.AllowDBNull = false;
                this.columnnoidentite.MaxLength = 20;
                this.columnnumreference.AutoIncrement = true;
                this.columnnumreference.AllowDBNull = false;
                this.columnnumreference.ReadOnly = true;
                this.columnnumreference.Unique = true;
                this.columnColumn1.ReadOnly = true;
                this.columnColumn2.ReadOnly = true;
                this.columnColumn2.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectAllInfoRow NewSelectAllInfoRow() {
                return ((SelectAllInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SelectAllInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SelectAllInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectAllInfoRowChanged != null)) {
                    this.SelectAllInfoRowChanged(this, new SelectAllInfoRowChangeEvent(((SelectAllInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectAllInfoRowChanging != null)) {
                    this.SelectAllInfoRowChanging(this, new SelectAllInfoRowChangeEvent(((SelectAllInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectAllInfoRowDeleted != null)) {
                    this.SelectAllInfoRowDeleted(this, new SelectAllInfoRowChangeEvent(((SelectAllInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectAllInfoRowDeleting != null)) {
                    this.SelectAllInfoRowDeleting(this, new SelectAllInfoRowChangeEvent(((SelectAllInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelectAllInfoRow(SelectAllInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SelectAllInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FindByNameDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlandno;
            
            private System.Data.DataColumn columnfullname;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindByNameDataTable() {
                this.TableName = "FindByName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FindByNameDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FindByNameDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn landnoColumn {
                get {
                    return this.columnlandno;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fullnameColumn {
                get {
                    return this.columnfullname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindByNameRow this[int index] {
                get {
                    return ((FindByNameRow)(this.Rows[index]));
                }
            }
            
            public event FindByNameRowChangeEventHandler FindByNameRowChanging;
            
            public event FindByNameRowChangeEventHandler FindByNameRowChanged;
            
            public event FindByNameRowChangeEventHandler FindByNameRowDeleting;
            
            public event FindByNameRowChangeEventHandler FindByNameRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFindByNameRow(FindByNameRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindByNameRow AddFindByNameRow(string landno, string fullname) {
                FindByNameRow rowFindByNameRow = ((FindByNameRow)(this.NewRow()));
                rowFindByNameRow.ItemArray = new object[] {
                        landno,
                        fullname};
                this.Rows.Add(rowFindByNameRow);
                return rowFindByNameRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FindByNameDataTable cln = ((FindByNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FindByNameDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlandno = base.Columns["landno"];
                this.columnfullname = base.Columns["fullname"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlandno = new System.Data.DataColumn("landno", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlandno);
                this.columnfullname = new System.Data.DataColumn("fullname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfullname);
                this.columnlandno.AllowDBNull = false;
                this.columnlandno.MaxLength = 50;
                this.columnfullname.AllowDBNull = false;
                this.columnfullname.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindByNameRow NewFindByNameRow() {
                return ((FindByNameRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FindByNameRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FindByNameRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FindByNameRowChanged != null)) {
                    this.FindByNameRowChanged(this, new FindByNameRowChangeEvent(((FindByNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FindByNameRowChanging != null)) {
                    this.FindByNameRowChanging(this, new FindByNameRowChangeEvent(((FindByNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FindByNameRowDeleted != null)) {
                    this.FindByNameRowDeleted(this, new FindByNameRowChangeEvent(((FindByNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FindByNameRowDeleting != null)) {
                    this.FindByNameRowDeleting(this, new FindByNameRowChangeEvent(((FindByNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFindByNameRow(FindByNameRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FindByNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnCheckedLandDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLAND_No;
            
            private System.Data.DataColumn columnNumReference;
            
            private System.Data.DataColumn columnChecked;
            
            private System.Data.DataColumn columnbyWho;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnCheckedLandDataTable() {
                this.TableName = "UnCheckedLand";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnCheckedLandDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnCheckedLandDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_NoColumn {
                get {
                    return this.columnLAND_No;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumReferenceColumn {
                get {
                    return this.columnNumReference;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckedColumn {
                get {
                    return this.columnChecked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn byWhoColumn {
                get {
                    return this.columnbyWho;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnCheckedLandRow this[int index] {
                get {
                    return ((UnCheckedLandRow)(this.Rows[index]));
                }
            }
            
            public event UnCheckedLandRowChangeEventHandler UnCheckedLandRowChanging;
            
            public event UnCheckedLandRowChangeEventHandler UnCheckedLandRowChanged;
            
            public event UnCheckedLandRowChangeEventHandler UnCheckedLandRowDeleting;
            
            public event UnCheckedLandRowChangeEventHandler UnCheckedLandRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnCheckedLandRow(UnCheckedLandRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnCheckedLandRow AddUnCheckedLandRow(string LAND_No, int NumReference, int Checked, int byWho) {
                UnCheckedLandRow rowUnCheckedLandRow = ((UnCheckedLandRow)(this.NewRow()));
                rowUnCheckedLandRow.ItemArray = new object[] {
                        LAND_No,
                        NumReference,
                        Checked,
                        byWho};
                this.Rows.Add(rowUnCheckedLandRow);
                return rowUnCheckedLandRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnCheckedLandRow FindByLAND_No(string LAND_No) {
                return ((UnCheckedLandRow)(this.Rows.Find(new object[] {
                            LAND_No})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UnCheckedLandDataTable cln = ((UnCheckedLandDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UnCheckedLandDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLAND_No = base.Columns["LAND_No"];
                this.columnNumReference = base.Columns["NumReference"];
                this.columnChecked = base.Columns["Checked"];
                this.columnbyWho = base.Columns["byWho"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLAND_No = new System.Data.DataColumn("LAND_No", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_No);
                this.columnNumReference = new System.Data.DataColumn("NumReference", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumReference);
                this.columnChecked = new System.Data.DataColumn("Checked", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecked);
                this.columnbyWho = new System.Data.DataColumn("byWho", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbyWho);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLAND_No}, true));
                this.columnLAND_No.AllowDBNull = false;
                this.columnLAND_No.Unique = true;
                this.columnLAND_No.MaxLength = 50;
                this.columnNumReference.AllowDBNull = false;
                this.columnChecked.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnCheckedLandRow NewUnCheckedLandRow() {
                return ((UnCheckedLandRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UnCheckedLandRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UnCheckedLandRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnCheckedLandRowChanged != null)) {
                    this.UnCheckedLandRowChanged(this, new UnCheckedLandRowChangeEvent(((UnCheckedLandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnCheckedLandRowChanging != null)) {
                    this.UnCheckedLandRowChanging(this, new UnCheckedLandRowChangeEvent(((UnCheckedLandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnCheckedLandRowDeleted != null)) {
                    this.UnCheckedLandRowDeleted(this, new UnCheckedLandRowChangeEvent(((UnCheckedLandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnCheckedLandRowDeleting != null)) {
                    this.UnCheckedLandRowDeleting(this, new UnCheckedLandRowChangeEvent(((UnCheckedLandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnCheckedLandRow(UnCheckedLandRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnCheckedLandDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SelectUserInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnsurname;
            
            private System.Data.DataColumn columnColumn1;
            
            private System.Data.DataColumn columnColumn2;
            
            private System.Data.DataColumn columndate1;
            
            private System.Data.DataColumn columnColumn3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectUserInfoDataTable() {
                this.TableName = "SelectUserInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectUserInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SelectUserInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn surnameColumn {
                get {
                    return this.columnsurname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Column1Column {
                get {
                    return this.columnColumn1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Column2Column {
                get {
                    return this.columnColumn2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date1Column {
                get {
                    return this.columndate1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Column3Column {
                get {
                    return this.columnColumn3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectUserInfoRow this[int index] {
                get {
                    return ((SelectUserInfoRow)(this.Rows[index]));
                }
            }
            
            public event SelectUserInfoRowChangeEventHandler SelectUserInfoRowChanging;
            
            public event SelectUserInfoRowChangeEventHandler SelectUserInfoRowChanged;
            
            public event SelectUserInfoRowChangeEventHandler SelectUserInfoRowDeleting;
            
            public event SelectUserInfoRowChangeEventHandler SelectUserInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelectUserInfoRow(SelectUserInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectUserInfoRow AddSelectUserInfoRow(string name, string surname, System.DateTime Column1, System.DateTime Column2, System.DateTime date1, string Column3) {
                SelectUserInfoRow rowSelectUserInfoRow = ((SelectUserInfoRow)(this.NewRow()));
                rowSelectUserInfoRow.ItemArray = new object[] {
                        name,
                        surname,
                        Column1,
                        Column2,
                        date1,
                        Column3};
                this.Rows.Add(rowSelectUserInfoRow);
                return rowSelectUserInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SelectUserInfoDataTable cln = ((SelectUserInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SelectUserInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnsurname = base.Columns["surname"];
                this.columnColumn1 = base.Columns["Column1"];
                this.columnColumn2 = base.Columns["Column2"];
                this.columndate1 = base.Columns["date1"];
                this.columnColumn3 = base.Columns["Column3"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnsurname = new System.Data.DataColumn("surname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurname);
                this.columnColumn1 = new System.Data.DataColumn("Column1", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn1);
                this.columnColumn2 = new System.Data.DataColumn("Column2", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn2);
                this.columndate1 = new System.Data.DataColumn("date1", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate1);
                this.columnColumn3 = new System.Data.DataColumn("Column3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn3);
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
                this.columnsurname.MaxLength = 50;
                this.columnColumn1.ReadOnly = true;
                this.columnColumn2.ReadOnly = true;
                this.columndate1.AllowDBNull = false;
                this.columndate1.Caption = "date";
                this.columnColumn3.ReadOnly = true;
                this.columnColumn3.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectUserInfoRow NewSelectUserInfoRow() {
                return ((SelectUserInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SelectUserInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SelectUserInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectUserInfoRowChanged != null)) {
                    this.SelectUserInfoRowChanged(this, new SelectUserInfoRowChangeEvent(((SelectUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectUserInfoRowChanging != null)) {
                    this.SelectUserInfoRowChanging(this, new SelectUserInfoRowChangeEvent(((SelectUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectUserInfoRowDeleted != null)) {
                    this.SelectUserInfoRowDeleted(this, new SelectUserInfoRowChangeEvent(((SelectUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectUserInfoRowDeleting != null)) {
                    this.SelectUserInfoRowDeleting(this, new SelectUserInfoRowChangeEvent(((SelectUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelectUserInfoRow(SelectUserInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SelectUserInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistinctDistrictDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDISTRICT;
            
            private System.Data.DataColumn columnDESCRIPTION_DISTRICT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctDistrictDataTable() {
                this.TableName = "DistinctDistrict";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctDistrictDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistinctDistrictDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DISTRICTColumn {
                get {
                    return this.columnDISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_DISTRICTColumn {
                get {
                    return this.columnDESCRIPTION_DISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctDistrictRow this[int index] {
                get {
                    return ((DistinctDistrictRow)(this.Rows[index]));
                }
            }
            
            public event DistinctDistrictRowChangeEventHandler DistinctDistrictRowChanging;
            
            public event DistinctDistrictRowChangeEventHandler DistinctDistrictRowChanged;
            
            public event DistinctDistrictRowChangeEventHandler DistinctDistrictRowDeleting;
            
            public event DistinctDistrictRowChangeEventHandler DistinctDistrictRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistinctDistrictRow(DistinctDistrictRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctDistrictRow AddDistinctDistrictRow(int DISTRICT, string DESCRIPTION_DISTRICT) {
                DistinctDistrictRow rowDistinctDistrictRow = ((DistinctDistrictRow)(this.NewRow()));
                rowDistinctDistrictRow.ItemArray = new object[] {
                        DISTRICT,
                        DESCRIPTION_DISTRICT};
                this.Rows.Add(rowDistinctDistrictRow);
                return rowDistinctDistrictRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DistinctDistrictDataTable cln = ((DistinctDistrictDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DistinctDistrictDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDISTRICT = base.Columns["DISTRICT"];
                this.columnDESCRIPTION_DISTRICT = base.Columns["DESCRIPTION_DISTRICT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDISTRICT = new System.Data.DataColumn("DISTRICT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTRICT);
                this.columnDESCRIPTION_DISTRICT = new System.Data.DataColumn("DESCRIPTION_DISTRICT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_DISTRICT);
                this.columnDISTRICT.AllowDBNull = false;
                this.columnDESCRIPTION_DISTRICT.AllowDBNull = false;
                this.columnDESCRIPTION_DISTRICT.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctDistrictRow NewDistinctDistrictRow() {
                return ((DistinctDistrictRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DistinctDistrictRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DistinctDistrictRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistinctDistrictRowChanged != null)) {
                    this.DistinctDistrictRowChanged(this, new DistinctDistrictRowChangeEvent(((DistinctDistrictRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistinctDistrictRowChanging != null)) {
                    this.DistinctDistrictRowChanging(this, new DistinctDistrictRowChangeEvent(((DistinctDistrictRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistinctDistrictRowDeleted != null)) {
                    this.DistinctDistrictRowDeleted(this, new DistinctDistrictRowChangeEvent(((DistinctDistrictRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistinctDistrictRowDeleting != null)) {
                    this.DistinctDistrictRowDeleting(this, new DistinctDistrictRowChangeEvent(((DistinctDistrictRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistinctDistrictRow(DistinctDistrictRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistinctDistrictDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistinctSectorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSECTOR;
            
            private System.Data.DataColumn columnDESCRIPTION_SECTEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctSectorDataTable() {
                this.TableName = "DistinctSector";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctSectorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistinctSectorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SECTORColumn {
                get {
                    return this.columnSECTOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_SECTEURColumn {
                get {
                    return this.columnDESCRIPTION_SECTEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctSectorRow this[int index] {
                get {
                    return ((DistinctSectorRow)(this.Rows[index]));
                }
            }
            
            public event DistinctSectorRowChangeEventHandler DistinctSectorRowChanging;
            
            public event DistinctSectorRowChangeEventHandler DistinctSectorRowChanged;
            
            public event DistinctSectorRowChangeEventHandler DistinctSectorRowDeleting;
            
            public event DistinctSectorRowChangeEventHandler DistinctSectorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistinctSectorRow(DistinctSectorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctSectorRow AddDistinctSectorRow(int SECTOR, string DESCRIPTION_SECTEUR) {
                DistinctSectorRow rowDistinctSectorRow = ((DistinctSectorRow)(this.NewRow()));
                rowDistinctSectorRow.ItemArray = new object[] {
                        SECTOR,
                        DESCRIPTION_SECTEUR};
                this.Rows.Add(rowDistinctSectorRow);
                return rowDistinctSectorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DistinctSectorDataTable cln = ((DistinctSectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DistinctSectorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSECTOR = base.Columns["SECTOR"];
                this.columnDESCRIPTION_SECTEUR = base.Columns["DESCRIPTION_SECTEUR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSECTOR = new System.Data.DataColumn("SECTOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSECTOR);
                this.columnDESCRIPTION_SECTEUR = new System.Data.DataColumn("DESCRIPTION_SECTEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_SECTEUR);
                this.columnSECTOR.AllowDBNull = false;
                this.columnDESCRIPTION_SECTEUR.AllowDBNull = false;
                this.columnDESCRIPTION_SECTEUR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctSectorRow NewDistinctSectorRow() {
                return ((DistinctSectorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DistinctSectorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DistinctSectorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistinctSectorRowChanged != null)) {
                    this.DistinctSectorRowChanged(this, new DistinctSectorRowChangeEvent(((DistinctSectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistinctSectorRowChanging != null)) {
                    this.DistinctSectorRowChanging(this, new DistinctSectorRowChangeEvent(((DistinctSectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistinctSectorRowDeleted != null)) {
                    this.DistinctSectorRowDeleted(this, new DistinctSectorRowChangeEvent(((DistinctSectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistinctSectorRowDeleting != null)) {
                    this.DistinctSectorRowDeleting(this, new DistinctSectorRowChangeEvent(((DistinctSectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistinctSectorRow(DistinctSectorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistinctSectorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SelectFormerOwnerDistributionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLAND_No;
            
            private System.Data.DataColumn columnfullname;
            
            private System.Data.DataColumn columnFORMER_OWNER;
            
            private System.Data.DataColumn columnLAND_SIZE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDistributionDataTable() {
                this.TableName = "SelectFormerOwnerDistribution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectFormerOwnerDistributionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SelectFormerOwnerDistributionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_NoColumn {
                get {
                    return this.columnLAND_No;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fullnameColumn {
                get {
                    return this.columnfullname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FORMER_OWNERColumn {
                get {
                    return this.columnFORMER_OWNER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAND_SIZEColumn {
                get {
                    return this.columnLAND_SIZE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDistributionRow this[int index] {
                get {
                    return ((SelectFormerOwnerDistributionRow)(this.Rows[index]));
                }
            }
            
            public event SelectFormerOwnerDistributionRowChangeEventHandler SelectFormerOwnerDistributionRowChanging;
            
            public event SelectFormerOwnerDistributionRowChangeEventHandler SelectFormerOwnerDistributionRowChanged;
            
            public event SelectFormerOwnerDistributionRowChangeEventHandler SelectFormerOwnerDistributionRowDeleting;
            
            public event SelectFormerOwnerDistributionRowChangeEventHandler SelectFormerOwnerDistributionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelectFormerOwnerDistributionRow(SelectFormerOwnerDistributionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDistributionRow AddSelectFormerOwnerDistributionRow(string LAND_No, string fullname, int FORMER_OWNER, double LAND_SIZE) {
                SelectFormerOwnerDistributionRow rowSelectFormerOwnerDistributionRow = ((SelectFormerOwnerDistributionRow)(this.NewRow()));
                rowSelectFormerOwnerDistributionRow.ItemArray = new object[] {
                        LAND_No,
                        fullname,
                        FORMER_OWNER,
                        LAND_SIZE};
                this.Rows.Add(rowSelectFormerOwnerDistributionRow);
                return rowSelectFormerOwnerDistributionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDistributionRow FindByLAND_No(string LAND_No) {
                return ((SelectFormerOwnerDistributionRow)(this.Rows.Find(new object[] {
                            LAND_No})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SelectFormerOwnerDistributionDataTable cln = ((SelectFormerOwnerDistributionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SelectFormerOwnerDistributionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLAND_No = base.Columns["LAND_No"];
                this.columnfullname = base.Columns["fullname"];
                this.columnFORMER_OWNER = base.Columns["FORMER_OWNER"];
                this.columnLAND_SIZE = base.Columns["LAND_SIZE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLAND_No = new System.Data.DataColumn("LAND_No", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_No);
                this.columnfullname = new System.Data.DataColumn("fullname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfullname);
                this.columnFORMER_OWNER = new System.Data.DataColumn("FORMER_OWNER", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORMER_OWNER);
                this.columnLAND_SIZE = new System.Data.DataColumn("LAND_SIZE", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAND_SIZE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLAND_No}, true));
                this.columnLAND_No.AllowDBNull = false;
                this.columnLAND_No.Unique = true;
                this.columnLAND_No.MaxLength = 50;
                this.columnfullname.ReadOnly = true;
                this.columnfullname.MaxLength = 152;
                this.columnFORMER_OWNER.AllowDBNull = false;
                this.columnLAND_SIZE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDistributionRow NewSelectFormerOwnerDistributionRow() {
                return ((SelectFormerOwnerDistributionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SelectFormerOwnerDistributionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SelectFormerOwnerDistributionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectFormerOwnerDistributionRowChanged != null)) {
                    this.SelectFormerOwnerDistributionRowChanged(this, new SelectFormerOwnerDistributionRowChangeEvent(((SelectFormerOwnerDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectFormerOwnerDistributionRowChanging != null)) {
                    this.SelectFormerOwnerDistributionRowChanging(this, new SelectFormerOwnerDistributionRowChangeEvent(((SelectFormerOwnerDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectFormerOwnerDistributionRowDeleted != null)) {
                    this.SelectFormerOwnerDistributionRowDeleted(this, new SelectFormerOwnerDistributionRowChangeEvent(((SelectFormerOwnerDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectFormerOwnerDistributionRowDeleting != null)) {
                    this.SelectFormerOwnerDistributionRowDeleting(this, new SelectFormerOwnerDistributionRowChangeEvent(((SelectFormerOwnerDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelectFormerOwnerDistributionRow(SelectFormerOwnerDistributionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SelectFormerOwnerDistributionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SelectFormerOwnerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnom;
            
            private System.Data.DataColumn columnColumn1;
            
            private System.Data.DataColumn columnformer_land_size;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDataTable() {
                this.TableName = "SelectFormerOwner";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectFormerOwnerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SelectFormerOwnerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nomColumn {
                get {
                    return this.columnnom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Column1Column {
                get {
                    return this.columnColumn1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn former_land_sizeColumn {
                get {
                    return this.columnformer_land_size;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerRow this[int index] {
                get {
                    return ((SelectFormerOwnerRow)(this.Rows[index]));
                }
            }
            
            public event SelectFormerOwnerRowChangeEventHandler SelectFormerOwnerRowChanging;
            
            public event SelectFormerOwnerRowChangeEventHandler SelectFormerOwnerRowChanged;
            
            public event SelectFormerOwnerRowChangeEventHandler SelectFormerOwnerRowDeleting;
            
            public event SelectFormerOwnerRowChangeEventHandler SelectFormerOwnerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelectFormerOwnerRow(SelectFormerOwnerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerRow AddSelectFormerOwnerRow(string nom, string Column1, double former_land_size) {
                SelectFormerOwnerRow rowSelectFormerOwnerRow = ((SelectFormerOwnerRow)(this.NewRow()));
                rowSelectFormerOwnerRow.ItemArray = new object[] {
                        nom,
                        Column1,
                        former_land_size};
                this.Rows.Add(rowSelectFormerOwnerRow);
                return rowSelectFormerOwnerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SelectFormerOwnerDataTable cln = ((SelectFormerOwnerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SelectFormerOwnerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnom = base.Columns["nom"];
                this.columnColumn1 = base.Columns["Column1"];
                this.columnformer_land_size = base.Columns["former_land_size"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnom = new System.Data.DataColumn("nom", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnom);
                this.columnColumn1 = new System.Data.DataColumn("Column1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn1);
                this.columnformer_land_size = new System.Data.DataColumn("former_land_size", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnformer_land_size);
                this.columnnom.AllowDBNull = false;
                this.columnnom.MaxLength = 50;
                this.columnColumn1.ReadOnly = true;
                this.columnColumn1.MaxLength = 101;
                this.columnformer_land_size.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerRow NewSelectFormerOwnerRow() {
                return ((SelectFormerOwnerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SelectFormerOwnerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SelectFormerOwnerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectFormerOwnerRowChanged != null)) {
                    this.SelectFormerOwnerRowChanged(this, new SelectFormerOwnerRowChangeEvent(((SelectFormerOwnerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectFormerOwnerRowChanging != null)) {
                    this.SelectFormerOwnerRowChanging(this, new SelectFormerOwnerRowChangeEvent(((SelectFormerOwnerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectFormerOwnerRowDeleted != null)) {
                    this.SelectFormerOwnerRowDeleted(this, new SelectFormerOwnerRowChangeEvent(((SelectFormerOwnerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectFormerOwnerRowDeleting != null)) {
                    this.SelectFormerOwnerRowDeleting(this, new SelectFormerOwnerRowChangeEvent(((SelectFormerOwnerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelectFormerOwnerRow(SelectFormerOwnerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SelectFormerOwnerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SelectSuperVisorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNo_SUPERVISOR;
            
            private System.Data.DataColumn columnFullName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectSuperVisorDataTable() {
                this.TableName = "SelectSuperVisor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectSuperVisorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SelectSuperVisorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn No_SUPERVISORColumn {
                get {
                    return this.columnNo_SUPERVISOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectSuperVisorRow this[int index] {
                get {
                    return ((SelectSuperVisorRow)(this.Rows[index]));
                }
            }
            
            public event SelectSuperVisorRowChangeEventHandler SelectSuperVisorRowChanging;
            
            public event SelectSuperVisorRowChangeEventHandler SelectSuperVisorRowChanged;
            
            public event SelectSuperVisorRowChangeEventHandler SelectSuperVisorRowDeleting;
            
            public event SelectSuperVisorRowChangeEventHandler SelectSuperVisorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelectSuperVisorRow(SelectSuperVisorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectSuperVisorRow AddSelectSuperVisorRow(string FullName) {
                SelectSuperVisorRow rowSelectSuperVisorRow = ((SelectSuperVisorRow)(this.NewRow()));
                rowSelectSuperVisorRow.ItemArray = new object[] {
                        null,
                        FullName};
                this.Rows.Add(rowSelectSuperVisorRow);
                return rowSelectSuperVisorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectSuperVisorRow FindByNo_SUPERVISOR(int No_SUPERVISOR) {
                return ((SelectSuperVisorRow)(this.Rows.Find(new object[] {
                            No_SUPERVISOR})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SelectSuperVisorDataTable cln = ((SelectSuperVisorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SelectSuperVisorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNo_SUPERVISOR = base.Columns["No_SUPERVISOR"];
                this.columnFullName = base.Columns["FullName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNo_SUPERVISOR = new System.Data.DataColumn("No_SUPERVISOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo_SUPERVISOR);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnNo_SUPERVISOR}, true));
                this.columnNo_SUPERVISOR.AutoIncrement = true;
                this.columnNo_SUPERVISOR.AllowDBNull = false;
                this.columnNo_SUPERVISOR.ReadOnly = true;
                this.columnNo_SUPERVISOR.Unique = true;
                this.columnFullName.ReadOnly = true;
                this.columnFullName.MaxLength = 152;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectSuperVisorRow NewSelectSuperVisorRow() {
                return ((SelectSuperVisorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SelectSuperVisorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SelectSuperVisorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectSuperVisorRowChanged != null)) {
                    this.SelectSuperVisorRowChanged(this, new SelectSuperVisorRowChangeEvent(((SelectSuperVisorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectSuperVisorRowChanging != null)) {
                    this.SelectSuperVisorRowChanging(this, new SelectSuperVisorRowChangeEvent(((SelectSuperVisorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectSuperVisorRowDeleted != null)) {
                    this.SelectSuperVisorRowDeleted(this, new SelectSuperVisorRowChangeEvent(((SelectSuperVisorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectSuperVisorRowDeleting != null)) {
                    this.SelectSuperVisorRowDeleting(this, new SelectSuperVisorRowChangeEvent(((SelectSuperVisorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelectSuperVisorRow(SelectSuperVisorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SelectSuperVisorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CellsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCellID;
            
            private System.Data.DataColumn columnid_secteur;
            
            private System.Data.DataColumn columnCellName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsDataTable() {
                this.TableName = "Cells";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CellsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CellsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellIDColumn {
                get {
                    return this.columnCellID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn id_secteurColumn {
                get {
                    return this.columnid_secteur;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellNameColumn {
                get {
                    return this.columnCellName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow this[int index] {
                get {
                    return ((CellsRow)(this.Rows[index]));
                }
            }
            
            public event CellsRowChangeEventHandler CellsRowChanging;
            
            public event CellsRowChangeEventHandler CellsRowChanged;
            
            public event CellsRowChangeEventHandler CellsRowDeleting;
            
            public event CellsRowChangeEventHandler CellsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCellsRow(CellsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow AddCellsRow(short CellID, int id_secteur, string CellName) {
                CellsRow rowCellsRow = ((CellsRow)(this.NewRow()));
                rowCellsRow.ItemArray = new object[] {
                        CellID,
                        id_secteur,
                        CellName};
                this.Rows.Add(rowCellsRow);
                return rowCellsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow FindByCellID(short CellID) {
                return ((CellsRow)(this.Rows.Find(new object[] {
                            CellID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CellsDataTable cln = ((CellsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CellsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCellID = base.Columns["CellID"];
                this.columnid_secteur = base.Columns["id_secteur"];
                this.columnCellName = base.Columns["CellName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCellID = new System.Data.DataColumn("CellID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellID);
                this.columnid_secteur = new System.Data.DataColumn("id_secteur", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_secteur);
                this.columnCellName = new System.Data.DataColumn("CellName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCellID}, true));
                this.columnCellID.AllowDBNull = false;
                this.columnCellID.Unique = true;
                this.columnid_secteur.AllowDBNull = false;
                this.columnCellName.AllowDBNull = false;
                this.columnCellName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow NewCellsRow() {
                return ((CellsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CellsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CellsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CellsRowChanged != null)) {
                    this.CellsRowChanged(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CellsRowChanging != null)) {
                    this.CellsRowChanging(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CellsRowDeleted != null)) {
                    this.CellsRowDeleted(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CellsRowDeleting != null)) {
                    this.CellsRowDeleting(this, new CellsRowChangeEvent(((CellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCellsRow(CellsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CellsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DISTRICT_LandDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_DISTRICT;
            
            private System.Data.DataColumn columnID_PROVINCE;
            
            private System.Data.DataColumn columnDESCRIPTION_DISTRICT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICT_LandDataTable() {
                this.TableName = "DISTRICT_Land";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DISTRICT_LandDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DISTRICT_LandDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_DISTRICTColumn {
                get {
                    return this.columnID_DISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_PROVINCEColumn {
                get {
                    return this.columnID_PROVINCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_DISTRICTColumn {
                get {
                    return this.columnDESCRIPTION_DISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICT_LandRow this[int index] {
                get {
                    return ((DISTRICT_LandRow)(this.Rows[index]));
                }
            }
            
            public event DISTRICT_LandRowChangeEventHandler DISTRICT_LandRowChanging;
            
            public event DISTRICT_LandRowChangeEventHandler DISTRICT_LandRowChanged;
            
            public event DISTRICT_LandRowChangeEventHandler DISTRICT_LandRowDeleting;
            
            public event DISTRICT_LandRowChangeEventHandler DISTRICT_LandRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDISTRICT_LandRow(DISTRICT_LandRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICT_LandRow AddDISTRICT_LandRow(int ID_DISTRICT, int ID_PROVINCE, string DESCRIPTION_DISTRICT) {
                DISTRICT_LandRow rowDISTRICT_LandRow = ((DISTRICT_LandRow)(this.NewRow()));
                rowDISTRICT_LandRow.ItemArray = new object[] {
                        ID_DISTRICT,
                        ID_PROVINCE,
                        DESCRIPTION_DISTRICT};
                this.Rows.Add(rowDISTRICT_LandRow);
                return rowDISTRICT_LandRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICT_LandRow FindByID_DISTRICT(int ID_DISTRICT) {
                return ((DISTRICT_LandRow)(this.Rows.Find(new object[] {
                            ID_DISTRICT})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DISTRICT_LandDataTable cln = ((DISTRICT_LandDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DISTRICT_LandDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_DISTRICT = base.Columns["ID_DISTRICT"];
                this.columnID_PROVINCE = base.Columns["ID_PROVINCE"];
                this.columnDESCRIPTION_DISTRICT = base.Columns["DESCRIPTION_DISTRICT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_DISTRICT = new System.Data.DataColumn("ID_DISTRICT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DISTRICT);
                this.columnID_PROVINCE = new System.Data.DataColumn("ID_PROVINCE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PROVINCE);
                this.columnDESCRIPTION_DISTRICT = new System.Data.DataColumn("DESCRIPTION_DISTRICT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_DISTRICT);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_DISTRICT}, true));
                this.columnID_DISTRICT.AllowDBNull = false;
                this.columnID_DISTRICT.Unique = true;
                this.columnID_PROVINCE.AllowDBNull = false;
                this.columnDESCRIPTION_DISTRICT.AllowDBNull = false;
                this.columnDESCRIPTION_DISTRICT.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICT_LandRow NewDISTRICT_LandRow() {
                return ((DISTRICT_LandRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DISTRICT_LandRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DISTRICT_LandRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DISTRICT_LandRowChanged != null)) {
                    this.DISTRICT_LandRowChanged(this, new DISTRICT_LandRowChangeEvent(((DISTRICT_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DISTRICT_LandRowChanging != null)) {
                    this.DISTRICT_LandRowChanging(this, new DISTRICT_LandRowChangeEvent(((DISTRICT_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DISTRICT_LandRowDeleted != null)) {
                    this.DISTRICT_LandRowDeleted(this, new DISTRICT_LandRowChangeEvent(((DISTRICT_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DISTRICT_LandRowDeleting != null)) {
                    this.DISTRICT_LandRowDeleting(this, new DISTRICT_LandRowChangeEvent(((DISTRICT_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDISTRICT_LandRow(DISTRICT_LandRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DISTRICT_LandDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SECTEUR_LandDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_SECTEUR;
            
            private System.Data.DataColumn columnID_DISTRICT;
            
            private System.Data.DataColumn columnDESCRIPTION_SECTEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEUR_LandDataTable() {
                this.TableName = "SECTEUR_Land";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SECTEUR_LandDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SECTEUR_LandDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_SECTEURColumn {
                get {
                    return this.columnID_SECTEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_DISTRICTColumn {
                get {
                    return this.columnID_DISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_SECTEURColumn {
                get {
                    return this.columnDESCRIPTION_SECTEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEUR_LandRow this[int index] {
                get {
                    return ((SECTEUR_LandRow)(this.Rows[index]));
                }
            }
            
            public event SECTEUR_LandRowChangeEventHandler SECTEUR_LandRowChanging;
            
            public event SECTEUR_LandRowChangeEventHandler SECTEUR_LandRowChanged;
            
            public event SECTEUR_LandRowChangeEventHandler SECTEUR_LandRowDeleting;
            
            public event SECTEUR_LandRowChangeEventHandler SECTEUR_LandRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSECTEUR_LandRow(SECTEUR_LandRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEUR_LandRow AddSECTEUR_LandRow(int ID_SECTEUR, int ID_DISTRICT, string DESCRIPTION_SECTEUR) {
                SECTEUR_LandRow rowSECTEUR_LandRow = ((SECTEUR_LandRow)(this.NewRow()));
                rowSECTEUR_LandRow.ItemArray = new object[] {
                        ID_SECTEUR,
                        ID_DISTRICT,
                        DESCRIPTION_SECTEUR};
                this.Rows.Add(rowSECTEUR_LandRow);
                return rowSECTEUR_LandRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEUR_LandRow FindByID_SECTEUR(int ID_SECTEUR) {
                return ((SECTEUR_LandRow)(this.Rows.Find(new object[] {
                            ID_SECTEUR})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SECTEUR_LandDataTable cln = ((SECTEUR_LandDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SECTEUR_LandDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_SECTEUR = base.Columns["ID_SECTEUR"];
                this.columnID_DISTRICT = base.Columns["ID_DISTRICT"];
                this.columnDESCRIPTION_SECTEUR = base.Columns["DESCRIPTION_SECTEUR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_SECTEUR = new System.Data.DataColumn("ID_SECTEUR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_SECTEUR);
                this.columnID_DISTRICT = new System.Data.DataColumn("ID_DISTRICT", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DISTRICT);
                this.columnDESCRIPTION_SECTEUR = new System.Data.DataColumn("DESCRIPTION_SECTEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_SECTEUR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_SECTEUR}, true));
                this.columnID_SECTEUR.AllowDBNull = false;
                this.columnID_SECTEUR.Unique = true;
                this.columnID_DISTRICT.AllowDBNull = false;
                this.columnDESCRIPTION_SECTEUR.AllowDBNull = false;
                this.columnDESCRIPTION_SECTEUR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEUR_LandRow NewSECTEUR_LandRow() {
                return ((SECTEUR_LandRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SECTEUR_LandRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SECTEUR_LandRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SECTEUR_LandRowChanged != null)) {
                    this.SECTEUR_LandRowChanged(this, new SECTEUR_LandRowChangeEvent(((SECTEUR_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SECTEUR_LandRowChanging != null)) {
                    this.SECTEUR_LandRowChanging(this, new SECTEUR_LandRowChangeEvent(((SECTEUR_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SECTEUR_LandRowDeleted != null)) {
                    this.SECTEUR_LandRowDeleted(this, new SECTEUR_LandRowChangeEvent(((SECTEUR_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SECTEUR_LandRowDeleting != null)) {
                    this.SECTEUR_LandRowDeleting(this, new SECTEUR_LandRowChangeEvent(((SECTEUR_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSECTEUR_LandRow(SECTEUR_LandRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SECTEUR_LandDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Cells_LandDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCellID;
            
            private System.Data.DataColumn columnid_secteur;
            
            private System.Data.DataColumn columnCellName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_LandDataTable() {
                this.TableName = "Cells_Land";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Cells_LandDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Cells_LandDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellIDColumn {
                get {
                    return this.columnCellID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn id_secteurColumn {
                get {
                    return this.columnid_secteur;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellNameColumn {
                get {
                    return this.columnCellName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_LandRow this[int index] {
                get {
                    return ((Cells_LandRow)(this.Rows[index]));
                }
            }
            
            public event Cells_LandRowChangeEventHandler Cells_LandRowChanging;
            
            public event Cells_LandRowChangeEventHandler Cells_LandRowChanged;
            
            public event Cells_LandRowChangeEventHandler Cells_LandRowDeleting;
            
            public event Cells_LandRowChangeEventHandler Cells_LandRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCells_LandRow(Cells_LandRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_LandRow AddCells_LandRow(short CellID, int id_secteur, string CellName) {
                Cells_LandRow rowCells_LandRow = ((Cells_LandRow)(this.NewRow()));
                rowCells_LandRow.ItemArray = new object[] {
                        CellID,
                        id_secteur,
                        CellName};
                this.Rows.Add(rowCells_LandRow);
                return rowCells_LandRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_LandRow FindByCellID(short CellID) {
                return ((Cells_LandRow)(this.Rows.Find(new object[] {
                            CellID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Cells_LandDataTable cln = ((Cells_LandDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Cells_LandDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCellID = base.Columns["CellID"];
                this.columnid_secteur = base.Columns["id_secteur"];
                this.columnCellName = base.Columns["CellName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCellID = new System.Data.DataColumn("CellID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellID);
                this.columnid_secteur = new System.Data.DataColumn("id_secteur", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid_secteur);
                this.columnCellName = new System.Data.DataColumn("CellName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCellID}, true));
                this.columnCellID.AllowDBNull = false;
                this.columnCellID.Unique = true;
                this.columnid_secteur.AllowDBNull = false;
                this.columnCellName.AllowDBNull = false;
                this.columnCellName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_LandRow NewCells_LandRow() {
                return ((Cells_LandRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Cells_LandRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Cells_LandRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Cells_LandRowChanged != null)) {
                    this.Cells_LandRowChanged(this, new Cells_LandRowChangeEvent(((Cells_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Cells_LandRowChanging != null)) {
                    this.Cells_LandRowChanging(this, new Cells_LandRowChangeEvent(((Cells_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Cells_LandRowDeleted != null)) {
                    this.Cells_LandRowDeleted(this, new Cells_LandRowChangeEvent(((Cells_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Cells_LandRowDeleting != null)) {
                    this.Cells_LandRowDeleting(this, new Cells_LandRowChangeEvent(((Cells_LandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCells_LandRow(Cells_LandRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Cells_LandDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SelectOneFORMEROWNERDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_FORMER_OWNER;
            
            private System.Data.DataColumn columnNOM;
            
            private System.Data.DataColumn columnPRENOM;
            
            private System.Data.DataColumn columnAUTRE_NOM;
            
            private System.Data.DataColumn columnFORMER_LAND_SIZE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectOneFORMEROWNERDataTable() {
                this.TableName = "SelectOneFORMEROWNER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectOneFORMEROWNERDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SelectOneFORMEROWNERDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_FORMER_OWNERColumn {
                get {
                    return this.columnID_FORMER_OWNER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOMColumn {
                get {
                    return this.columnNOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRENOMColumn {
                get {
                    return this.columnPRENOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AUTRE_NOMColumn {
                get {
                    return this.columnAUTRE_NOM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FORMER_LAND_SIZEColumn {
                get {
                    return this.columnFORMER_LAND_SIZE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectOneFORMEROWNERRow this[int index] {
                get {
                    return ((SelectOneFORMEROWNERRow)(this.Rows[index]));
                }
            }
            
            public event SelectOneFORMEROWNERRowChangeEventHandler SelectOneFORMEROWNERRowChanging;
            
            public event SelectOneFORMEROWNERRowChangeEventHandler SelectOneFORMEROWNERRowChanged;
            
            public event SelectOneFORMEROWNERRowChangeEventHandler SelectOneFORMEROWNERRowDeleting;
            
            public event SelectOneFORMEROWNERRowChangeEventHandler SelectOneFORMEROWNERRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelectOneFORMEROWNERRow(SelectOneFORMEROWNERRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectOneFORMEROWNERRow AddSelectOneFORMEROWNERRow(string NOM, string PRENOM, string AUTRE_NOM, double FORMER_LAND_SIZE) {
                SelectOneFORMEROWNERRow rowSelectOneFORMEROWNERRow = ((SelectOneFORMEROWNERRow)(this.NewRow()));
                rowSelectOneFORMEROWNERRow.ItemArray = new object[] {
                        null,
                        NOM,
                        PRENOM,
                        AUTRE_NOM,
                        FORMER_LAND_SIZE};
                this.Rows.Add(rowSelectOneFORMEROWNERRow);
                return rowSelectOneFORMEROWNERRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectOneFORMEROWNERRow FindByID_FORMER_OWNER(int ID_FORMER_OWNER) {
                return ((SelectOneFORMEROWNERRow)(this.Rows.Find(new object[] {
                            ID_FORMER_OWNER})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SelectOneFORMEROWNERDataTable cln = ((SelectOneFORMEROWNERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SelectOneFORMEROWNERDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_FORMER_OWNER = base.Columns["ID_FORMER_OWNER"];
                this.columnNOM = base.Columns["NOM"];
                this.columnPRENOM = base.Columns["PRENOM"];
                this.columnAUTRE_NOM = base.Columns["AUTRE_NOM"];
                this.columnFORMER_LAND_SIZE = base.Columns["FORMER_LAND_SIZE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_FORMER_OWNER = new System.Data.DataColumn("ID_FORMER_OWNER", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_FORMER_OWNER);
                this.columnNOM = new System.Data.DataColumn("NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM);
                this.columnPRENOM = new System.Data.DataColumn("PRENOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRENOM);
                this.columnAUTRE_NOM = new System.Data.DataColumn("AUTRE_NOM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTRE_NOM);
                this.columnFORMER_LAND_SIZE = new System.Data.DataColumn("FORMER_LAND_SIZE", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORMER_LAND_SIZE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_FORMER_OWNER}, true));
                this.columnID_FORMER_OWNER.AutoIncrement = true;
                this.columnID_FORMER_OWNER.AllowDBNull = false;
                this.columnID_FORMER_OWNER.ReadOnly = true;
                this.columnID_FORMER_OWNER.Unique = true;
                this.columnNOM.AllowDBNull = false;
                this.columnNOM.MaxLength = 50;
                this.columnPRENOM.MaxLength = 50;
                this.columnAUTRE_NOM.MaxLength = 50;
                this.columnFORMER_LAND_SIZE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectOneFORMEROWNERRow NewSelectOneFORMEROWNERRow() {
                return ((SelectOneFORMEROWNERRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SelectOneFORMEROWNERRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SelectOneFORMEROWNERRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectOneFORMEROWNERRowChanged != null)) {
                    this.SelectOneFORMEROWNERRowChanged(this, new SelectOneFORMEROWNERRowChangeEvent(((SelectOneFORMEROWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectOneFORMEROWNERRowChanging != null)) {
                    this.SelectOneFORMEROWNERRowChanging(this, new SelectOneFORMEROWNERRowChangeEvent(((SelectOneFORMEROWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectOneFORMEROWNERRowDeleted != null)) {
                    this.SelectOneFORMEROWNERRowDeleted(this, new SelectOneFORMEROWNERRowChangeEvent(((SelectOneFORMEROWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectOneFORMEROWNERRowDeleting != null)) {
                    this.SelectOneFORMEROWNERRowDeleting(this, new SelectOneFORMEROWNERRowChangeEvent(((SelectOneFORMEROWNERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelectOneFORMEROWNERRow(SelectOneFORMEROWNERRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SelectOneFORMEROWNERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistinctCellsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCELLULE;
            
            private System.Data.DataColumn columnCellName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctCellsDataTable() {
                this.TableName = "DistinctCells";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctCellsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistinctCellsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CELLULEColumn {
                get {
                    return this.columnCELLULE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellNameColumn {
                get {
                    return this.columnCellName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctCellsRow this[int index] {
                get {
                    return ((DistinctCellsRow)(this.Rows[index]));
                }
            }
            
            public event DistinctCellsRowChangeEventHandler DistinctCellsRowChanging;
            
            public event DistinctCellsRowChangeEventHandler DistinctCellsRowChanged;
            
            public event DistinctCellsRowChangeEventHandler DistinctCellsRowDeleting;
            
            public event DistinctCellsRowChangeEventHandler DistinctCellsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistinctCellsRow(DistinctCellsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctCellsRow AddDistinctCellsRow(int CELLULE, string CellName) {
                DistinctCellsRow rowDistinctCellsRow = ((DistinctCellsRow)(this.NewRow()));
                rowDistinctCellsRow.ItemArray = new object[] {
                        CELLULE,
                        CellName};
                this.Rows.Add(rowDistinctCellsRow);
                return rowDistinctCellsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DistinctCellsDataTable cln = ((DistinctCellsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DistinctCellsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCELLULE = base.Columns["CELLULE"];
                this.columnCellName = base.Columns["CellName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCELLULE = new System.Data.DataColumn("CELLULE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCELLULE);
                this.columnCellName = new System.Data.DataColumn("CellName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCellName);
                this.columnCELLULE.AllowDBNull = false;
                this.columnCellName.AllowDBNull = false;
                this.columnCellName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctCellsRow NewDistinctCellsRow() {
                return ((DistinctCellsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DistinctCellsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DistinctCellsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistinctCellsRowChanged != null)) {
                    this.DistinctCellsRowChanged(this, new DistinctCellsRowChangeEvent(((DistinctCellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistinctCellsRowChanging != null)) {
                    this.DistinctCellsRowChanging(this, new DistinctCellsRowChangeEvent(((DistinctCellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistinctCellsRowDeleted != null)) {
                    this.DistinctCellsRowDeleted(this, new DistinctCellsRowChangeEvent(((DistinctCellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistinctCellsRowDeleting != null)) {
                    this.DistinctCellsRowDeleting(this, new DistinctCellsRowChangeEvent(((DistinctCellsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistinctCellsRow(DistinctCellsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistinctCellsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BeneficiaryCategoryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidcategory;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columncomment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BeneficiaryCategoryDataTable() {
                this.TableName = "BeneficiaryCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BeneficiaryCategoryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BeneficiaryCategoryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcategoryColumn {
                get {
                    return this.columnidcategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BeneficiaryCategoryRow this[int index] {
                get {
                    return ((BeneficiaryCategoryRow)(this.Rows[index]));
                }
            }
            
            public event BeneficiaryCategoryRowChangeEventHandler BeneficiaryCategoryRowChanging;
            
            public event BeneficiaryCategoryRowChangeEventHandler BeneficiaryCategoryRowChanged;
            
            public event BeneficiaryCategoryRowChangeEventHandler BeneficiaryCategoryRowDeleting;
            
            public event BeneficiaryCategoryRowChangeEventHandler BeneficiaryCategoryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBeneficiaryCategoryRow(BeneficiaryCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BeneficiaryCategoryRow AddBeneficiaryCategoryRow(string description, string comment) {
                BeneficiaryCategoryRow rowBeneficiaryCategoryRow = ((BeneficiaryCategoryRow)(this.NewRow()));
                rowBeneficiaryCategoryRow.ItemArray = new object[] {
                        null,
                        description,
                        comment};
                this.Rows.Add(rowBeneficiaryCategoryRow);
                return rowBeneficiaryCategoryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BeneficiaryCategoryRow FindByidcategory(int idcategory) {
                return ((BeneficiaryCategoryRow)(this.Rows.Find(new object[] {
                            idcategory})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BeneficiaryCategoryDataTable cln = ((BeneficiaryCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BeneficiaryCategoryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidcategory = base.Columns["idcategory"];
                this.columndescription = base.Columns["description"];
                this.columncomment = base.Columns["comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidcategory = new System.Data.DataColumn("idcategory", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcategory);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columncomment = new System.Data.DataColumn("comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidcategory}, true));
                this.columnidcategory.AutoIncrement = true;
                this.columnidcategory.AllowDBNull = false;
                this.columnidcategory.ReadOnly = true;
                this.columnidcategory.Unique = true;
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 100;
                this.columncomment.MaxLength = 250;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BeneficiaryCategoryRow NewBeneficiaryCategoryRow() {
                return ((BeneficiaryCategoryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BeneficiaryCategoryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BeneficiaryCategoryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BeneficiaryCategoryRowChanged != null)) {
                    this.BeneficiaryCategoryRowChanged(this, new BeneficiaryCategoryRowChangeEvent(((BeneficiaryCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BeneficiaryCategoryRowChanging != null)) {
                    this.BeneficiaryCategoryRowChanging(this, new BeneficiaryCategoryRowChangeEvent(((BeneficiaryCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BeneficiaryCategoryRowDeleted != null)) {
                    this.BeneficiaryCategoryRowDeleted(this, new BeneficiaryCategoryRowChangeEvent(((BeneficiaryCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BeneficiaryCategoryRowDeleting != null)) {
                    this.BeneficiaryCategoryRowDeleting(this, new BeneficiaryCategoryRowChangeEvent(((BeneficiaryCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBeneficiaryCategoryRow(BeneficiaryCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BeneficiaryCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormerOwnerCategoryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidcategory;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columncomment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormerOwnerCategoryDataTable() {
                this.TableName = "FormerOwnerCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormerOwnerCategoryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormerOwnerCategoryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcategoryColumn {
                get {
                    return this.columnidcategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormerOwnerCategoryRow this[int index] {
                get {
                    return ((FormerOwnerCategoryRow)(this.Rows[index]));
                }
            }
            
            public event FormerOwnerCategoryRowChangeEventHandler FormerOwnerCategoryRowChanging;
            
            public event FormerOwnerCategoryRowChangeEventHandler FormerOwnerCategoryRowChanged;
            
            public event FormerOwnerCategoryRowChangeEventHandler FormerOwnerCategoryRowDeleting;
            
            public event FormerOwnerCategoryRowChangeEventHandler FormerOwnerCategoryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormerOwnerCategoryRow(FormerOwnerCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormerOwnerCategoryRow AddFormerOwnerCategoryRow(string description, string comment) {
                FormerOwnerCategoryRow rowFormerOwnerCategoryRow = ((FormerOwnerCategoryRow)(this.NewRow()));
                rowFormerOwnerCategoryRow.ItemArray = new object[] {
                        null,
                        description,
                        comment};
                this.Rows.Add(rowFormerOwnerCategoryRow);
                return rowFormerOwnerCategoryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormerOwnerCategoryRow FindByidcategory(int idcategory) {
                return ((FormerOwnerCategoryRow)(this.Rows.Find(new object[] {
                            idcategory})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FormerOwnerCategoryDataTable cln = ((FormerOwnerCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FormerOwnerCategoryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidcategory = base.Columns["idcategory"];
                this.columndescription = base.Columns["description"];
                this.columncomment = base.Columns["comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidcategory = new System.Data.DataColumn("idcategory", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcategory);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columncomment = new System.Data.DataColumn("comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidcategory}, true));
                this.columnidcategory.AutoIncrement = true;
                this.columnidcategory.AllowDBNull = false;
                this.columnidcategory.ReadOnly = true;
                this.columnidcategory.Unique = true;
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 100;
                this.columncomment.MaxLength = 250;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormerOwnerCategoryRow NewFormerOwnerCategoryRow() {
                return ((FormerOwnerCategoryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FormerOwnerCategoryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FormerOwnerCategoryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormerOwnerCategoryRowChanged != null)) {
                    this.FormerOwnerCategoryRowChanged(this, new FormerOwnerCategoryRowChangeEvent(((FormerOwnerCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormerOwnerCategoryRowChanging != null)) {
                    this.FormerOwnerCategoryRowChanging(this, new FormerOwnerCategoryRowChangeEvent(((FormerOwnerCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormerOwnerCategoryRowDeleted != null)) {
                    this.FormerOwnerCategoryRowDeleted(this, new FormerOwnerCategoryRowChangeEvent(((FormerOwnerCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormerOwnerCategoryRowDeleting != null)) {
                    this.FormerOwnerCategoryRowDeleting(this, new FormerOwnerCategoryRowChangeEvent(((FormerOwnerCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormerOwnerCategoryRow(FormerOwnerCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LAND_COMMITEE_Data_Set ds = new LAND_COMMITEE_Data_Set();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormerOwnerCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BOUNDARY_DETAILSRow : System.Data.DataRow {
            
            private BOUNDARY_DETAILSDataTable tableBOUNDARY_DETAILS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BOUNDARY_DETAILSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBOUNDARY_DETAILS = ((BOUNDARY_DETAILSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No_REFERENCE {
                get {
                    return ((int)(this[this.tableBOUNDARY_DETAILS.No_REFERENCEColumn]));
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.No_REFERENCEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAND_No {
                get {
                    return ((string)(this[this.tableBOUNDARY_DETAILS.LAND_NoColumn]));
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.LAND_NoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WAY_POINTS {
                get {
                    return ((int)(this[this.tableBOUNDARY_DETAILS.WAY_POINTSColumn]));
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.WAY_POINTSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NORTHING_Y {
                get {
                    try {
                        return ((string)(this[this.tableBOUNDARY_DETAILS.NORTHING_YColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NORTHING_Y\' in table \'BOUNDARY_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.NORTHING_YColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EASTING_X {
                get {
                    try {
                        return ((string)(this[this.tableBOUNDARY_DETAILS.EASTING_XColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EASTING_X\' in table \'BOUNDARY_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.EASTING_XColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FROM_WAYPOINT {
                get {
                    return ((int)(this[this.tableBOUNDARY_DETAILS.FROM_WAYPOINTColumn]));
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.FROM_WAYPOINTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TO_WAYPOINT {
                get {
                    return ((int)(this[this.tableBOUNDARY_DETAILS.TO_WAYPOINTColumn]));
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.TO_WAYPOINTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DISTANCE {
                get {
                    return ((double)(this[this.tableBOUNDARY_DETAILS.DISTANCEColumn]));
                }
                set {
                    this[this.tableBOUNDARY_DETAILS.DISTANCEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNORTHING_YNull() {
                return this.IsNull(this.tableBOUNDARY_DETAILS.NORTHING_YColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNORTHING_YNull() {
                this[this.tableBOUNDARY_DETAILS.NORTHING_YColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEASTING_XNull() {
                return this.IsNull(this.tableBOUNDARY_DETAILS.EASTING_XColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEASTING_XNull() {
                this[this.tableBOUNDARY_DETAILS.EASTING_XColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CATEG_SUPERVISORRow : System.Data.DataRow {
            
            private CATEG_SUPERVISORDataTable tableCATEG_SUPERVISOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CATEG_SUPERVISORRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCATEG_SUPERVISOR = ((CATEG_SUPERVISORDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No_RANK_PROFESSIONAL {
                get {
                    return ((int)(this[this.tableCATEG_SUPERVISOR.No_RANK_PROFESSIONALColumn]));
                }
                set {
                    this[this.tableCATEG_SUPERVISOR.No_RANK_PROFESSIONALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RANK_PROFESSIONAL {
                get {
                    return ((string)(this[this.tableCATEG_SUPERVISOR.RANK_PROFESSIONALColumn]));
                }
                set {
                    this[this.tableCATEG_SUPERVISOR.RANK_PROFESSIONALColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DISTRICTRow : System.Data.DataRow {
            
            private DISTRICTDataTable tableDISTRICT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DISTRICTRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDISTRICT = ((DISTRICTDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_DISTRICT {
                get {
                    return ((int)(this[this.tableDISTRICT.ID_DISTRICTColumn]));
                }
                set {
                    this[this.tableDISTRICT.ID_DISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_PROVINCE {
                get {
                    return ((int)(this[this.tableDISTRICT.ID_PROVINCEColumn]));
                }
                set {
                    this[this.tableDISTRICT.ID_PROVINCEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_DISTRICT {
                get {
                    return ((string)(this[this.tableDISTRICT.DESCRIPTION_DISTRICTColumn]));
                }
                set {
                    this[this.tableDISTRICT.DESCRIPTION_DISTRICTColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LAND_INFORow : System.Data.DataRow {
            
            private LAND_INFODataTable tableLAND_INFO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LAND_INFORow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLAND_INFO = ((LAND_INFODataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAND_No {
                get {
                    return ((string)(this[this.tableLAND_INFO.LAND_NoColumn]));
                }
                set {
                    this[this.tableLAND_INFO.LAND_NoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROVINCE {
                get {
                    return ((string)(this[this.tableLAND_INFO.PROVINCEColumn]));
                }
                set {
                    this[this.tableLAND_INFO.PROVINCEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DISTRICT {
                get {
                    return ((int)(this[this.tableLAND_INFO.DISTRICTColumn]));
                }
                set {
                    this[this.tableLAND_INFO.DISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SECTOR {
                get {
                    return ((int)(this[this.tableLAND_INFO.SECTORColumn]));
                }
                set {
                    this[this.tableLAND_INFO.SECTORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CELLULE {
                get {
                    return ((int)(this[this.tableLAND_INFO.CELLULEColumn]));
                }
                set {
                    this[this.tableLAND_INFO.CELLULEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USAGE {
                get {
                    return ((string)(this[this.tableLAND_INFO.USAGEColumn]));
                }
                set {
                    this[this.tableLAND_INFO.USAGEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LAND_SIZE {
                get {
                    return ((double)(this[this.tableLAND_INFO.LAND_SIZEColumn]));
                }
                set {
                    this[this.tableLAND_INFO.LAND_SIZEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No_SUPERVISOR {
                get {
                    return ((int)(this[this.tableLAND_INFO.No_SUPERVISORColumn]));
                }
                set {
                    this[this.tableLAND_INFO.No_SUPERVISORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FORMER_OWNER {
                get {
                    return ((int)(this[this.tableLAND_INFO.FORMER_OWNERColumn]));
                }
                set {
                    this[this.tableLAND_INFO.FORMER_OWNERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumReference {
                get {
                    return ((int)(this[this.tableLAND_INFO.NumReferenceColumn]));
                }
                set {
                    this[this.tableLAND_INFO.NumReferenceColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROVINCERow : System.Data.DataRow {
            
            private PROVINCEDataTable tablePROVINCE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROVINCERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROVINCE = ((PROVINCEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_PROVINCE {
                get {
                    return ((int)(this[this.tablePROVINCE.ID_PROVINCEColumn]));
                }
                set {
                    this[this.tablePROVINCE.ID_PROVINCEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_PROVINCE {
                get {
                    return ((string)(this[this.tablePROVINCE.DESCRIPTION_PROVINCEColumn]));
                }
                set {
                    this[this.tablePROVINCE.DESCRIPTION_PROVINCEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SECTEURRow : System.Data.DataRow {
            
            private SECTEURDataTable tableSECTEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SECTEURRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSECTEUR = ((SECTEURDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_SECTEUR {
                get {
                    return ((int)(this[this.tableSECTEUR.ID_SECTEURColumn]));
                }
                set {
                    this[this.tableSECTEUR.ID_SECTEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_DISTRICT {
                get {
                    return ((int)(this[this.tableSECTEUR.ID_DISTRICTColumn]));
                }
                set {
                    this[this.tableSECTEUR.ID_DISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_SECTEUR {
                get {
                    return ((string)(this[this.tableSECTEUR.DESCRIPTION_SECTEURColumn]));
                }
                set {
                    this[this.tableSECTEUR.DESCRIPTION_SECTEURColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SUPERVISORRow : System.Data.DataRow {
            
            private SUPERVISORDataTable tableSUPERVISOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUPERVISORRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSUPERVISOR = ((SUPERVISORDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No_SUPERVISOR {
                get {
                    return ((int)(this[this.tableSUPERVISOR.No_SUPERVISORColumn]));
                }
                set {
                    this[this.tableSUPERVISOR.No_SUPERVISORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM {
                get {
                    return ((string)(this[this.tableSUPERVISOR.NOMColumn]));
                }
                set {
                    this[this.tableSUPERVISOR.NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRENOM {
                get {
                    try {
                        return ((string)(this[this.tableSUPERVISOR.PRENOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRENOM\' in table \'SUPERVISOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPERVISOR.PRENOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AUTRE_NOM {
                get {
                    try {
                        return ((string)(this[this.tableSUPERVISOR.AUTRE_NOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AUTRE_NOM\' in table \'SUPERVISOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPERVISOR.AUTRE_NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No_RANK_PROFESSIONAL {
                get {
                    return ((int)(this[this.tableSUPERVISOR.No_RANK_PROFESSIONALColumn]));
                }
                set {
                    this[this.tableSUPERVISOR.No_RANK_PROFESSIONALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableSUPERVISOR.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'SUPERVISOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPERVISOR.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRENOMNull() {
                return this.IsNull(this.tableSUPERVISOR.PRENOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRENOMNull() {
                this[this.tableSUPERVISOR.PRENOMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAUTRE_NOMNull() {
                return this.IsNull(this.tableSUPERVISOR.AUTRE_NOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAUTRE_NOMNull() {
                this[this.tableSUPERVISOR.AUTRE_NOMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableSUPERVISOR.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableSUPERVISOR.FullNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Select_PasswordRow : System.Data.DataRow {
            
            private Select_PasswordDataTable tableSelect_Password;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Select_PasswordRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelect_Password = ((Select_PasswordDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserTablesRow : System.Data.DataRow {
            
            private UserTablesDataTable tableUserTables;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserTablesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserTables = ((UserTablesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string username {
                get {
                    return ((string)(this[this.tableUserTables.usernameColumn]));
                }
                set {
                    this[this.tableUserTables.usernameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string password {
                get {
                    return ((string)(this[this.tableUserTables.passwordColumn]));
                }
                set {
                    this[this.tableUserTables.passwordColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BENEFICIARY_BY_LOCATIONRow : System.Data.DataRow {
            
            private BENEFICIARY_BY_LOCATIONDataTable tableBENEFICIARY_BY_LOCATION;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BENEFICIARY_BY_LOCATIONRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBENEFICIARY_BY_LOCATION = ((BENEFICIARY_BY_LOCATIONDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAND_No {
                get {
                    return ((string)(this[this.tableBENEFICIARY_BY_LOCATION.LAND_NoColumn]));
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.LAND_NoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM {
                get {
                    return ((string)(this[this.tableBENEFICIARY_BY_LOCATION.NOMColumn]));
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRENOM {
                get {
                    try {
                        return ((string)(this[this.tableBENEFICIARY_BY_LOCATION.PRENOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRENOM\' in table \'BENEFICIARY_BY_LOCATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.PRENOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string No_IDENTITE {
                get {
                    try {
                        return ((string)(this[this.tableBENEFICIARY_BY_LOCATION.No_IDENTITEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'No_IDENTITE\' in table \'BENEFICIARY_BY_LOCATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.No_IDENTITEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LAND_SIZE {
                get {
                    try {
                        return ((double)(this[this.tableBENEFICIARY_BY_LOCATION.LAND_SIZEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LAND_SIZE\' in table \'BENEFICIARY_BY_LOCATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.LAND_SIZEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTRICT {
                get {
                    return ((string)(this[this.tableBENEFICIARY_BY_LOCATION.DISTRICTColumn]));
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.DISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SECTOR {
                get {
                    return ((string)(this[this.tableBENEFICIARY_BY_LOCATION.SECTORColumn]));
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.SECTORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CELLULE {
                get {
                    try {
                        return ((string)(this[this.tableBENEFICIARY_BY_LOCATION.CELLULEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CELLULE\' in table \'BENEFICIARY_BY_LOCATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBENEFICIARY_BY_LOCATION.CELLULEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRENOMNull() {
                return this.IsNull(this.tableBENEFICIARY_BY_LOCATION.PRENOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRENOMNull() {
                this[this.tableBENEFICIARY_BY_LOCATION.PRENOMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNo_IDENTITENull() {
                return this.IsNull(this.tableBENEFICIARY_BY_LOCATION.No_IDENTITEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNo_IDENTITENull() {
                this[this.tableBENEFICIARY_BY_LOCATION.No_IDENTITEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAND_SIZENull() {
                return this.IsNull(this.tableBENEFICIARY_BY_LOCATION.LAND_SIZEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAND_SIZENull() {
                this[this.tableBENEFICIARY_BY_LOCATION.LAND_SIZEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCELLULENull() {
                return this.IsNull(this.tableBENEFICIARY_BY_LOCATION.CELLULEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCELLULENull() {
                this[this.tableBENEFICIARY_BY_LOCATION.CELLULEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FORMER_OWNERSRow : System.Data.DataRow {
            
            private FORMER_OWNERSDataTable tableFORMER_OWNERS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FORMER_OWNERSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFORMER_OWNERS = ((FORMER_OWNERSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_FORMER_OWNER {
                get {
                    return ((int)(this[this.tableFORMER_OWNERS.ID_FORMER_OWNERColumn]));
                }
                set {
                    this[this.tableFORMER_OWNERS.ID_FORMER_OWNERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM {
                get {
                    return ((string)(this[this.tableFORMER_OWNERS.NOMColumn]));
                }
                set {
                    this[this.tableFORMER_OWNERS.NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRENOM {
                get {
                    try {
                        return ((string)(this[this.tableFORMER_OWNERS.PRENOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRENOM\' in table \'FORMER_OWNERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFORMER_OWNERS.PRENOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AUTRE_NOM {
                get {
                    try {
                        return ((string)(this[this.tableFORMER_OWNERS.AUTRE_NOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AUTRE_NOM\' in table \'FORMER_OWNERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFORMER_OWNERS.AUTRE_NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FORMER_LAND_SIZE {
                get {
                    return ((double)(this[this.tableFORMER_OWNERS.FORMER_LAND_SIZEColumn]));
                }
                set {
                    this[this.tableFORMER_OWNERS.FORMER_LAND_SIZEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string former_owner {
                get {
                    try {
                        return ((string)(this[this.tableFORMER_OWNERS.former_ownerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'former_owner\' in table \'FORMER_OWNERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFORMER_OWNERS.former_ownerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRENOMNull() {
                return this.IsNull(this.tableFORMER_OWNERS.PRENOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRENOMNull() {
                this[this.tableFORMER_OWNERS.PRENOMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAUTRE_NOMNull() {
                return this.IsNull(this.tableFORMER_OWNERS.AUTRE_NOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAUTRE_NOMNull() {
                this[this.tableFORMER_OWNERS.AUTRE_NOMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isformer_ownerNull() {
                return this.IsNull(this.tableFORMER_OWNERS.former_ownerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setformer_ownerNull() {
                this[this.tableFORMER_OWNERS.former_ownerColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Select_Max_NumRefRow : System.Data.DataRow {
            
            private Select_Max_NumRefDataTable tableSelect_Max_NumRef;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Select_Max_NumRefRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelect_Max_NumRef = ((Select_Max_NumRefDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int max_NumReference {
                get {
                    try {
                        return ((int)(this[this.tableSelect_Max_NumRef.max_NumReferenceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'max_NumReference\' in table \'Select_Max_NumRef\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_Max_NumRef.max_NumReferenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismax_NumReferenceNull() {
                return this.IsNull(this.tableSelect_Max_NumRef.max_NumReferenceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmax_NumReferenceNull() {
                this[this.tableSelect_Max_NumRef.max_NumReferenceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LAND_OWNERRow : System.Data.DataRow {
            
            private LAND_OWNERDataTable tableLAND_OWNER;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LAND_OWNERRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLAND_OWNER = ((LAND_OWNERDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumReference {
                get {
                    return ((int)(this[this.tableLAND_OWNER.NumReferenceColumn]));
                }
                set {
                    this[this.tableLAND_OWNER.NumReferenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoIDENTITE {
                get {
                    return ((string)(this[this.tableLAND_OWNER.NoIDENTITEColumn]));
                }
                set {
                    this[this.tableLAND_OWNER.NoIDENTITEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM {
                get {
                    return ((string)(this[this.tableLAND_OWNER.NOMColumn]));
                }
                set {
                    this[this.tableLAND_OWNER.NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRENOM {
                get {
                    try {
                        return ((string)(this[this.tableLAND_OWNER.PRENOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRENOM\' in table \'LAND_OWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLAND_OWNER.PRENOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AUTRE_NOM {
                get {
                    try {
                        return ((string)(this[this.tableLAND_OWNER.AUTRE_NOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AUTRE_NOM\' in table \'LAND_OWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLAND_OWNER.AUTRE_NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PROVINCEID {
                get {
                    return ((int)(this[this.tableLAND_OWNER.PROVINCEIDColumn]));
                }
                set {
                    this[this.tableLAND_OWNER.PROVINCEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DISTRICTID {
                get {
                    return ((int)(this[this.tableLAND_OWNER.DISTRICTIDColumn]));
                }
                set {
                    this[this.tableLAND_OWNER.DISTRICTIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SECTORID {
                get {
                    return ((int)(this[this.tableLAND_OWNER.SECTORIDColumn]));
                }
                set {
                    this[this.tableLAND_OWNER.SECTORIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CELLULEID {
                get {
                    return ((int)(this[this.tableLAND_OWNER.CELLULEIDColumn]));
                }
                set {
                    this[this.tableLAND_OWNER.CELLULEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRENOMNull() {
                return this.IsNull(this.tableLAND_OWNER.PRENOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRENOMNull() {
                this[this.tableLAND_OWNER.PRENOMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAUTRE_NOMNull() {
                return this.IsNull(this.tableLAND_OWNER.AUTRE_NOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAUTRE_NOMNull() {
                this[this.tableLAND_OWNER.AUTRE_NOMColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SelectAllInfoRow : System.Data.DataRow {
            
            private SelectAllInfoDataTable tableSelectAllInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectAllInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectAllInfo = ((SelectAllInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nom {
                get {
                    return ((string)(this[this.tableSelectAllInfo.nomColumn]));
                }
                set {
                    this[this.tableSelectAllInfo.nomColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prenom {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.prenomColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'prenom\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.prenomColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string autre_nom {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.autre_nomColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'autre_nom\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.autre_nomColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProvinceOwner {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.ProvinceOwnerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProvinceOwner\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.ProvinceOwnerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictOwner {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.DistrictOwnerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DistrictOwner\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.DistrictOwnerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sectorOwner {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.sectorOwnerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sectorOwner\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.sectorOwnerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string celluleOwner {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.celluleOwnerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'celluleOwner\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.celluleOwnerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProvinceLand {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.ProvinceLandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProvinceLand\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.ProvinceLandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictLand {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.DistrictLandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DistrictLand\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.DistrictLandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectorLand {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.SectorLandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SectorLand\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.SectorLandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CelluleLand {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.CelluleLandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CelluleLand\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.CelluleLandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Usage {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.UsageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Usage\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.UsageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LandSize {
                get {
                    try {
                        return ((double)(this[this.tableSelectAllInfo.LandSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LandSize\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.LandSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormerOwnerName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.FormerOwnerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FormerOwnerName\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.FormerOwnerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupervisorName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.SupervisorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SupervisorName\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.SupervisorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string noidentite {
                get {
                    return ((string)(this[this.tableSelectAllInfo.noidentiteColumn]));
                }
                set {
                    this[this.tableSelectAllInfo.noidentiteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numreference {
                get {
                    return ((int)(this[this.tableSelectAllInfo.numreferenceColumn]));
                }
                set {
                    this[this.tableSelectAllInfo.numreferenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Column1 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAllInfo.Column1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Column1\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.Column1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column2 {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllInfo.Column2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Column2\' in table \'SelectAllInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllInfo.Column2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprenomNull() {
                return this.IsNull(this.tableSelectAllInfo.prenomColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprenomNull() {
                this[this.tableSelectAllInfo.prenomColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isautre_nomNull() {
                return this.IsNull(this.tableSelectAllInfo.autre_nomColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setautre_nomNull() {
                this[this.tableSelectAllInfo.autre_nomColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProvinceOwnerNull() {
                return this.IsNull(this.tableSelectAllInfo.ProvinceOwnerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProvinceOwnerNull() {
                this[this.tableSelectAllInfo.ProvinceOwnerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictOwnerNull() {
                return this.IsNull(this.tableSelectAllInfo.DistrictOwnerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictOwnerNull() {
                this[this.tableSelectAllInfo.DistrictOwnerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssectorOwnerNull() {
                return this.IsNull(this.tableSelectAllInfo.sectorOwnerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsectorOwnerNull() {
                this[this.tableSelectAllInfo.sectorOwnerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscelluleOwnerNull() {
                return this.IsNull(this.tableSelectAllInfo.celluleOwnerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcelluleOwnerNull() {
                this[this.tableSelectAllInfo.celluleOwnerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProvinceLandNull() {
                return this.IsNull(this.tableSelectAllInfo.ProvinceLandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProvinceLandNull() {
                this[this.tableSelectAllInfo.ProvinceLandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictLandNull() {
                return this.IsNull(this.tableSelectAllInfo.DistrictLandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictLandNull() {
                this[this.tableSelectAllInfo.DistrictLandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectorLandNull() {
                return this.IsNull(this.tableSelectAllInfo.SectorLandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectorLandNull() {
                this[this.tableSelectAllInfo.SectorLandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCelluleLandNull() {
                return this.IsNull(this.tableSelectAllInfo.CelluleLandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCelluleLandNull() {
                this[this.tableSelectAllInfo.CelluleLandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsageNull() {
                return this.IsNull(this.tableSelectAllInfo.UsageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsageNull() {
                this[this.tableSelectAllInfo.UsageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandSizeNull() {
                return this.IsNull(this.tableSelectAllInfo.LandSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandSizeNull() {
                this[this.tableSelectAllInfo.LandSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormerOwnerNameNull() {
                return this.IsNull(this.tableSelectAllInfo.FormerOwnerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormerOwnerNameNull() {
                this[this.tableSelectAllInfo.FormerOwnerNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupervisorNameNull() {
                return this.IsNull(this.tableSelectAllInfo.SupervisorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupervisorNameNull() {
                this[this.tableSelectAllInfo.SupervisorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn1Null() {
                return this.IsNull(this.tableSelectAllInfo.Column1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn1Null() {
                this[this.tableSelectAllInfo.Column1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn2Null() {
                return this.IsNull(this.tableSelectAllInfo.Column2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn2Null() {
                this[this.tableSelectAllInfo.Column2Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FindByNameRow : System.Data.DataRow {
            
            private FindByNameDataTable tableFindByName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FindByNameRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFindByName = ((FindByNameDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string landno {
                get {
                    return ((string)(this[this.tableFindByName.landnoColumn]));
                }
                set {
                    this[this.tableFindByName.landnoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fullname {
                get {
                    return ((string)(this[this.tableFindByName.fullnameColumn]));
                }
                set {
                    this[this.tableFindByName.fullnameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnCheckedLandRow : System.Data.DataRow {
            
            private UnCheckedLandDataTable tableUnCheckedLand;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnCheckedLandRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnCheckedLand = ((UnCheckedLandDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAND_No {
                get {
                    return ((string)(this[this.tableUnCheckedLand.LAND_NoColumn]));
                }
                set {
                    this[this.tableUnCheckedLand.LAND_NoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumReference {
                get {
                    return ((int)(this[this.tableUnCheckedLand.NumReferenceColumn]));
                }
                set {
                    this[this.tableUnCheckedLand.NumReferenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Checked {
                get {
                    return ((int)(this[this.tableUnCheckedLand.CheckedColumn]));
                }
                set {
                    this[this.tableUnCheckedLand.CheckedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int byWho {
                get {
                    try {
                        return ((int)(this[this.tableUnCheckedLand.byWhoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'byWho\' in table \'UnCheckedLand\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnCheckedLand.byWhoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbyWhoNull() {
                return this.IsNull(this.tableUnCheckedLand.byWhoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbyWhoNull() {
                this[this.tableUnCheckedLand.byWhoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SelectUserInfoRow : System.Data.DataRow {
            
            private SelectUserInfoDataTable tableSelectUserInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectUserInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectUserInfo = ((SelectUserInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableSelectUserInfo.nameColumn]));
                }
                set {
                    this[this.tableSelectUserInfo.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string surname {
                get {
                    try {
                        return ((string)(this[this.tableSelectUserInfo.surnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'surname\' in table \'SelectUserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectUserInfo.surnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Column1 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectUserInfo.Column1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Column1\' in table \'SelectUserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectUserInfo.Column1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Column2 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectUserInfo.Column2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Column2\' in table \'SelectUserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectUserInfo.Column2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date1 {
                get {
                    return ((System.DateTime)(this[this.tableSelectUserInfo.date1Column]));
                }
                set {
                    this[this.tableSelectUserInfo.date1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column3 {
                get {
                    try {
                        return ((string)(this[this.tableSelectUserInfo.Column3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Column3\' in table \'SelectUserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectUserInfo.Column3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssurnameNull() {
                return this.IsNull(this.tableSelectUserInfo.surnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsurnameNull() {
                this[this.tableSelectUserInfo.surnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn1Null() {
                return this.IsNull(this.tableSelectUserInfo.Column1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn1Null() {
                this[this.tableSelectUserInfo.Column1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn2Null() {
                return this.IsNull(this.tableSelectUserInfo.Column2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn2Null() {
                this[this.tableSelectUserInfo.Column2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn3Null() {
                return this.IsNull(this.tableSelectUserInfo.Column3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn3Null() {
                this[this.tableSelectUserInfo.Column3Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistinctDistrictRow : System.Data.DataRow {
            
            private DistinctDistrictDataTable tableDistinctDistrict;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctDistrictRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistinctDistrict = ((DistinctDistrictDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DISTRICT {
                get {
                    return ((int)(this[this.tableDistinctDistrict.DISTRICTColumn]));
                }
                set {
                    this[this.tableDistinctDistrict.DISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_DISTRICT {
                get {
                    return ((string)(this[this.tableDistinctDistrict.DESCRIPTION_DISTRICTColumn]));
                }
                set {
                    this[this.tableDistinctDistrict.DESCRIPTION_DISTRICTColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistinctSectorRow : System.Data.DataRow {
            
            private DistinctSectorDataTable tableDistinctSector;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctSectorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistinctSector = ((DistinctSectorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SECTOR {
                get {
                    return ((int)(this[this.tableDistinctSector.SECTORColumn]));
                }
                set {
                    this[this.tableDistinctSector.SECTORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_SECTEUR {
                get {
                    return ((string)(this[this.tableDistinctSector.DESCRIPTION_SECTEURColumn]));
                }
                set {
                    this[this.tableDistinctSector.DESCRIPTION_SECTEURColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SelectFormerOwnerDistributionRow : System.Data.DataRow {
            
            private SelectFormerOwnerDistributionDataTable tableSelectFormerOwnerDistribution;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectFormerOwnerDistributionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectFormerOwnerDistribution = ((SelectFormerOwnerDistributionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAND_No {
                get {
                    return ((string)(this[this.tableSelectFormerOwnerDistribution.LAND_NoColumn]));
                }
                set {
                    this[this.tableSelectFormerOwnerDistribution.LAND_NoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fullname {
                get {
                    try {
                        return ((string)(this[this.tableSelectFormerOwnerDistribution.fullnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fullname\' in table \'SelectFormerOwnerDistribution\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSelectFormerOwnerDistribution.fullnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FORMER_OWNER {
                get {
                    return ((int)(this[this.tableSelectFormerOwnerDistribution.FORMER_OWNERColumn]));
                }
                set {
                    this[this.tableSelectFormerOwnerDistribution.FORMER_OWNERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LAND_SIZE {
                get {
                    return ((double)(this[this.tableSelectFormerOwnerDistribution.LAND_SIZEColumn]));
                }
                set {
                    this[this.tableSelectFormerOwnerDistribution.LAND_SIZEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfullnameNull() {
                return this.IsNull(this.tableSelectFormerOwnerDistribution.fullnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfullnameNull() {
                this[this.tableSelectFormerOwnerDistribution.fullnameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SelectFormerOwnerRow : System.Data.DataRow {
            
            private SelectFormerOwnerDataTable tableSelectFormerOwner;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectFormerOwnerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectFormerOwner = ((SelectFormerOwnerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nom {
                get {
                    return ((string)(this[this.tableSelectFormerOwner.nomColumn]));
                }
                set {
                    this[this.tableSelectFormerOwner.nomColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column1 {
                get {
                    try {
                        return ((string)(this[this.tableSelectFormerOwner.Column1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Column1\' in table \'SelectFormerOwner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectFormerOwner.Column1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double former_land_size {
                get {
                    return ((double)(this[this.tableSelectFormerOwner.former_land_sizeColumn]));
                }
                set {
                    this[this.tableSelectFormerOwner.former_land_sizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn1Null() {
                return this.IsNull(this.tableSelectFormerOwner.Column1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn1Null() {
                this[this.tableSelectFormerOwner.Column1Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SelectSuperVisorRow : System.Data.DataRow {
            
            private SelectSuperVisorDataTable tableSelectSuperVisor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectSuperVisorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectSuperVisor = ((SelectSuperVisorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No_SUPERVISOR {
                get {
                    return ((int)(this[this.tableSelectSuperVisor.No_SUPERVISORColumn]));
                }
                set {
                    this[this.tableSelectSuperVisor.No_SUPERVISORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableSelectSuperVisor.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'SelectSuperVisor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectSuperVisor.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableSelectSuperVisor.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableSelectSuperVisor.FullNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CellsRow : System.Data.DataRow {
            
            private CellsDataTable tableCells;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CellsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCells = ((CellsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CellID {
                get {
                    return ((short)(this[this.tableCells.CellIDColumn]));
                }
                set {
                    this[this.tableCells.CellIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_secteur {
                get {
                    return ((int)(this[this.tableCells.id_secteurColumn]));
                }
                set {
                    this[this.tableCells.id_secteurColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellName {
                get {
                    return ((string)(this[this.tableCells.CellNameColumn]));
                }
                set {
                    this[this.tableCells.CellNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DISTRICT_LandRow : System.Data.DataRow {
            
            private DISTRICT_LandDataTable tableDISTRICT_Land;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DISTRICT_LandRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDISTRICT_Land = ((DISTRICT_LandDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_DISTRICT {
                get {
                    return ((int)(this[this.tableDISTRICT_Land.ID_DISTRICTColumn]));
                }
                set {
                    this[this.tableDISTRICT_Land.ID_DISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_PROVINCE {
                get {
                    return ((int)(this[this.tableDISTRICT_Land.ID_PROVINCEColumn]));
                }
                set {
                    this[this.tableDISTRICT_Land.ID_PROVINCEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_DISTRICT {
                get {
                    return ((string)(this[this.tableDISTRICT_Land.DESCRIPTION_DISTRICTColumn]));
                }
                set {
                    this[this.tableDISTRICT_Land.DESCRIPTION_DISTRICTColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SECTEUR_LandRow : System.Data.DataRow {
            
            private SECTEUR_LandDataTable tableSECTEUR_Land;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SECTEUR_LandRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSECTEUR_Land = ((SECTEUR_LandDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_SECTEUR {
                get {
                    return ((int)(this[this.tableSECTEUR_Land.ID_SECTEURColumn]));
                }
                set {
                    this[this.tableSECTEUR_Land.ID_SECTEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_DISTRICT {
                get {
                    return ((int)(this[this.tableSECTEUR_Land.ID_DISTRICTColumn]));
                }
                set {
                    this[this.tableSECTEUR_Land.ID_DISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_SECTEUR {
                get {
                    return ((string)(this[this.tableSECTEUR_Land.DESCRIPTION_SECTEURColumn]));
                }
                set {
                    this[this.tableSECTEUR_Land.DESCRIPTION_SECTEURColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Cells_LandRow : System.Data.DataRow {
            
            private Cells_LandDataTable tableCells_Land;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Cells_LandRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCells_Land = ((Cells_LandDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CellID {
                get {
                    return ((short)(this[this.tableCells_Land.CellIDColumn]));
                }
                set {
                    this[this.tableCells_Land.CellIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id_secteur {
                get {
                    return ((int)(this[this.tableCells_Land.id_secteurColumn]));
                }
                set {
                    this[this.tableCells_Land.id_secteurColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellName {
                get {
                    return ((string)(this[this.tableCells_Land.CellNameColumn]));
                }
                set {
                    this[this.tableCells_Land.CellNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SelectOneFORMEROWNERRow : System.Data.DataRow {
            
            private SelectOneFORMEROWNERDataTable tableSelectOneFORMEROWNER;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelectOneFORMEROWNERRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectOneFORMEROWNER = ((SelectOneFORMEROWNERDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_FORMER_OWNER {
                get {
                    return ((int)(this[this.tableSelectOneFORMEROWNER.ID_FORMER_OWNERColumn]));
                }
                set {
                    this[this.tableSelectOneFORMEROWNER.ID_FORMER_OWNERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM {
                get {
                    return ((string)(this[this.tableSelectOneFORMEROWNER.NOMColumn]));
                }
                set {
                    this[this.tableSelectOneFORMEROWNER.NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRENOM {
                get {
                    try {
                        return ((string)(this[this.tableSelectOneFORMEROWNER.PRENOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRENOM\' in table \'SelectOneFORMEROWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectOneFORMEROWNER.PRENOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AUTRE_NOM {
                get {
                    try {
                        return ((string)(this[this.tableSelectOneFORMEROWNER.AUTRE_NOMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AUTRE_NOM\' in table \'SelectOneFORMEROWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectOneFORMEROWNER.AUTRE_NOMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FORMER_LAND_SIZE {
                get {
                    return ((double)(this[this.tableSelectOneFORMEROWNER.FORMER_LAND_SIZEColumn]));
                }
                set {
                    this[this.tableSelectOneFORMEROWNER.FORMER_LAND_SIZEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRENOMNull() {
                return this.IsNull(this.tableSelectOneFORMEROWNER.PRENOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRENOMNull() {
                this[this.tableSelectOneFORMEROWNER.PRENOMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAUTRE_NOMNull() {
                return this.IsNull(this.tableSelectOneFORMEROWNER.AUTRE_NOMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAUTRE_NOMNull() {
                this[this.tableSelectOneFORMEROWNER.AUTRE_NOMColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistinctCellsRow : System.Data.DataRow {
            
            private DistinctCellsDataTable tableDistinctCells;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistinctCellsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistinctCells = ((DistinctCellsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CELLULE {
                get {
                    return ((int)(this[this.tableDistinctCells.CELLULEColumn]));
                }
                set {
                    this[this.tableDistinctCells.CELLULEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CellName {
                get {
                    return ((string)(this[this.tableDistinctCells.CellNameColumn]));
                }
                set {
                    this[this.tableDistinctCells.CellNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BeneficiaryCategoryRow : System.Data.DataRow {
            
            private BeneficiaryCategoryDataTable tableBeneficiaryCategory;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BeneficiaryCategoryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBeneficiaryCategory = ((BeneficiaryCategoryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcategory {
                get {
                    return ((int)(this[this.tableBeneficiaryCategory.idcategoryColumn]));
                }
                set {
                    this[this.tableBeneficiaryCategory.idcategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tableBeneficiaryCategory.descriptionColumn]));
                }
                set {
                    this[this.tableBeneficiaryCategory.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tableBeneficiaryCategory.commentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'comment\' in table \'BeneficiaryCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBeneficiaryCategory.commentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tableBeneficiaryCategory.commentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tableBeneficiaryCategory.commentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormerOwnerCategoryRow : System.Data.DataRow {
            
            private FormerOwnerCategoryDataTable tableFormerOwnerCategory;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormerOwnerCategoryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormerOwnerCategory = ((FormerOwnerCategoryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcategory {
                get {
                    return ((int)(this[this.tableFormerOwnerCategory.idcategoryColumn]));
                }
                set {
                    this[this.tableFormerOwnerCategory.idcategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tableFormerOwnerCategory.descriptionColumn]));
                }
                set {
                    this[this.tableFormerOwnerCategory.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tableFormerOwnerCategory.commentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'comment\' in table \'FormerOwnerCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormerOwnerCategory.commentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tableFormerOwnerCategory.commentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tableFormerOwnerCategory.commentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BOUNDARY_DETAILSRowChangeEvent : System.EventArgs {
            
            private BOUNDARY_DETAILSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOUNDARY_DETAILSRowChangeEvent(BOUNDARY_DETAILSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOUNDARY_DETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CATEG_SUPERVISORRowChangeEvent : System.EventArgs {
            
            private CATEG_SUPERVISORRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEG_SUPERVISORRowChangeEvent(CATEG_SUPERVISORRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEG_SUPERVISORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DISTRICTRowChangeEvent : System.EventArgs {
            
            private DISTRICTRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICTRowChangeEvent(DISTRICTRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LAND_INFORowChangeEvent : System.EventArgs {
            
            private LAND_INFORow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_INFORowChangeEvent(LAND_INFORow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_INFORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROVINCERowChangeEvent : System.EventArgs {
            
            private PROVINCERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVINCERowChangeEvent(PROVINCERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROVINCERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SECTEURRowChangeEvent : System.EventArgs {
            
            private SECTEURRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEURRowChangeEvent(SECTEURRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEURRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SUPERVISORRowChangeEvent : System.EventArgs {
            
            private SUPERVISORRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPERVISORRowChangeEvent(SUPERVISORRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPERVISORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Select_PasswordRowChangeEvent : System.EventArgs {
            
            private Select_PasswordRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_PasswordRowChangeEvent(Select_PasswordRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_PasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserTablesRowChangeEvent : System.EventArgs {
            
            private UserTablesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserTablesRowChangeEvent(UserTablesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserTablesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BENEFICIARY_BY_LOCATIONRowChangeEvent : System.EventArgs {
            
            private BENEFICIARY_BY_LOCATIONRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BENEFICIARY_BY_LOCATIONRowChangeEvent(BENEFICIARY_BY_LOCATIONRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BENEFICIARY_BY_LOCATIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FORMER_OWNERSRowChangeEvent : System.EventArgs {
            
            private FORMER_OWNERSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORMER_OWNERSRowChangeEvent(FORMER_OWNERSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORMER_OWNERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Select_Max_NumRefRowChangeEvent : System.EventArgs {
            
            private Select_Max_NumRefRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_Max_NumRefRowChangeEvent(Select_Max_NumRefRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_Max_NumRefRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LAND_OWNERRowChangeEvent : System.EventArgs {
            
            private LAND_OWNERRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_OWNERRowChangeEvent(LAND_OWNERRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAND_OWNERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SelectAllInfoRowChangeEvent : System.EventArgs {
            
            private SelectAllInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectAllInfoRowChangeEvent(SelectAllInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectAllInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FindByNameRowChangeEvent : System.EventArgs {
            
            private FindByNameRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindByNameRowChangeEvent(FindByNameRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FindByNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnCheckedLandRowChangeEvent : System.EventArgs {
            
            private UnCheckedLandRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnCheckedLandRowChangeEvent(UnCheckedLandRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnCheckedLandRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SelectUserInfoRowChangeEvent : System.EventArgs {
            
            private SelectUserInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectUserInfoRowChangeEvent(SelectUserInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectUserInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistinctDistrictRowChangeEvent : System.EventArgs {
            
            private DistinctDistrictRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctDistrictRowChangeEvent(DistinctDistrictRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctDistrictRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistinctSectorRowChangeEvent : System.EventArgs {
            
            private DistinctSectorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctSectorRowChangeEvent(DistinctSectorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctSectorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SelectFormerOwnerDistributionRowChangeEvent : System.EventArgs {
            
            private SelectFormerOwnerDistributionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDistributionRowChangeEvent(SelectFormerOwnerDistributionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerDistributionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SelectFormerOwnerRowChangeEvent : System.EventArgs {
            
            private SelectFormerOwnerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerRowChangeEvent(SelectFormerOwnerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectFormerOwnerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SelectSuperVisorRowChangeEvent : System.EventArgs {
            
            private SelectSuperVisorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectSuperVisorRowChangeEvent(SelectSuperVisorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectSuperVisorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CellsRowChangeEvent : System.EventArgs {
            
            private CellsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRowChangeEvent(CellsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CellsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DISTRICT_LandRowChangeEvent : System.EventArgs {
            
            private DISTRICT_LandRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICT_LandRowChangeEvent(DISTRICT_LandRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DISTRICT_LandRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SECTEUR_LandRowChangeEvent : System.EventArgs {
            
            private SECTEUR_LandRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEUR_LandRowChangeEvent(SECTEUR_LandRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SECTEUR_LandRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Cells_LandRowChangeEvent : System.EventArgs {
            
            private Cells_LandRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_LandRowChangeEvent(Cells_LandRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Cells_LandRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SelectOneFORMEROWNERRowChangeEvent : System.EventArgs {
            
            private SelectOneFORMEROWNERRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectOneFORMEROWNERRowChangeEvent(SelectOneFORMEROWNERRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SelectOneFORMEROWNERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistinctCellsRowChangeEvent : System.EventArgs {
            
            private DistinctCellsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctCellsRowChangeEvent(DistinctCellsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistinctCellsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BeneficiaryCategoryRowChangeEvent : System.EventArgs {
            
            private BeneficiaryCategoryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BeneficiaryCategoryRowChangeEvent(BeneficiaryCategoryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BeneficiaryCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormerOwnerCategoryRowChangeEvent : System.EventArgs {
            
            private FormerOwnerCategoryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormerOwnerCategoryRowChangeEvent(FormerOwnerCategoryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormerOwnerCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace LAND_COMMITEE.LAND_COMMITEE_Data_SetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BOUNDARY_DETAILSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BOUNDARY_DETAILSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BOUNDARY_DETAILS";
            tableMapping.ColumnMappings.Add("No_REFERENCE", "No_REFERENCE");
            tableMapping.ColumnMappings.Add("LAND_No", "LAND_No");
            tableMapping.ColumnMappings.Add("WAY_POINTS", "WAY_POINTS");
            tableMapping.ColumnMappings.Add("NORTHING_Y", "NORTHING_Y");
            tableMapping.ColumnMappings.Add("EASTING_X", "EASTING_X");
            tableMapping.ColumnMappings.Add("FROM_WAYPOINT", "FROM_WAYPOINT");
            tableMapping.ColumnMappings.Add("TO_WAYPOINT", "TO_WAYPOINT");
            tableMapping.ColumnMappings.Add("DISTANCE", "DISTANCE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[BOUNDARY_DETAILS] WHERE (([No_REFERENCE] = @Original_No_REFERENCE) AND ([LAND_No] = @Original_LAND_No) AND ([WAY_POINTS] = @Original_WAY_POINTS) AND ((@IsNull_NORTHING_Y = 1 AND [NORTHING_Y] IS NULL) OR ([NORTHING_Y] = @Original_NORTHING_Y)) AND ((@IsNull_EASTING_X = 1 AND [EASTING_X] IS NULL) OR ([EASTING_X] = @Original_EASTING_X)) AND ([FROM_WAYPOINT] = @Original_FROM_WAYPOINT) AND ([TO_WAYPOINT] = @Original_TO_WAYPOINT) AND ([DISTANCE] = @Original_DISTANCE))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_REFERENCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_REFERENCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WAY_POINTS", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WAY_POINTS", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_NORTHING_Y", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NORTHING_Y", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NORTHING_Y", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NORTHING_Y", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EASTING_X", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EASTING_X", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EASTING_X", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EASTING_X", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FROM_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FROM_WAYPOINT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TO_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TO_WAYPOINT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DISTANCE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTANCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[BOUNDARY_DETAILS] ([LAND_No], [WAY_POINTS], [NORTHING_Y], [EASTING_X], [FROM_WAYPOINT], [TO_WAYPOINT], [DISTANCE]) VALUES (@LAND_No, @WAY_POINTS, @NORTHING_Y, @EASTING_X, @FROM_WAYPOINT, @TO_WAYPOINT, @DISTANCE);
SELECT No_REFERENCE, LAND_No, WAY_POINTS, NORTHING_Y, EASTING_X, FROM_WAYPOINT, TO_WAYPOINT, DISTANCE FROM BOUNDARY_DETAILS WHERE (No_REFERENCE = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WAY_POINTS", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WAY_POINTS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NORTHING_Y", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NORTHING_Y", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EASTING_X", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EASTING_X", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FROM_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FROM_WAYPOINT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TO_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TO_WAYPOINT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DISTANCE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTANCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[BOUNDARY_DETAILS] SET [LAND_No] = @LAND_No, [WAY_POINTS] = @WAY_POINTS, [NORTHING_Y] = @NORTHING_Y, [EASTING_X] = @EASTING_X, [FROM_WAYPOINT] = @FROM_WAYPOINT, [TO_WAYPOINT] = @TO_WAYPOINT, [DISTANCE] = @DISTANCE WHERE (([No_REFERENCE] = @Original_No_REFERENCE) AND ([LAND_No] = @Original_LAND_No) AND ([WAY_POINTS] = @Original_WAY_POINTS) AND ((@IsNull_NORTHING_Y = 1 AND [NORTHING_Y] IS NULL) OR ([NORTHING_Y] = @Original_NORTHING_Y)) AND ((@IsNull_EASTING_X = 1 AND [EASTING_X] IS NULL) OR ([EASTING_X] = @Original_EASTING_X)) AND ([FROM_WAYPOINT] = @Original_FROM_WAYPOINT) AND ([TO_WAYPOINT] = @Original_TO_WAYPOINT) AND ([DISTANCE] = @Original_DISTANCE));
SELECT No_REFERENCE, LAND_No, WAY_POINTS, NORTHING_Y, EASTING_X, FROM_WAYPOINT, TO_WAYPOINT, DISTANCE FROM BOUNDARY_DETAILS WHERE (No_REFERENCE = @No_REFERENCE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WAY_POINTS", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WAY_POINTS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NORTHING_Y", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NORTHING_Y", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EASTING_X", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EASTING_X", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FROM_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FROM_WAYPOINT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TO_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TO_WAYPOINT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DISTANCE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTANCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_REFERENCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_REFERENCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WAY_POINTS", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WAY_POINTS", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_NORTHING_Y", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NORTHING_Y", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NORTHING_Y", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NORTHING_Y", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EASTING_X", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EASTING_X", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EASTING_X", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EASTING_X", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FROM_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FROM_WAYPOINT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TO_WAYPOINT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TO_WAYPOINT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DISTANCE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTANCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@No_REFERENCE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "No_REFERENCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT No_REFERENCE, LAND_No, WAY_POINTS, NORTHING_Y, EASTING_X, FROM_WAYPOINT, T" +
                "O_WAYPOINT, DISTANCE FROM dbo.BOUNDARY_DETAILS WHERE No_REFERENCE=0";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT  No_REFERENCE, LAND_No, WAY_POINTS, NORTHING_Y, EASTING_X, FROM_WAYPOINT, " +
                "TO_WAYPOINT, DISTANCE\r\nFROM     BOUNDARY_DETAILS\r\nWHERE  (LAND_No = @LAND_No)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_No", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable dataTable = new LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_LAND_NO(LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable dataTable, string LAND_No) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((LAND_No == null)) {
                throw new System.ArgumentNullException("LAND_No");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(LAND_No));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable GetDataBy_LAND_NO(string LAND_No) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((LAND_No == null)) {
                throw new System.ArgumentNullException("LAND_No");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(LAND_No));
            }
            LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable dataTable = new LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.BOUNDARY_DETAILSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "BOUNDARY_DETAILS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_No_REFERENCE, string Original_LAND_No, int Original_WAY_POINTS, string Original_NORTHING_Y, string Original_EASTING_X, int Original_FROM_WAYPOINT, int Original_TO_WAYPOINT, double Original_DISTANCE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_No_REFERENCE));
            if ((Original_LAND_No == null)) {
                throw new System.ArgumentNullException("Original_LAND_No");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LAND_No));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_WAY_POINTS));
            if ((Original_NORTHING_Y == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_NORTHING_Y));
            }
            if ((Original_EASTING_X == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_EASTING_X));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_FROM_WAYPOINT));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_TO_WAYPOINT));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((double)(Original_DISTANCE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string LAND_No, int WAY_POINTS, string NORTHING_Y, string EASTING_X, int FROM_WAYPOINT, int TO_WAYPOINT, double DISTANCE) {
            if ((LAND_No == null)) {
                throw new System.ArgumentNullException("LAND_No");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(LAND_No));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(WAY_POINTS));
            if ((NORTHING_Y == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NORTHING_Y));
            }
            if ((EASTING_X == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(EASTING_X));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(FROM_WAYPOINT));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(TO_WAYPOINT));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(DISTANCE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LAND_No, 
                    int WAY_POINTS, 
                    string NORTHING_Y, 
                    string EASTING_X, 
                    int FROM_WAYPOINT, 
                    int TO_WAYPOINT, 
                    double DISTANCE, 
                    int Original_No_REFERENCE, 
                    string Original_LAND_No, 
                    int Original_WAY_POINTS, 
                    string Original_NORTHING_Y, 
                    string Original_EASTING_X, 
                    int Original_FROM_WAYPOINT, 
                    int Original_TO_WAYPOINT, 
                    double Original_DISTANCE, 
                    int No_REFERENCE) {
            if ((LAND_No == null)) {
                throw new System.ArgumentNullException("LAND_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LAND_No));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(WAY_POINTS));
            if ((NORTHING_Y == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NORTHING_Y));
            }
            if ((EASTING_X == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(EASTING_X));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(FROM_WAYPOINT));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(TO_WAYPOINT));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(DISTANCE));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_No_REFERENCE));
            if ((Original_LAND_No == null)) {
                throw new System.ArgumentNullException("Original_LAND_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_LAND_No));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_WAY_POINTS));
            if ((Original_NORTHING_Y == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_NORTHING_Y));
            }
            if ((Original_EASTING_X == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_EASTING_X));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_FROM_WAYPOINT));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_TO_WAYPOINT));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(Original_DISTANCE));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(No_REFERENCE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CATEG_SUPERVISORTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CATEG_SUPERVISORTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CATEG_SUPERVISOR";
            tableMapping.ColumnMappings.Add("No_RANK_PROFESSIONAL", "No_RANK_PROFESSIONAL");
            tableMapping.ColumnMappings.Add("RANK_PROFESSIONAL", "RANK_PROFESSIONAL");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CATEG_SUPERVISOR] WHERE (([idcategory] = @Original_No_RANK_PRO" +
                "FESSIONAL) AND ([description] = @Original_RANK_PROFESSIONAL))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_RANK_PROFESSIONAL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_RANK_PROFESSIONAL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RANK_PROFESSIONAL", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RANK_PROFESSIONAL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CATEG_SUPERVISOR] ([description]) VALUES (@RANK_PROFESSIONAL);" +
                "\r\nSELECT idcategory AS No_RANK_PROFESSIONAL, description AS RANK_PROFESSIONAL FR" +
                "OM CATEG_SUPERVISOR WHERE (idcategory = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RANK_PROFESSIONAL", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RANK_PROFESSIONAL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CATEG_SUPERVISOR] SET [description] = @RANK_PROFESSIONAL WHERE (([idcategory] = @Original_No_RANK_PROFESSIONAL) AND ([description] = @Original_RANK_PROFESSIONAL));
SELECT idcategory AS No_RANK_PROFESSIONAL, description AS RANK_PROFESSIONAL FROM CATEG_SUPERVISOR WHERE (idcategory = @idcategory)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RANK_PROFESSIONAL", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RANK_PROFESSIONAL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_RANK_PROFESSIONAL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_RANK_PROFESSIONAL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RANK_PROFESSIONAL", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RANK_PROFESSIONAL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idcategory", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "No_RANK_PROFESSIONAL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idcategory as No_RANK_PROFESSIONAL, description as RANK_PROFESSIONAL FROM " +
                "dbo.CATEG_SUPERVISOR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.CATEG_SUPERVISORDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.CATEG_SUPERVISORDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.CATEG_SUPERVISORDataTable dataTable = new LAND_COMMITEE_Data_Set.CATEG_SUPERVISORDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.CATEG_SUPERVISORDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "CATEG_SUPERVISOR");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DISTRICT_TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DISTRICT_TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DISTRICT";
            tableMapping.ColumnMappings.Add("ID_DISTRICT", "ID_DISTRICT");
            tableMapping.ColumnMappings.Add("ID_PROVINCE", "ID_PROVINCE");
            tableMapping.ColumnMappings.Add("DESCRIPTION_DISTRICT", "DESCRIPTION_DISTRICT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [DISTRICT] WHERE (([ID_DISTRICT] = @Original_ID_DISTRICT) AND ([ID_PR" +
                "OVINCE] = @Original_ID_PROVINCE) AND ([DESCRIPTION_DISTRICT] = @Original_DESCRIP" +
                "TION_DISTRICT))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [DISTRICT] ([ID_DISTRICT], [ID_PROVINCE], [DESCRIPTION_DISTRICT]) VAL" +
                "UES (@ID_DISTRICT, @ID_PROVINCE, @DESCRIPTION_DISTRICT);\r\nSELECT ID_DISTRICT, ID" +
                "_PROVINCE, DESCRIPTION_DISTRICT FROM DISTRICT WHERE (ID_DISTRICT = @ID_DISTRICT)" +
                "";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [DISTRICT] SET [ID_DISTRICT] = @ID_DISTRICT, [ID_PROVINCE] = @ID_PROVINCE, [DESCRIPTION_DISTRICT] = @DESCRIPTION_DISTRICT WHERE (([ID_DISTRICT] = @Original_ID_DISTRICT) AND ([ID_PROVINCE] = @Original_ID_PROVINCE) AND ([DESCRIPTION_DISTRICT] = @Original_DESCRIPTION_DISTRICT));
SELECT ID_DISTRICT, ID_PROVINCE, DESCRIPTION_DISTRICT FROM DISTRICT WHERE (ID_DISTRICT = @ID_DISTRICT)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  ID_DISTRICT, ID_PROVINCE, DESCRIPTION_DISTRICT\r\nFROM     DISTRICT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT  ID_DISTRICT, ID_PROVINCE, DESCRIPTION_DISTRICT\r\nFROM     DISTRICT\r\nWHERE " +
                " (ID_PROVINCE = @prov)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@prov", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.DISTRICTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.DISTRICTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.DISTRICTDataTable dataTable = new LAND_COMMITEE_Data_Set.DISTRICTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_PROVINCE(LAND_COMMITEE_Data_Set.DISTRICTDataTable dataTable, int prov) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(prov));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual LAND_COMMITEE_Data_Set.DISTRICTDataTable GetDataBy_PROVINCE(int prov) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(prov));
            LAND_COMMITEE_Data_Set.DISTRICTDataTable dataTable = new LAND_COMMITEE_Data_Set.DISTRICTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.DISTRICTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "DISTRICT");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_DISTRICT, int Original_ID_PROVINCE, string Original_DESCRIPTION_DISTRICT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_DISTRICT));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_PROVINCE));
            if ((Original_DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DESCRIPTION_DISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_DISTRICT, int ID_PROVINCE, string DESCRIPTION_DISTRICT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_DISTRICT));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ID_PROVINCE));
            if ((DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION_DISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_DISTRICT, int ID_PROVINCE, string DESCRIPTION_DISTRICT, int Original_ID_DISTRICT, int Original_ID_PROVINCE, string Original_DESCRIPTION_DISTRICT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_DISTRICT));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ID_PROVINCE));
            if ((DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION_DISTRICT));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_DISTRICT));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_PROVINCE));
            if ((Original_DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_DESCRIPTION_DISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LAND_INFOTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAND_INFOTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LAND_INFO";
            tableMapping.ColumnMappings.Add("LAND_No", "LAND_No");
            tableMapping.ColumnMappings.Add("PROVINCE", "PROVINCE");
            tableMapping.ColumnMappings.Add("DISTRICT", "DISTRICT");
            tableMapping.ColumnMappings.Add("SECTOR", "SECTOR");
            tableMapping.ColumnMappings.Add("CELLULE", "CELLULE");
            tableMapping.ColumnMappings.Add("USAGE", "USAGE");
            tableMapping.ColumnMappings.Add("LAND_SIZE", "LAND_SIZE");
            tableMapping.ColumnMappings.Add("No_SUPERVISOR", "No_SUPERVISOR");
            tableMapping.ColumnMappings.Add("FORMER_OWNER", "FORMER_OWNER");
            tableMapping.ColumnMappings.Add("NumReference", "NumReference");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [LAND_INFO] WHERE (([LAND_No] = @Original_LAND_No) AND ([PROVINCE] = @Original_PROVINCE) AND ([DISTRICT] = @Original_DISTRICT) AND ([SECTOR] = @Original_SECTOR) AND ([CELLULE] = @Original_CELLULE) AND ([USAGE] = @Original_USAGE) AND ([LAND_SIZE] = @Original_LAND_SIZE) AND ([No_SUPERVISOR] = @Original_No_SUPERVISOR) AND ([FORMER_OWNER] = @Original_FORMER_OWNER) AND ([NumReference] = @Original_NumReference))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SECTOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTOR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CELLULE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_USAGE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "USAGE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_SIZE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_SUPERVISOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_OWNER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [LAND_INFO] ([LAND_No], [PROVINCE], [DISTRICT], [SECTOR], [CELLULE], [USAGE], [LAND_SIZE], [No_SUPERVISOR], [FORMER_OWNER], [NumReference]) VALUES (@LAND_No, @PROVINCE, @DISTRICT, @SECTOR, @CELLULE, @USAGE, @LAND_SIZE, @No_SUPERVISOR, @FORMER_OWNER, @NumReference);
SELECT LAND_No, PROVINCE, DISTRICT, SECTOR, CELLULE, USAGE, LAND_SIZE, No_SUPERVISOR, FORMER_OWNER, NumReference FROM LAND_INFO WHERE (LAND_No = @LAND_No)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SECTOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTOR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CELLULE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@USAGE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "USAGE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_SIZE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@No_SUPERVISOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_OWNER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [LAND_INFO] SET [LAND_No] = @LAND_No, [PROVINCE] = @PROVINCE, [DISTRICT] = @DISTRICT, [SECTOR] = @SECTOR, [CELLULE] = @CELLULE, [USAGE] = @USAGE, [LAND_SIZE] = @LAND_SIZE, [No_SUPERVISOR] = @No_SUPERVISOR, [FORMER_OWNER] = @FORMER_OWNER, [NumReference] = @NumReference WHERE (([LAND_No] = @Original_LAND_No) AND ([PROVINCE] = @Original_PROVINCE) AND ([DISTRICT] = @Original_DISTRICT) AND ([SECTOR] = @Original_SECTOR) AND ([CELLULE] = @Original_CELLULE) AND ([USAGE] = @Original_USAGE) AND ([LAND_SIZE] = @Original_LAND_SIZE) AND ([No_SUPERVISOR] = @Original_No_SUPERVISOR) AND ([FORMER_OWNER] = @Original_FORMER_OWNER) AND ([NumReference] = @Original_NumReference));
SELECT LAND_No, PROVINCE, DISTRICT, SECTOR, CELLULE, USAGE, LAND_SIZE, No_SUPERVISOR, FORMER_OWNER, NumReference FROM LAND_INFO WHERE (LAND_No = @LAND_No)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SECTOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTOR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CELLULE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@USAGE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "USAGE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_SIZE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@No_SUPERVISOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_OWNER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SECTOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTOR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CELLULE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_USAGE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "USAGE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_SIZE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_SUPERVISOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_OWNER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  LAND_No, PROVINCE, DISTRICT, SECTOR, CELLULE, USAGE, LAND_SIZE, No_SUPERV" +
                "ISOR, FORMER_OWNER, NumReference\r\nFROM     LAND_INFO";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT CELLULE, DISTRICT, FORMER_OWNER, LAND_No, LAND_SIZE, No_SUPERVISOR, NumRef" +
                "erence, PROVINCE, SECTOR, USAGE FROM LAND_INFO WHERE (LAND_No = @LAND_NO)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_NO", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.LAND_INFODataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.LAND_INFODataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.LAND_INFODataTable dataTable = new LAND_COMMITEE_Data_Set.LAND_INFODataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_LAND_NO(LAND_COMMITEE_Data_Set.LAND_INFODataTable dataTable, string LAND_NO) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((LAND_NO == null)) {
                throw new System.ArgumentNullException("LAND_NO");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(LAND_NO));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual LAND_COMMITEE_Data_Set.LAND_INFODataTable GetDataBy_LAND_NO(string LAND_NO) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((LAND_NO == null)) {
                throw new System.ArgumentNullException("LAND_NO");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(LAND_NO));
            }
            LAND_COMMITEE_Data_Set.LAND_INFODataTable dataTable = new LAND_COMMITEE_Data_Set.LAND_INFODataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.LAND_INFODataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "LAND_INFO");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_LAND_No, string Original_PROVINCE, int Original_DISTRICT, int Original_SECTOR, int Original_CELLULE, string Original_USAGE, double Original_LAND_SIZE, int Original_No_SUPERVISOR, int Original_FORMER_OWNER, int Original_NumReference) {
            if ((Original_LAND_No == null)) {
                throw new System.ArgumentNullException("Original_LAND_No");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_LAND_No));
            }
            if ((Original_PROVINCE == null)) {
                throw new System.ArgumentNullException("Original_PROVINCE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PROVINCE));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_DISTRICT));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_SECTOR));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_CELLULE));
            if ((Original_USAGE == null)) {
                throw new System.ArgumentNullException("Original_USAGE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_USAGE));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_LAND_SIZE));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_No_SUPERVISOR));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_FORMER_OWNER));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_NumReference));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string LAND_No, string PROVINCE, int DISTRICT, int SECTOR, int CELLULE, string USAGE, double LAND_SIZE, int No_SUPERVISOR, int FORMER_OWNER, int NumReference) {
            if ((LAND_No == null)) {
                throw new System.ArgumentNullException("LAND_No");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(LAND_No));
            }
            if ((PROVINCE == null)) {
                throw new System.ArgumentNullException("PROVINCE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PROVINCE));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DISTRICT));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(SECTOR));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(CELLULE));
            if ((USAGE == null)) {
                throw new System.ArgumentNullException("USAGE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(USAGE));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(LAND_SIZE));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(No_SUPERVISOR));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(FORMER_OWNER));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(NumReference));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LAND_No, 
                    string PROVINCE, 
                    int DISTRICT, 
                    int SECTOR, 
                    int CELLULE, 
                    string USAGE, 
                    double LAND_SIZE, 
                    int No_SUPERVISOR, 
                    int FORMER_OWNER, 
                    int NumReference, 
                    string Original_LAND_No, 
                    string Original_PROVINCE, 
                    int Original_DISTRICT, 
                    int Original_SECTOR, 
                    int Original_CELLULE, 
                    string Original_USAGE, 
                    double Original_LAND_SIZE, 
                    int Original_No_SUPERVISOR, 
                    int Original_FORMER_OWNER, 
                    int Original_NumReference) {
            if ((LAND_No == null)) {
                throw new System.ArgumentNullException("LAND_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LAND_No));
            }
            if ((PROVINCE == null)) {
                throw new System.ArgumentNullException("PROVINCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PROVINCE));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DISTRICT));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(SECTOR));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(CELLULE));
            if ((USAGE == null)) {
                throw new System.ArgumentNullException("USAGE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(USAGE));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(LAND_SIZE));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(No_SUPERVISOR));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(FORMER_OWNER));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(NumReference));
            if ((Original_LAND_No == null)) {
                throw new System.ArgumentNullException("Original_LAND_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_LAND_No));
            }
            if ((Original_PROVINCE == null)) {
                throw new System.ArgumentNullException("Original_PROVINCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_PROVINCE));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_DISTRICT));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_SECTOR));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_CELLULE));
            if ((Original_USAGE == null)) {
                throw new System.ArgumentNullException("Original_USAGE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_USAGE));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(Original_LAND_SIZE));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_No_SUPERVISOR));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_FORMER_OWNER));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_NumReference));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PROVINCE_TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PROVINCE_TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PROVINCE";
            tableMapping.ColumnMappings.Add("ID_PROVINCE", "ID_PROVINCE");
            tableMapping.ColumnMappings.Add("DESCRIPTION_PROVINCE", "DESCRIPTION_PROVINCE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [PROVINCE] WHERE (([ID_PROVINCE] = @Original_ID_PROVINCE) AND ([DESCR" +
                "IPTION_PROVINCE] = @Original_DESCRIPTION_PROVINCE))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [PROVINCE] ([DESCRIPTION_PROVINCE]) VALUES (@DESCRIPTION_PROVINCE);\r\n" +
                "SELECT ID_PROVINCE, DESCRIPTION_PROVINCE FROM PROVINCE WHERE (ID_PROVINCE = SCOP" +
                "E_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [PROVINCE] SET [DESCRIPTION_PROVINCE] = @DESCRIPTION_PROVINCE WHERE (([ID_PROVINCE] = @Original_ID_PROVINCE) AND ([DESCRIPTION_PROVINCE] = @Original_DESCRIPTION_PROVINCE));
SELECT ID_PROVINCE, DESCRIPTION_PROVINCE FROM PROVINCE WHERE (ID_PROVINCE = @ID_PROVINCE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_PROVINCE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_PROVINCE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  ID_PROVINCE, DESCRIPTION_PROVINCE\r\nFROM     PROVINCE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.PROVINCEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.PROVINCEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.PROVINCEDataTable dataTable = new LAND_COMMITEE_Data_Set.PROVINCEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.PROVINCEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "PROVINCE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_PROVINCE, string Original_DESCRIPTION_PROVINCE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_PROVINCE));
            if ((Original_DESCRIPTION_PROVINCE == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_PROVINCE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DESCRIPTION_PROVINCE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string DESCRIPTION_PROVINCE) {
            if ((DESCRIPTION_PROVINCE == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_PROVINCE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(DESCRIPTION_PROVINCE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DESCRIPTION_PROVINCE, int Original_ID_PROVINCE, string Original_DESCRIPTION_PROVINCE, int ID_PROVINCE) {
            if ((DESCRIPTION_PROVINCE == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_PROVINCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(DESCRIPTION_PROVINCE));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_ID_PROVINCE));
            if ((Original_DESCRIPTION_PROVINCE == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_PROVINCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_DESCRIPTION_PROVINCE));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ID_PROVINCE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SECTEURTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SECTEURTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SECTEUR";
            tableMapping.ColumnMappings.Add("ID_SECTEUR", "ID_SECTEUR");
            tableMapping.ColumnMappings.Add("ID_DISTRICT", "ID_DISTRICT");
            tableMapping.ColumnMappings.Add("DESCRIPTION_SECTEUR", "DESCRIPTION_SECTEUR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SECTEUR] WHERE (([ID_SECTEUR] = @Original_ID_SECTEUR) AND ([ID" +
                "_DISTRICT] = @Original_ID_DISTRICT) AND ([DESCRIPTION_SECTEUR] = @Original_DESCR" +
                "IPTION_SECTEUR))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SECTEUR] ([ID_SECTEUR], [ID_DISTRICT], [DESCRIPTION_SECTEUR]) " +
                "VALUES (@ID_SECTEUR, @ID_DISTRICT, @DESCRIPTION_SECTEUR);\r\nSELECT ID_SECTEUR, ID" +
                "_DISTRICT, DESCRIPTION_SECTEUR FROM SECTEUR WHERE (ID_SECTEUR = @ID_SECTEUR)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SECTEUR] SET [ID_SECTEUR] = @ID_SECTEUR, [ID_DISTRICT] = @ID_DISTRICT, [DESCRIPTION_SECTEUR] = @DESCRIPTION_SECTEUR WHERE (([ID_SECTEUR] = @Original_ID_SECTEUR) AND ([ID_DISTRICT] = @Original_ID_DISTRICT) AND ([DESCRIPTION_SECTEUR] = @Original_DESCRIPTION_SECTEUR));
SELECT ID_SECTEUR, ID_DISTRICT, DESCRIPTION_SECTEUR FROM SECTEUR WHERE (ID_SECTEUR = @ID_SECTEUR)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_SECTEUR, ID_DISTRICT, DESCRIPTION_SECTEUR FROM dbo.SECTEUR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT  SECTEUR.ID_SECTEUR, SECTEUR.ID_DISTRICT, SECTEUR.DESCRIPTION_SECTEUR\r\nFRO" +
                "M     SECTEUR INNER JOIN\r\n               DISTRICT ON SECTEUR.ID_DISTRICT = DISTR" +
                "ICT.ID_DISTRICT\r\nWHERE  (DISTRICT.ID_DISTRICT = @distr)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@distr", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SECTEURDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SECTEURDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.SECTEURDataTable dataTable = new LAND_COMMITEE_Data_Set.SECTEURDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(LAND_COMMITEE_Data_Set.SECTEURDataTable dataTable, int distr) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(distr));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual LAND_COMMITEE_Data_Set.SECTEURDataTable GetDataBy(int distr) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(distr));
            LAND_COMMITEE_Data_Set.SECTEURDataTable dataTable = new LAND_COMMITEE_Data_Set.SECTEURDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.SECTEURDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "SECTEUR");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_SECTEUR, int Original_ID_DISTRICT, string Original_DESCRIPTION_SECTEUR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_SECTEUR));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_DISTRICT));
            if ((Original_DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DESCRIPTION_SECTEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_SECTEUR, int ID_DISTRICT, string DESCRIPTION_SECTEUR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_SECTEUR));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ID_DISTRICT));
            if ((DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION_SECTEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_SECTEUR, int ID_DISTRICT, string DESCRIPTION_SECTEUR, int Original_ID_SECTEUR, int Original_ID_DISTRICT, string Original_DESCRIPTION_SECTEUR) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_SECTEUR));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ID_DISTRICT));
            if ((DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION_SECTEUR));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_SECTEUR));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_DISTRICT));
            if ((Original_DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_DESCRIPTION_SECTEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SUPERVISORTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SUPERVISORTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SUPERVISOR";
            tableMapping.ColumnMappings.Add("No_SUPERVISOR", "No_SUPERVISOR");
            tableMapping.ColumnMappings.Add("NOM", "NOM");
            tableMapping.ColumnMappings.Add("PRENOM", "PRENOM");
            tableMapping.ColumnMappings.Add("AUTRE_NOM", "AUTRE_NOM");
            tableMapping.ColumnMappings.Add("No_RANK_PROFESSIONAL", "No_RANK_PROFESSIONAL");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [SUPERVISOR] WHERE (([No_SUPERVISOR] = @Original_No_SUPERVISOR) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([ID_CATEGORY] = @Original_No_RANK_PROFESSIONAL))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_SUPERVISOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_RANK_PROFESSIONAL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_RANK_PROFESSIONAL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [SUPERVISOR] ([NOM], [PRENOM], [AUTRE_NOM], [ID_CATEGORY]) VALUES (@NOM, @PRENOM, @AUTRE_NOM, @No_RANK_PROFESSIONAL);
SELECT No_SUPERVISOR, NOM, PRENOM, AUTRE_NOM, ID_CATEGORY AS No_RANK_PROFESSIONAL, UPPER(NOM) + ' ' + PRENOM + ' ' + AUTRE_NOM AS FullName FROM SUPERVISOR WHERE (No_SUPERVISOR = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@No_RANK_PROFESSIONAL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_RANK_PROFESSIONAL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [SUPERVISOR] SET [NOM] = @NOM, [PRENOM] = @PRENOM, [AUTRE_NOM] = @AUTRE_NOM, [ID_CATEGORY] = @No_RANK_PROFESSIONAL WHERE (([No_SUPERVISOR] = @Original_No_SUPERVISOR) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([ID_CATEGORY] = @Original_No_RANK_PROFESSIONAL));
SELECT No_SUPERVISOR, NOM, PRENOM, AUTRE_NOM, ID_CATEGORY AS No_RANK_PROFESSIONAL, UPPER(NOM) + ' ' + PRENOM + ' ' + AUTRE_NOM AS FullName FROM SUPERVISOR WHERE (No_SUPERVISOR = @No_SUPERVISOR)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@No_RANK_PROFESSIONAL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_RANK_PROFESSIONAL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_SUPERVISOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_RANK_PROFESSIONAL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_RANK_PROFESSIONAL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@No_SUPERVISOR", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  No_SUPERVISOR, NOM, PRENOM, AUTRE_NOM, id_category as No_RANK_PROFESSIONA" +
                "L, upper(nom)+\' \'+prenom+\' \'+autre_nom as FullName\r\nFROM     SUPERVISOR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SUPERVISORDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SUPERVISORDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.SUPERVISORDataTable dataTable = new LAND_COMMITEE_Data_Set.SUPERVISORDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.SUPERVISORDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "SUPERVISOR");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_No_SUPERVISOR, string Original_NOM, string Original_PRENOM, string Original_AUTRE_NOM, int Original_No_RANK_PROFESSIONAL) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_No_SUPERVISOR));
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_No_RANK_PROFESSIONAL));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NOM, string PRENOM, string AUTRE_NOM, int No_RANK_PROFESSIONAL) {
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(No_RANK_PROFESSIONAL));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NOM, string PRENOM, string AUTRE_NOM, int No_RANK_PROFESSIONAL, int Original_No_SUPERVISOR, string Original_NOM, string Original_PRENOM, string Original_AUTRE_NOM, int Original_No_RANK_PROFESSIONAL, int No_SUPERVISOR) {
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(No_RANK_PROFESSIONAL));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_No_SUPERVISOR));
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_No_RANK_PROFESSIONAL));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(No_SUPERVISOR));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Select_PasswordTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Select_PasswordTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Select_Password";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@user", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.Select_PasswordDataTable dataTable, string user) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(user));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.Select_PasswordDataTable GetData(string user) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(user));
            }
            LAND_COMMITEE_Data_Set.Select_PasswordDataTable dataTable = new LAND_COMMITEE_Data_Set.Select_PasswordDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTablesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserTablesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserTables";
            tableMapping.ColumnMappings.Add("username", "username");
            tableMapping.ColumnMappings.Add("password", "password");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [UserTables] WHERE (([username] = @Original_username) AND ([password]" +
                " = @Original_password))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_username", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "username", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [UserTables] ([username], [password]) VALUES (@username, @password);\r" +
                "\nSELECT username, password FROM UserTables WHERE (username = @username)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@username", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "username", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [UserTables] SET [username] = @username, [password] = @password WHERE (([u" +
                "sername] = @Original_username) AND ([password] = @Original_password));\r\nSELECT u" +
                "sername, password FROM UserTables WHERE (username = @username)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@username", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "username", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_username", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "username", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  username, password\r\nFROM     UserTables";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.UserTablesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.UserTablesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.UserTablesDataTable dataTable = new LAND_COMMITEE_Data_Set.UserTablesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.UserTablesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "UserTables");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_username, string Original_password) {
            if ((Original_username == null)) {
                throw new System.ArgumentNullException("Original_username");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_username));
            }
            if ((Original_password == null)) {
                throw new System.ArgumentNullException("Original_password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string username, string password) {
            if ((username == null)) {
                throw new System.ArgumentNullException("username");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(username));
            }
            if ((password == null)) {
                throw new System.ArgumentNullException("password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string username, string password, string Original_username, string Original_password) {
            if ((username == null)) {
                throw new System.ArgumentNullException("username");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(username));
            }
            if ((password == null)) {
                throw new System.ArgumentNullException("password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(password));
            }
            if ((Original_username == null)) {
                throw new System.ArgumentNullException("Original_username");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_username));
            }
            if ((Original_password == null)) {
                throw new System.ArgumentNullException("Original_password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BENEFICIARY_BY_LOCATIONTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BENEFICIARY_BY_LOCATIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BENEFICIARY_BY_LOCATION";
            tableMapping.ColumnMappings.Add("LAND_No", "LAND_No");
            tableMapping.ColumnMappings.Add("NOM", "NOM");
            tableMapping.ColumnMappings.Add("PRENOM", "PRENOM");
            tableMapping.ColumnMappings.Add("No_IDENTITE", "No_IDENTITE");
            tableMapping.ColumnMappings.Add("LAND_SIZE", "LAND_SIZE");
            tableMapping.ColumnMappings.Add("DISTRICT", "DISTRICT");
            tableMapping.ColumnMappings.Add("SECTOR", "SECTOR");
            tableMapping.ColumnMappings.Add("CELLULE", "CELLULE");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  LAND_No, NOM, PRENOM, No_IDENTITE, LAND_SIZE, DISTRICT, SECTOR, CELLULE\r\n" +
                "FROM     BENEFICIARY_BY_LOCATION";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.BENEFICIARY_BY_LOCATIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.BENEFICIARY_BY_LOCATIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.BENEFICIARY_BY_LOCATIONDataTable dataTable = new LAND_COMMITEE_Data_Set.BENEFICIARY_BY_LOCATIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FORMER_OWNERSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FORMER_OWNERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FORMER_OWNERS";
            tableMapping.ColumnMappings.Add("ID_FORMER_OWNER", "ID_FORMER_OWNER");
            tableMapping.ColumnMappings.Add("NOM", "NOM");
            tableMapping.ColumnMappings.Add("PRENOM", "PRENOM");
            tableMapping.ColumnMappings.Add("AUTRE_NOM", "AUTRE_NOM");
            tableMapping.ColumnMappings.Add("FORMER_LAND_SIZE", "FORMER_LAND_SIZE");
            tableMapping.ColumnMappings.Add("former_owner", "former_owner");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [FORMER_OWNERS] WHERE (([ID_FORMER_OWNER] = @Original_ID_FORMER_OWNER) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([FORMER_LAND_SIZE] = @Original_FORMER_LAND_SIZE))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FORMER_OWNER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [FORMER_OWNERS] ([NOM], [PRENOM], [AUTRE_NOM], [FORMER_LAND_SIZE]) VALUES (@NOM, @PRENOM, @AUTRE_NOM, @FORMER_LAND_SIZE);
SELECT ID_FORMER_OWNER, NOM, PRENOM, AUTRE_NOM, FORMER_LAND_SIZE, NOM + ' ' + PRENOM + ' ' + AUTRE_NOM AS former_owner FROM FORMER_OWNERS WHERE (ID_FORMER_OWNER = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [FORMER_OWNERS] SET [NOM] = @NOM, [PRENOM] = @PRENOM, [AUTRE_NOM] = @AUTRE_NOM, [FORMER_LAND_SIZE] = @FORMER_LAND_SIZE WHERE (([ID_FORMER_OWNER] = @Original_ID_FORMER_OWNER) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([FORMER_LAND_SIZE] = @Original_FORMER_LAND_SIZE));
SELECT ID_FORMER_OWNER, NOM, PRENOM, AUTRE_NOM, FORMER_LAND_SIZE, NOM + ' ' + PRENOM + ' ' + AUTRE_NOM AS former_owner FROM FORMER_OWNERS WHERE (ID_FORMER_OWNER = @ID_FORMER_OWNER)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FORMER_OWNER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_FORMER_OWNER", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_FORMER_OWNER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  ID_FORMER_OWNER, NOM, PRENOM, AUTRE_NOM, FORMER_LAND_SIZE, NOM + \' \' + PR" +
                "ENOM + \' \' + AUTRE_NOM AS former_owner\r\nFROM     FORMER_OWNERS";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.FORMER_OWNERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.FORMER_OWNERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.FORMER_OWNERSDataTable dataTable = new LAND_COMMITEE_Data_Set.FORMER_OWNERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.FORMER_OWNERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "FORMER_OWNERS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_FORMER_OWNER, string Original_NOM, string Original_PRENOM, string Original_AUTRE_NOM, double Original_FORMER_LAND_SIZE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_FORMER_OWNER));
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_FORMER_LAND_SIZE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NOM, string PRENOM, string AUTRE_NOM, double FORMER_LAND_SIZE) {
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(FORMER_LAND_SIZE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NOM, string PRENOM, string AUTRE_NOM, double FORMER_LAND_SIZE, int Original_ID_FORMER_OWNER, string Original_NOM, string Original_PRENOM, string Original_AUTRE_NOM, double Original_FORMER_LAND_SIZE, int ID_FORMER_OWNER) {
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(FORMER_LAND_SIZE));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_FORMER_OWNER));
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Original_FORMER_LAND_SIZE));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ID_FORMER_OWNER));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Select_Max_NumRefTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Select_Max_NumRefTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Select_Max_NumRef";
            tableMapping.ColumnMappings.Add("max_NumReference", "max_NumReference");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  MAX(NumReference) + 1 AS max_NumReference\r\nFROM     LAND_OWNER";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.Select_Max_NumRefDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.Select_Max_NumRefDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.Select_Max_NumRefDataTable dataTable = new LAND_COMMITEE_Data_Set.Select_Max_NumRefDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LAND_OWNERTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAND_OWNERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LAND_OWNER";
            tableMapping.ColumnMappings.Add("NumReference", "NumReference");
            tableMapping.ColumnMappings.Add("NoIDENTITE", "NoIDENTITE");
            tableMapping.ColumnMappings.Add("NOM", "NOM");
            tableMapping.ColumnMappings.Add("PRENOM", "PRENOM");
            tableMapping.ColumnMappings.Add("AUTRE_NOM", "AUTRE_NOM");
            tableMapping.ColumnMappings.Add("PROVINCEID", "PROVINCEID");
            tableMapping.ColumnMappings.Add("DISTRICTID", "DISTRICTID");
            tableMapping.ColumnMappings.Add("SECTORID", "SECTORID");
            tableMapping.ColumnMappings.Add("CELLULEID", "CELLULEID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [LAND_OWNER] WHERE (([NumReference] = @Original_NumReference) AND ([NoIDENTITE] = @Original_NoIDENTITE) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([PROVINCEID] = @Original_PROVINCEID) AND ([DISTRICTID] = @Original_DISTRICTID) AND ([SECTORID] = @Original_SECTORID) AND ([CELLULEID] = @Original_CELLULEID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NoIDENTITE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NoIDENTITE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PROVINCEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DISTRICTID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SECTORID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTORID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CELLULEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [LAND_OWNER] ([NoIDENTITE], [NOM], [PRENOM], [AUTRE_NOM], [PROVINCEID], [DISTRICTID], [SECTORID], [CELLULEID]) VALUES (@NoIDENTITE, @NOM, @PRENOM, @AUTRE_NOM, @PROVINCEID, @DISTRICTID, @SECTORID, @CELLULEID);
SELECT NumReference, NoIDENTITE, NOM, PRENOM, AUTRE_NOM, PROVINCEID, DISTRICTID, SECTORID, CELLULEID FROM LAND_OWNER WHERE (NumReference = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NoIDENTITE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NoIDENTITE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROVINCEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DISTRICTID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SECTORID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTORID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CELLULEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [LAND_OWNER] SET [NoIDENTITE] = @NoIDENTITE, [NOM] = @NOM, [PRENOM] = @PRENOM, [AUTRE_NOM] = @AUTRE_NOM, [PROVINCEID] = @PROVINCEID, [DISTRICTID] = @DISTRICTID, [SECTORID] = @SECTORID, [CELLULEID] = @CELLULEID WHERE (([NumReference] = @Original_NumReference) AND ([NoIDENTITE] = @Original_NoIDENTITE) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([PROVINCEID] = @Original_PROVINCEID) AND ([DISTRICTID] = @Original_DISTRICTID) AND ([SECTORID] = @Original_SECTORID) AND ([CELLULEID] = @Original_CELLULEID));
SELECT NumReference, NoIDENTITE, NOM, PRENOM, AUTRE_NOM, PROVINCEID, DISTRICTID, SECTORID, CELLULEID FROM LAND_OWNER WHERE (NumReference = @NumReference)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NoIDENTITE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NoIDENTITE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROVINCEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DISTRICTID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SECTORID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTORID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CELLULEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NoIDENTITE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NoIDENTITE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PROVINCEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PROVINCEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DISTRICTID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DISTRICTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SECTORID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SECTORID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CELLULEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CELLULEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumReference", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  NumReference, NoIDENTITE, NOM, PRENOM, AUTRE_NOM, PROVINCEID, DISTRICTID," +
                " SECTORID, CELLULEID\r\nFROM     LAND_OWNER";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT AUTRE_NOM, CELLULEID, DISTRICTID, NOM, NoIDENTITE, NumReference, PRENOM, P" +
                "ROVINCEID, SECTORID FROM LAND_OWNER WHERE (NumReference = @NumReference)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumReference", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.LAND_OWNERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.LAND_OWNERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.LAND_OWNERDataTable dataTable = new LAND_COMMITEE_Data_Set.LAND_OWNERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_NUM_REF(LAND_COMMITEE_Data_Set.LAND_OWNERDataTable dataTable, int NumReference) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(NumReference));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual LAND_COMMITEE_Data_Set.LAND_OWNERDataTable GetDataBy_NUM_REF(int NumReference) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(NumReference));
            LAND_COMMITEE_Data_Set.LAND_OWNERDataTable dataTable = new LAND_COMMITEE_Data_Set.LAND_OWNERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.LAND_OWNERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "LAND_OWNER");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_NumReference, string Original_NoIDENTITE, string Original_NOM, string Original_PRENOM, string Original_AUTRE_NOM, int Original_PROVINCEID, int Original_DISTRICTID, int Original_SECTORID, int Original_CELLULEID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_NumReference));
            if ((Original_NoIDENTITE == null)) {
                throw new System.ArgumentNullException("Original_NoIDENTITE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NoIDENTITE));
            }
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_PROVINCEID));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_DISTRICTID));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_SECTORID));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_CELLULEID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NoIDENTITE, string NOM, string PRENOM, string AUTRE_NOM, int PROVINCEID, int DISTRICTID, int SECTORID, int CELLULEID) {
            if ((NoIDENTITE == null)) {
                throw new System.ArgumentNullException("NoIDENTITE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NoIDENTITE));
            }
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(PROVINCEID));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(DISTRICTID));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(SECTORID));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(CELLULEID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NoIDENTITE, 
                    string NOM, 
                    string PRENOM, 
                    string AUTRE_NOM, 
                    int PROVINCEID, 
                    int DISTRICTID, 
                    int SECTORID, 
                    int CELLULEID, 
                    int Original_NumReference, 
                    string Original_NoIDENTITE, 
                    string Original_NOM, 
                    string Original_PRENOM, 
                    string Original_AUTRE_NOM, 
                    int Original_PROVINCEID, 
                    int Original_DISTRICTID, 
                    int Original_SECTORID, 
                    int Original_CELLULEID, 
                    int NumReference) {
            if ((NoIDENTITE == null)) {
                throw new System.ArgumentNullException("NoIDENTITE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NoIDENTITE));
            }
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(PROVINCEID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(DISTRICTID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(SECTORID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(CELLULEID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_NumReference));
            if ((Original_NoIDENTITE == null)) {
                throw new System.ArgumentNullException("Original_NoIDENTITE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_NoIDENTITE));
            }
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_PROVINCEID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_DISTRICTID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_SECTORID));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_CELLULEID));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(NumReference));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SelectAllInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SelectAllInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SelectAllInfo";
            tableMapping.ColumnMappings.Add("nom", "nom");
            tableMapping.ColumnMappings.Add("prenom", "prenom");
            tableMapping.ColumnMappings.Add("autre_nom", "autre_nom");
            tableMapping.ColumnMappings.Add("ProvinceOwner", "ProvinceOwner");
            tableMapping.ColumnMappings.Add("DistrictOwner", "DistrictOwner");
            tableMapping.ColumnMappings.Add("sectorOwner", "sectorOwner");
            tableMapping.ColumnMappings.Add("celluleOwner", "celluleOwner");
            tableMapping.ColumnMappings.Add("ProvinceLand", "ProvinceLand");
            tableMapping.ColumnMappings.Add("DistrictLand", "DistrictLand");
            tableMapping.ColumnMappings.Add("SectorLand", "SectorLand");
            tableMapping.ColumnMappings.Add("CelluleLand", "CelluleLand");
            tableMapping.ColumnMappings.Add("Usage", "Usage");
            tableMapping.ColumnMappings.Add("LandSize", "LandSize");
            tableMapping.ColumnMappings.Add("FormerOwnerName", "FormerOwnerName");
            tableMapping.ColumnMappings.Add("SupervisorName", "SupervisorName");
            tableMapping.ColumnMappings.Add("noidentite", "noidentite");
            tableMapping.ColumnMappings.Add("numreference", "numreference");
            tableMapping.ColumnMappings.Add("Column1", "Column1");
            tableMapping.ColumnMappings.Add("Column2", "Column2");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SelectAllInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SelectAllInfoDataTable dataTable, string id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((id == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SelectAllInfoDataTable GetData(string id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((id == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(id));
            }
            LAND_COMMITEE_Data_Set.SelectAllInfoDataTable dataTable = new LAND_COMMITEE_Data_Set.SelectAllInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FindByNameTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FindByNameTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FindByName";
            tableMapping.ColumnMappings.Add("landno", "landno");
            tableMapping.ColumnMappings.Add("fullname", "fullname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [FindByName] ([landno], [fullname]) VALUES (@landno, @fullname)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@landno", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "landno", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fullname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fullname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     landno, fullname\r\nFROM         FindByName";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.FindByNameDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.FindByNameDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.FindByNameDataTable dataTable = new LAND_COMMITEE_Data_Set.FindByNameDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.FindByNameDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "FindByName");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string landno, string fullname) {
            if ((landno == null)) {
                throw new System.ArgumentNullException("landno");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(landno));
            }
            if ((fullname == null)) {
                throw new System.ArgumentNullException("fullname");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fullname));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UnCheckedLandTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnCheckedLandTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UnCheckedLand";
            tableMapping.ColumnMappings.Add("LAND_No", "LAND_No");
            tableMapping.ColumnMappings.Add("NumReference", "NumReference");
            tableMapping.ColumnMappings.Add("Checked", "Checked");
            tableMapping.ColumnMappings.Add("byWho", "byWho");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [LAND_INFO] WHERE (([LAND_No] = @Original_LAND_No) AND ([NumReference" +
                "] = @Original_NumReference) AND ([Checked] = @Original_Checked) AND ((@IsNull_by" +
                "Who = 1 AND [byWho] IS NULL) OR ([byWho] = @Original_byWho)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Checked", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Checked", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_byWho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "byWho", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_byWho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "byWho", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [LAND_INFO] SET [LAND_No] = @LAND_No, [NumReference] = @NumReference, [Checked] = @Checked, [byWho] = @byWho WHERE (([LAND_No] = @Original_LAND_No) AND ([NumReference] = @Original_NumReference) AND ([Checked] = @Original_Checked) AND ((@IsNull_byWho = 1 AND [byWho] IS NULL) OR ([byWho] = @Original_byWho)));
SELECT LAND_No, NumReference, Checked, byWho FROM LAND_INFO WHERE (LAND_No = @LAND_No)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Checked", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Checked", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@byWho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "byWho", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAND_No", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAND_No", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumReference", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumReference", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Checked", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Checked", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_byWho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "byWho", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_byWho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "byWho", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  LAND_No, NumReference, Checked, byWho\r\nFROM     LAND_INFO\r\nWHERE  (Checke" +
                "d = 0)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.UnCheckedLandDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.UnCheckedLandDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.UnCheckedLandDataTable dataTable = new LAND_COMMITEE_Data_Set.UnCheckedLandDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.UnCheckedLandDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "UnCheckedLand");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_LAND_No, int Original_NumReference, int Original_Checked, System.Nullable<int> Original_byWho) {
            if ((Original_LAND_No == null)) {
                throw new System.ArgumentNullException("Original_LAND_No");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_LAND_No));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_NumReference));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Checked));
            if ((Original_byWho.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_byWho.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LAND_No, int NumReference, int Checked, System.Nullable<int> byWho, string Original_LAND_No, int Original_NumReference, int Original_Checked, System.Nullable<int> Original_byWho) {
            if ((LAND_No == null)) {
                throw new System.ArgumentNullException("LAND_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LAND_No));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(NumReference));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Checked));
            if ((byWho.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(byWho.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_LAND_No == null)) {
                throw new System.ArgumentNullException("Original_LAND_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_LAND_No));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_NumReference));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Checked));
            if ((Original_byWho.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_byWho.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SelectUserInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SelectUserInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SelectUserInfo";
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("surname", "surname");
            tableMapping.ColumnMappings.Add("Column1", "Column1");
            tableMapping.ColumnMappings.Add("Column2", "Column2");
            tableMapping.ColumnMappings.Add("date", "date1");
            tableMapping.ColumnMappings.Add("Column3", "Column3");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SelectUserInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@user", System.Data.SqlDbType.VarChar, 30, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SelectUserInfoDataTable dataTable, string user) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(user));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SelectUserInfoDataTable GetData(string user) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(user));
            }
            LAND_COMMITEE_Data_Set.SelectUserInfoDataTable dataTable = new LAND_COMMITEE_Data_Set.SelectUserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DistinctDistrictTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DistinctDistrictTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DistinctDistrict";
            tableMapping.ColumnMappings.Add("DISTRICT", "DISTRICT");
            tableMapping.ColumnMappings.Add("DESCRIPTION_DISTRICT", "DESCRIPTION_DISTRICT");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DISTINCT LAND_INFO.DISTRICT, DISTRICT.DESCRIPTION_DISTRICT\r\nFROM         L" +
                "AND_INFO INNER JOIN\r\n                      DISTRICT ON LAND_INFO.DISTRICT = DIST" +
                "RICT.ID_DISTRICT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.DistinctDistrictDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.DistinctDistrictDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.DistinctDistrictDataTable dataTable = new LAND_COMMITEE_Data_Set.DistinctDistrictDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DistinctSectorTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DistinctSectorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DistinctSector";
            tableMapping.ColumnMappings.Add("SECTOR", "SECTOR");
            tableMapping.ColumnMappings.Add("DESCRIPTION_SECTEUR", "DESCRIPTION_SECTEUR");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DISTINCT LAND_INFO.SECTOR, SECTEUR.DESCRIPTION_SECTEUR\r\nFROM         LAND_" +
                "INFO INNER JOIN\r\n                      SECTEUR ON LAND_INFO.SECTOR = SECTEUR.ID_" +
                "SECTEUR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.DistinctSectorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.DistinctSectorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.DistinctSectorDataTable dataTable = new LAND_COMMITEE_Data_Set.DistinctSectorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SelectFormerOwnerDistributionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SelectFormerOwnerDistributionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SelectFormerOwnerDistribution";
            tableMapping.ColumnMappings.Add("LAND_No", "LAND_No");
            tableMapping.ColumnMappings.Add("fullname", "fullname");
            tableMapping.ColumnMappings.Add("FORMER_OWNER", "FORMER_OWNER");
            tableMapping.ColumnMappings.Add("LAND_SIZE", "LAND_SIZE");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT  LAND_INFO.LAND_No, LAND_OWNER.NOM + ' ' + LAND_OWNER.PRENOM + ' ' + LAND_OWNER.AUTRE_NOM AS fullname, LAND_INFO.FORMER_OWNER, 
               LAND_INFO.LAND_SIZE
FROM     LAND_INFO INNER JOIN
               LAND_OWNER ON LAND_INFO.NumReference = LAND_OWNER.NumReference
WHERE  (LAND_INFO.FORMER_OWNER = @id)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FORMER_OWNER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SelectFormerOwnerDistributionDataTable dataTable, int id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(id));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SelectFormerOwnerDistributionDataTable GetData(int id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(id));
            LAND_COMMITEE_Data_Set.SelectFormerOwnerDistributionDataTable dataTable = new LAND_COMMITEE_Data_Set.SelectFormerOwnerDistributionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SelectFormerOwnerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SelectFormerOwnerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SelectFormerOwner";
            tableMapping.ColumnMappings.Add("nom", "nom");
            tableMapping.ColumnMappings.Add("Column1", "Column1");
            tableMapping.ColumnMappings.Add("former_land_size", "former_land_size");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SelectFormerOwner";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@var", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SelectFormerOwnerDataTable dataTable, string var) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((var == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(var));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SelectFormerOwnerDataTable GetData(string var) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((var == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(var));
            }
            LAND_COMMITEE_Data_Set.SelectFormerOwnerDataTable dataTable = new LAND_COMMITEE_Data_Set.SelectFormerOwnerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SelectSuperVisorTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SelectSuperVisorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SelectSuperVisor";
            tableMapping.ColumnMappings.Add("No_SUPERVISOR", "No_SUPERVISOR");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [SUPERVISOR] WHERE (([No_SUPERVISOR] = @Original_No_SUPERVISOR))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_No_SUPERVISOR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "No_SUPERVISOR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  No_SUPERVISOR, NOM + \' \' + PRENOM + \' \' + AUTRE_NOM AS FullName\r\nFROM    " +
                " SUPERVISOR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SelectSuperVisorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SelectSuperVisorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.SelectSuperVisorDataTable dataTable = new LAND_COMMITEE_Data_Set.SelectSuperVisorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.SelectSuperVisorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "SelectSuperVisor");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_No_SUPERVISOR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_No_SUPERVISOR));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CellsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CellsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Cells";
            tableMapping.ColumnMappings.Add("CellID", "CellID");
            tableMapping.ColumnMappings.Add("id_secteur", "id_secteur");
            tableMapping.ColumnMappings.Add("CellName", "CellName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Cells] WHERE (([CellID] = @Original_CellID) AND ([id_secteur] = @Ori" +
                "ginal_id_secteur) AND ([CellName] = @Original_CellName))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Cells] ([CellID], [id_secteur], [CellName]) VALUES (@CellID, @id_sec" +
                "teur, @CellName);\r\nSELECT CellID, id_secteur, CellName FROM Cells WHERE (CellID " +
                "= @CellID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Cells] SET [CellID] = @CellID, [id_secteur] = @id_secteur, [CellName] = @CellName WHERE (([CellID] = @Original_CellID) AND ([id_secteur] = @Original_id_secteur) AND ([CellName] = @Original_CellName));
SELECT CellID, id_secteur, CellName FROM Cells WHERE (CellID = @CellID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  CellID, id_secteur, CellName\r\nFROM     Cells\r\nWHERE  (id_secteur = @secto" +
                "r)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sector", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT  CellID, id_secteur, CellName\r\nFROM     Cells";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.CellsDataTable dataTable, int sector) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(sector));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.CellsDataTable GetData(int sector) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(sector));
            LAND_COMMITEE_Data_Set.CellsDataTable dataTable = new LAND_COMMITEE_Data_Set.CellsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(LAND_COMMITEE_Data_Set.CellsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual LAND_COMMITEE_Data_Set.CellsDataTable GetDataBy() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            LAND_COMMITEE_Data_Set.CellsDataTable dataTable = new LAND_COMMITEE_Data_Set.CellsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.CellsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "Cells");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(short Original_CellID, int Original_id_secteur, string Original_CellName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((short)(Original_CellID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_id_secteur));
            if ((Original_CellName == null)) {
                throw new System.ArgumentNullException("Original_CellName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CellName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(short CellID, int id_secteur, string CellName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((short)(CellID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(id_secteur));
            if ((CellName == null)) {
                throw new System.ArgumentNullException("CellName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CellName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(short CellID, int id_secteur, string CellName, short Original_CellID, int Original_id_secteur, string Original_CellName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((short)(CellID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(id_secteur));
            if ((CellName == null)) {
                throw new System.ArgumentNullException("CellName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CellName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(Original_CellID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_id_secteur));
            if ((Original_CellName == null)) {
                throw new System.ArgumentNullException("Original_CellName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_CellName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DISTRICT_LandTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DISTRICT_LandTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DISTRICT_Land";
            tableMapping.ColumnMappings.Add("ID_DISTRICT", "ID_DISTRICT");
            tableMapping.ColumnMappings.Add("ID_PROVINCE", "ID_PROVINCE");
            tableMapping.ColumnMappings.Add("DESCRIPTION_DISTRICT", "DESCRIPTION_DISTRICT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [DISTRICT] WHERE (([ID_DISTRICT] = @Original_ID_DISTRICT) AND ([ID_PR" +
                "OVINCE] = @Original_ID_PROVINCE) AND ([DESCRIPTION_DISTRICT] = @Original_DESCRIP" +
                "TION_DISTRICT))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [DISTRICT] ([ID_DISTRICT], [ID_PROVINCE], [DESCRIPTION_DISTRICT]) VAL" +
                "UES (@ID_DISTRICT, @ID_PROVINCE, @DESCRIPTION_DISTRICT);\r\nSELECT ID_DISTRICT, ID" +
                "_PROVINCE, DESCRIPTION_DISTRICT FROM DISTRICT WHERE (ID_DISTRICT = @ID_DISTRICT)" +
                "";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [DISTRICT] SET [ID_DISTRICT] = @ID_DISTRICT, [ID_PROVINCE] = @ID_PROVINCE, [DESCRIPTION_DISTRICT] = @DESCRIPTION_DISTRICT WHERE (([ID_DISTRICT] = @Original_ID_DISTRICT) AND ([ID_PROVINCE] = @Original_ID_PROVINCE) AND ([DESCRIPTION_DISTRICT] = @Original_DESCRIPTION_DISTRICT));
SELECT ID_DISTRICT, ID_PROVINCE, DESCRIPTION_DISTRICT FROM DISTRICT WHERE (ID_DISTRICT = @ID_DISTRICT)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_PROVINCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_PROVINCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_DISTRICT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  ID_DISTRICT, ID_PROVINCE, DESCRIPTION_DISTRICT\r\nFROM     DISTRICT\r\nWHERE " +
                " (ID_PROVINCE = 5)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.DISTRICT_LandDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.DISTRICT_LandDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.DISTRICT_LandDataTable dataTable = new LAND_COMMITEE_Data_Set.DISTRICT_LandDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.DISTRICT_LandDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "DISTRICT_Land");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_DISTRICT, int Original_ID_PROVINCE, string Original_DESCRIPTION_DISTRICT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_DISTRICT));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_PROVINCE));
            if ((Original_DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DESCRIPTION_DISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_DISTRICT, int ID_PROVINCE, string DESCRIPTION_DISTRICT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_DISTRICT));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ID_PROVINCE));
            if ((DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION_DISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_DISTRICT, int ID_PROVINCE, string DESCRIPTION_DISTRICT, int Original_ID_DISTRICT, int Original_ID_PROVINCE, string Original_DESCRIPTION_DISTRICT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_DISTRICT));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ID_PROVINCE));
            if ((DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION_DISTRICT));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_DISTRICT));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_PROVINCE));
            if ((Original_DESCRIPTION_DISTRICT == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_DISTRICT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_DESCRIPTION_DISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SECTEUR_LandTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SECTEUR_LandTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SECTEUR_Land";
            tableMapping.ColumnMappings.Add("ID_SECTEUR", "ID_SECTEUR");
            tableMapping.ColumnMappings.Add("ID_DISTRICT", "ID_DISTRICT");
            tableMapping.ColumnMappings.Add("DESCRIPTION_SECTEUR", "DESCRIPTION_SECTEUR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [SECTEUR] WHERE (([ID_SECTEUR] = @Original_ID_SECTEUR) AND ([ID_DISTR" +
                "ICT] = @Original_ID_DISTRICT) AND ([DESCRIPTION_SECTEUR] = @Original_DESCRIPTION" +
                "_SECTEUR))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [SECTEUR] ([ID_SECTEUR], [ID_DISTRICT], [DESCRIPTION_SECTEUR]) VALUES" +
                " (@ID_SECTEUR, @ID_DISTRICT, @DESCRIPTION_SECTEUR);\r\nSELECT ID_SECTEUR, ID_DISTR" +
                "ICT, DESCRIPTION_SECTEUR FROM SECTEUR WHERE (ID_SECTEUR = @ID_SECTEUR)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [SECTEUR] SET [ID_SECTEUR] = @ID_SECTEUR, [ID_DISTRICT] = @ID_DISTRICT, [DESCRIPTION_SECTEUR] = @DESCRIPTION_SECTEUR WHERE (([ID_SECTEUR] = @Original_ID_SECTEUR) AND ([ID_DISTRICT] = @Original_ID_DISTRICT) AND ([DESCRIPTION_SECTEUR] = @Original_DESCRIPTION_SECTEUR));
SELECT ID_SECTEUR, ID_DISTRICT, DESCRIPTION_SECTEUR FROM SECTEUR WHERE (ID_SECTEUR = @ID_SECTEUR)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_SECTEUR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_DISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_SECTEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SECTEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  ID_SECTEUR, ID_DISTRICT, DESCRIPTION_SECTEUR\r\nFROM     SECTEUR\r\nWHERE  (I" +
                "D_DISTRICT = @district)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@district", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_DISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SECTEUR_LandDataTable dataTable, int district) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(district));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SECTEUR_LandDataTable GetData(int district) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(district));
            LAND_COMMITEE_Data_Set.SECTEUR_LandDataTable dataTable = new LAND_COMMITEE_Data_Set.SECTEUR_LandDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.SECTEUR_LandDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "SECTEUR_Land");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_SECTEUR, int Original_ID_DISTRICT, string Original_DESCRIPTION_SECTEUR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_SECTEUR));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_DISTRICT));
            if ((Original_DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DESCRIPTION_SECTEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_SECTEUR, int ID_DISTRICT, string DESCRIPTION_SECTEUR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_SECTEUR));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ID_DISTRICT));
            if ((DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION_SECTEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_SECTEUR, int ID_DISTRICT, string DESCRIPTION_SECTEUR, int Original_ID_SECTEUR, int Original_ID_DISTRICT, string Original_DESCRIPTION_SECTEUR) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_SECTEUR));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ID_DISTRICT));
            if ((DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION_SECTEUR));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_SECTEUR));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_DISTRICT));
            if ((Original_DESCRIPTION_SECTEUR == null)) {
                throw new System.ArgumentNullException("Original_DESCRIPTION_SECTEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_DESCRIPTION_SECTEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Cells_LandTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Cells_LandTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Cells_Land";
            tableMapping.ColumnMappings.Add("CellID", "CellID");
            tableMapping.ColumnMappings.Add("id_secteur", "id_secteur");
            tableMapping.ColumnMappings.Add("CellName", "CellName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Cells] WHERE (([CellID] = @Original_CellID) AND ([id_secteur] = @Ori" +
                "ginal_id_secteur) AND ([CellName] = @Original_CellName))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Cells] ([CellID], [id_secteur], [CellName]) VALUES (@CellID, @id_sec" +
                "teur, @CellName);\r\nSELECT CellID, id_secteur, CellName FROM Cells WHERE (CellID " +
                "= @CellID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Cells] SET [CellID] = @CellID, [id_secteur] = @id_secteur, [CellName] = @CellName WHERE (([CellID] = @Original_CellID) AND ([id_secteur] = @Original_id_secteur) AND ([CellName] = @Original_CellName));
SELECT CellID, id_secteur, CellName FROM Cells WHERE (CellID = @CellID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellID", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "CellID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id_secteur", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CellName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CellName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  CellID, id_secteur, CellName\r\nFROM     Cells\r\nWHERE  (id_secteur = @secto" +
                "r)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@sector", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id_secteur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.Cells_LandDataTable dataTable, int sector) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(sector));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.Cells_LandDataTable GetData(int sector) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(sector));
            LAND_COMMITEE_Data_Set.Cells_LandDataTable dataTable = new LAND_COMMITEE_Data_Set.Cells_LandDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.Cells_LandDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "Cells_Land");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(short Original_CellID, int Original_id_secteur, string Original_CellName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((short)(Original_CellID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_id_secteur));
            if ((Original_CellName == null)) {
                throw new System.ArgumentNullException("Original_CellName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CellName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(short CellID, int id_secteur, string CellName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((short)(CellID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(id_secteur));
            if ((CellName == null)) {
                throw new System.ArgumentNullException("CellName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CellName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(short CellID, int id_secteur, string CellName, short Original_CellID, int Original_id_secteur, string Original_CellName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((short)(CellID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(id_secteur));
            if ((CellName == null)) {
                throw new System.ArgumentNullException("CellName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CellName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(Original_CellID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_id_secteur));
            if ((Original_CellName == null)) {
                throw new System.ArgumentNullException("Original_CellName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_CellName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SelectOneFORMEROWNERTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SelectOneFORMEROWNERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SelectOneFORMEROWNER";
            tableMapping.ColumnMappings.Add("ID_FORMER_OWNER", "ID_FORMER_OWNER");
            tableMapping.ColumnMappings.Add("NOM", "NOM");
            tableMapping.ColumnMappings.Add("PRENOM", "PRENOM");
            tableMapping.ColumnMappings.Add("AUTRE_NOM", "AUTRE_NOM");
            tableMapping.ColumnMappings.Add("FORMER_LAND_SIZE", "FORMER_LAND_SIZE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [FORMER_OWNERS] WHERE (([ID_FORMER_OWNER] = @Original_ID_FORMER_OWNER) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([FORMER_LAND_SIZE] = @Original_FORMER_LAND_SIZE))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FORMER_OWNER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [FORMER_OWNERS] ([NOM], [PRENOM], [AUTRE_NOM], [FORMER_LAND_SIZE]) VALUES (@NOM, @PRENOM, @AUTRE_NOM, @FORMER_LAND_SIZE);
SELECT ID_FORMER_OWNER, NOM, PRENOM, AUTRE_NOM, FORMER_LAND_SIZE FROM FORMER_OWNERS WHERE (ID_FORMER_OWNER = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [FORMER_OWNERS] SET [NOM] = @NOM, [PRENOM] = @PRENOM, [AUTRE_NOM] = @AUTRE_NOM, [FORMER_LAND_SIZE] = @FORMER_LAND_SIZE WHERE (([ID_FORMER_OWNER] = @Original_ID_FORMER_OWNER) AND ([NOM] = @Original_NOM) AND ((@IsNull_PRENOM = 1 AND [PRENOM] IS NULL) OR ([PRENOM] = @Original_PRENOM)) AND ((@IsNull_AUTRE_NOM = 1 AND [AUTRE_NOM] IS NULL) OR ([AUTRE_NOM] = @Original_AUTRE_NOM)) AND ([FORMER_LAND_SIZE] = @Original_FORMER_LAND_SIZE));
SELECT ID_FORMER_OWNER, NOM, PRENOM, AUTRE_NOM, FORMER_LAND_SIZE FROM FORMER_OWNERS WHERE (ID_FORMER_OWNER = @ID_FORMER_OWNER)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FORMER_OWNER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FORMER_OWNER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PRENOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRENOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AUTRE_NOM", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AUTRE_NOM", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AUTRE_NOM", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FORMER_LAND_SIZE", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "FORMER_LAND_SIZE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_FORMER_OWNER", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_FORMER_OWNER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT  ID_FORMER_OWNER, NOM, PRENOM, AUTRE_NOM, FORMER_LAND_SIZE\r\nFROM     FORME" +
                "R_OWNERS\r\nWHERE  (ID_FORMER_OWNER = @formerid)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@formerid", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_FORMER_OWNER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT  ID_FORMER_OWNER, NOM, PRENOM, AUTRE_NOM, FORMER_LAND_SIZE\r\nFROM     FORME" +
                "R_OWNERS";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable dataTable, int formerid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(formerid));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable GetData(int formerid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(formerid));
            LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable dataTable = new LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable GetDataBy() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable dataTable = new LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.SelectOneFORMEROWNERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "SelectOneFORMEROWNER");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_FORMER_OWNER, string Original_NOM, string Original_PRENOM, string Original_AUTRE_NOM, double Original_FORMER_LAND_SIZE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_FORMER_OWNER));
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_FORMER_LAND_SIZE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NOM, string PRENOM, string AUTRE_NOM, double FORMER_LAND_SIZE) {
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(FORMER_LAND_SIZE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NOM, string PRENOM, string AUTRE_NOM, double FORMER_LAND_SIZE, int Original_ID_FORMER_OWNER, string Original_NOM, string Original_PRENOM, string Original_AUTRE_NOM, double Original_FORMER_LAND_SIZE, int ID_FORMER_OWNER) {
            if ((NOM == null)) {
                throw new System.ArgumentNullException("NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NOM));
            }
            if ((PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PRENOM));
            }
            if ((AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(FORMER_LAND_SIZE));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_FORMER_OWNER));
            if ((Original_NOM == null)) {
                throw new System.ArgumentNullException("Original_NOM");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_NOM));
            }
            if ((Original_PRENOM == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_PRENOM));
            }
            if ((Original_AUTRE_NOM == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_AUTRE_NOM));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Original_FORMER_LAND_SIZE));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ID_FORMER_OWNER));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DistinctCellsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DistinctCellsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DistinctCells";
            tableMapping.ColumnMappings.Add("CELLULE", "CELLULE");
            tableMapping.ColumnMappings.Add("CellName", "CellName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DISTINCT LAND_INFO.CELLULE, Cells.CellName\r\nFROM         LAND_INFO INNER J" +
                "OIN\r\n                      Cells ON LAND_INFO.CELLULE = Cells.CellID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.DistinctCellsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.DistinctCellsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.DistinctCellsDataTable dataTable = new LAND_COMMITEE_Data_Set.DistinctCellsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BeneficiaryCategoryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BeneficiaryCategoryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BeneficiaryCategory";
            tableMapping.ColumnMappings.Add("idcategory", "idcategory");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("comment", "comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [BeneficiaryCategory] WHERE (([idcategory] = @Original_idcategory) AN" +
                "D ([description] = @Original_description) AND ((@IsNull_comment = 1 AND [comment" +
                "] IS NULL) OR ([comment] = @Original_comment)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idcategory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idcategory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_comment", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [BeneficiaryCategory] ([description], [comment]) VALUES (@description" +
                ", @comment);\r\nSELECT idcategory, description, comment FROM BeneficiaryCategory W" +
                "HERE (idcategory = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [BeneficiaryCategory] SET [description] = @description, [comment] = @comment WHERE (([idcategory] = @Original_idcategory) AND ([description] = @Original_description) AND ((@IsNull_comment = 1 AND [comment] IS NULL) OR ([comment] = @Original_comment)));
SELECT idcategory, description, comment FROM BeneficiaryCategory WHERE (idcategory = @idcategory)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idcategory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idcategory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_comment", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idcategory", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "idcategory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     idcategory, description, comment\r\nFROM         BeneficiaryCategory";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.BeneficiaryCategoryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.BeneficiaryCategoryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.BeneficiaryCategoryDataTable dataTable = new LAND_COMMITEE_Data_Set.BeneficiaryCategoryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.BeneficiaryCategoryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "BeneficiaryCategory");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_idcategory, string Original_description, string Original_comment) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_idcategory));
            if ((Original_description == null)) {
                throw new System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_description));
            }
            if ((Original_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_comment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string description, string comment) {
            if ((description == null)) {
                throw new System.ArgumentNullException("description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(description));
            }
            if ((comment == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(comment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string description, string comment, int Original_idcategory, string Original_description, string Original_comment, int idcategory) {
            if ((description == null)) {
                throw new System.ArgumentNullException("description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(description));
            }
            if ((comment == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(comment));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_idcategory));
            if ((Original_description == null)) {
                throw new System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_description));
            }
            if ((Original_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_comment));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(idcategory));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FormerOwnerCategoryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FormerOwnerCategoryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FormerOwnerCategory";
            tableMapping.ColumnMappings.Add("idcategory", "idcategory");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("comment", "comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [FormerOwnerCategory] WHERE (([idcategory] = @Original_idcategory) AN" +
                "D ([description] = @Original_description) AND ((@IsNull_comment = 1 AND [comment" +
                "] IS NULL) OR ([comment] = @Original_comment)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idcategory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idcategory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_comment", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [FormerOwnerCategory] ([description], [comment]) VALUES (@description" +
                ", @comment);\r\nSELECT idcategory, description, comment FROM FormerOwnerCategory W" +
                "HERE (idcategory = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [FormerOwnerCategory] SET [description] = @description, [comment] = @comment WHERE (([idcategory] = @Original_idcategory) AND ([description] = @Original_description) AND ((@IsNull_comment = 1 AND [comment] IS NULL) OR ([comment] = @Original_comment)));
SELECT idcategory, description, comment FROM FormerOwnerCategory WHERE (idcategory = @idcategory)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idcategory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idcategory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_comment", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "comment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idcategory", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "idcategory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAND_COMMITEE.Properties.Settings.Default.LAND_COMMITEE_Connection_String;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     idcategory, description, comment\r\nFROM         FormerOwnerCategory";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LAND_COMMITEE_Data_Set.FormerOwnerCategoryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LAND_COMMITEE_Data_Set.FormerOwnerCategoryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LAND_COMMITEE_Data_Set.FormerOwnerCategoryDataTable dataTable = new LAND_COMMITEE_Data_Set.FormerOwnerCategoryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set.FormerOwnerCategoryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(LAND_COMMITEE_Data_Set dataSet) {
            return this.Adapter.Update(dataSet, "FormerOwnerCategory");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_idcategory, string Original_description, string Original_comment) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_idcategory));
            if ((Original_description == null)) {
                throw new System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_description));
            }
            if ((Original_comment == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_comment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string description, string comment) {
            if ((description == null)) {
                throw new System.ArgumentNullException("description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(description));
            }
            if ((comment == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(comment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string description, string comment, int Original_idcategory, string Original_description, string Original_comment, int idcategory) {
            if ((description == null)) {
                throw new System.ArgumentNullException("description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(description));
            }
            if ((comment == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(comment));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_idcategory));
            if ((Original_description == null)) {
                throw new System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_description));
            }
            if ((Original_comment == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_comment));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(idcategory));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591